if ($.ui) {
    $.wa = $.extend(true, $.wa, $.ui);
} else {
    $.wa = {};
}

$.wa = $.extend(true, $.wa, {
    data: {},
    get: function(key, defaultValue) {
        if (key == undefined) {
            return this.data;
        }
        return this.data[name] || defaultValue || null;
    },
    set: function(key, val) {
        if (key == undefined) {
            return this.data;
        }
        if (typeof(key) == 'object') {
            $.extend(this.data, key);
        } else {
            this.data[key] = value;
        }
        return this.data;
    },
    encodeHTML: function(html) {
        return html && (''+html).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
    },
    decodeHTML: function(html) {
        return html.replace(/&amp;/g,'&').replace(/&lt;/g,'<').replace(/&gt;/g,'>');
    },
    setHash: function(hash){
        if (!(hash instanceof String) && hash.toString) {
            hash = hash.toString();
        }
        hash = hash.replace(/\/\//g, "/");
        hash = hash.replace(/^.*#/, '');
        if ($.browser && $.browser.safari) {
            // Work around bug in safari 5.0.5 and down that broke UTF8 hashes
            if (parent) {
                parent.window.location = parent.window.location.href.replace(/#.*/, '') + '#' + hash;
            } else {
                window.location = location.href.replace(/#.*/, '') + '#' + hash;
            }
        } else if (parent && (!$.browser || !$.browser.msie)) {
            parent.window.location.hash = hash;
        } else {
            location.hash = hash;
        }
        return true;
    },
    back: function (hash) {
        if (history.length > 2) {
            if (typeof(hash)=='number' && parseInt(hash) == hash) {
                history.go(-hash);
            } else {
                history.go(-1);
            }
        } else if ($.browser.msie && history.length > 0) {
            history.back();
        } else if (hash) {
            this.setHash(hash);
        }
        return false;
    },
    toggleHashParam: function(param){
        var hash = location.hash;
        if (hash.search(param) == -1){
            this.addToHash(param);
        } else {
            this.removeFromHash(param);
        }
    },
    addToHash: function(param){
        var hash = location.hash;
        if (hash.search(param) == -1){
            hash+='/'+param+'/';
        }
        this.setHash(hash);
    },
    removeFromHash: function(param){
        var hash = location.hash;
        if (hash.search(param) > -1){
            hash = hash.replace(param, "");
        }
        this.setHash(hash);
    },

    setTitle: function (title) {
        document.title = title;
    },
    array_search: function ( needle, haystack, strict ) {
        var strict = !!strict;

        for(var key in haystack){
            if( (strict && haystack[key] === needle) || (!strict && haystack[key] == needle) ){
                return key;
            }
        }
        return false;
    },

    /** Create dialog with given id (or use existing) and set it up according to properties.
        p = {
            content: // content for the dialog to show immediately. Default is a loading image.
            buttons: // html for button area. Defaut is a single 'cancel' link.

            url: ..., // if specified, content will be loaded from given url
            post: { // used with url; contains post parameters.
                var: value
            },
            onload: null // function to call when content is loaded (only when url is specified)
        }
      */
    dialogCreate: function(id, p) {
        p = $.extend({
                content: '<h1>Loading... <i class="icon16 loading"></i></h1>',
                buttons: null,
                url: null,
                post: null,
                small: false,
                onload: null,
                oncancel: null
            }, p);

        p.content = $(p.content);
        if (!p.buttons) {
            p.buttons = $('<input type="submit" class="button gray" value="'+$_('Cancel')+'">').click(function() {
                if (p.oncancel) {
                    p.oncancel.call(dialog[0]);
                }
                $.wa.dialogHide();
            });
        } else {
            p.buttons = $(p.buttons);
        }

        var dialog = $('#'+id);
        if (dialog.size() <= 0) {
            dialog = $(
                '<div class="dialog" id="'+id+'" style="display: none">'+
                    '<div class="dialog-background"></div>'+
                    '<div class="dialog-window">'+
                        '<div class="dialog-content">'+
                            '<div class="dialog-content-indent">'+
                                // content goes here
                            '</div>'+
                        '</div>'+
                        '<div class="dialog-buttons">'+
                            '<div class="dialog-buttons-gradient">'+
                                // buttons go here
                            '</div>'+
                        '</div>'+
                    '</div>'+
                '</div>'
            ).appendTo('body');
        }

        dialog.find('.dialog-buttons-gradient').empty().append(p.buttons);
        dialog.find('.dialog-content-indent').empty().append(p.content);
        dialog.show();

        if (p.small) {
            dialog.addClass('small');
        } else {
            dialog.removeClass('small');
        }

        if (p.url) {
            var f_callback = function (response) {
                dialog.find('.dialog-content-indent').html(response);
                $.wa.waCenterDialog(dialog);
                if (p.onload) {
                    p.onload.call(dialog[0]);
                }
            };
            if (p.post) {
                $.post(p.url, p.post, f_callback);
            } else {
                $.get(p.url, f_callback);
            }
        }

        this.waCenterDialog(dialog);

        // close on escape key
        var onEsc = function(e) {
            if (!dialog.is(':visible')) {
                return;
            }

            if (e && e.keyCode == 27) { // escape
                if (p.oncancel && typeof p.oncancel == 'function') {
                    p.oncancel.call(dialog[0]);
                }
                $.wa.dialogHide();
                return;
            }

            $(document).one('keyup', onEsc);
        };
        onEsc();
        $(document).one('hashchange', $.wa.dialogHide);
        return dialog;
    },

    /** Center the dialog initially or when its properties changed significantly
      * (e.g. when .small class applied or removed) */
    waCenterDialog: function(dialog) {
        dialog = $(dialog);

        // Have to adjust width and height via JS because of min-width and min-height properties.
        var wdw = dialog.find('.dialog-window');

        var dw = wdw.outerWidth(true);
        var dh = wdw.outerHeight(true);

        var ww = $(window).width();
        var wh = $(window).height();

        var w = (ww-dw)/2 / ww;
        var h = (wh-dh)/2 / wh;

        wdw.css({
            'left': Math.round(w*100)+'%',
            'top': Math.round(h*100)+'%'
        });
    },

    /** Hide all dialogs */
    dialogHide: function() {
        $('.dialog').hide();
        return false;
    },

    /** Close all .dropdown menus */
    dropdownsClose: function() {
        var dd = $('.dropdown:not(.disabled)');
        dd.addClass('disabled');
        setTimeout(function() {
            dd.removeClass('disabled');
        }, 600);
    },

    /** Enable automatic close of .dropdowns when user clicks on item inside one. */
    dropdownsCloseEnable: function() {
        $(document).on('click', '.dropdown:not(.disabled)', this.dropdownsClickHandler);
    },

    /** Disable automatic close of .dropdowns when user clicks on item inside one. */
    dropdownsCloseDisable: function() {
        $(document).off('click', '.dropdown:not(.disabled)', this.dropdownsClickHandler);
    },

    /** Click handler used in dropdownsCloseDisable() and dropdownsCloseEnable(). */
    dropdownsClickHandler: function(e) {
        var self = $(this);
        if (self.hasClass('no-click-close')) {
            return;
        }
        self.addClass('disabled');
        setTimeout(function() {
            self.removeClass('disabled');
        }, 600);
    },

     /** Set default value for an input field. If field becomes empty, it receives specified css class
        * and default value. On field focus, css class and value are removed. On blur, if field
        * is still empty, css class and value are restored. */
    defaultInputValue: function(input, defValue, cssClass) {
        if (!(input instanceof jQuery)) {
            input = $(input);
        }

        var onBlur = function() {
            var v = input.val();
            if (!v || v == defValue) {
                input.val(defValue);
                input.addClass(cssClass);
            }
        };
        onBlur();
        input.blur(onBlur);
        input.focus(function() {
            if (input.hasClass(cssClass)) {
                input.removeClass(cssClass);
                input.val('');
            }
        });
    },

    /**
     * Load a bunch of .js and .css files.
     * Return a jQuery Promise object that resolves when all scripts are loaded.
     *
     * Accepts either several filenames/promises as arguments,
     * or an array of filenames/promises,
     * or a hashmap { filename: boolean whether to load file }
     */
    loadFiles: function(files) {

        // Convert arguments to an array of filenames/promises
        if (!$.isArray(files)) {
            // Allows to pass hashmap { filename: boolean }
            if (typeof files === 'object' && !$.isArray(files)) {
                files = $.map(files, function(should_load, file) {
                    return should_load ? file : null;
                });
            }
            // allows to pass several filenames directly as arguments
            else {
                files = [].slice.apply(arguments);
            }
        }

        // Start loading and obtain list of promises
        var promises = files.map(function(file) {
            // make sure `file` is a non-empty string
            if (!file) {
                return null;
            } else if (typeof file != 'string') {
                if (typeof file === 'object' && typeof file.then === "function") {
                    return file; // allows to mix in custom promises
                } else {
                    return null;
                }
            }

            // CSS?
            if (file.match(/\.css(\?.*)?$/)) {
                $('<link>').appendTo('head').attr({
                    type: 'text/css',
                    rel: 'stylesheet',
                    href: file
                });

                // Trying to figure out when CSS loads is cumbersome.
                // So we don't bother for now.
                return null;
            }

            // Otherwise it's a JS script
            return $.ajax({
                cache: true,
                dataType: "script",
                url: file
            });

        }).filter(function(file) {
            return !!file;
        });

        // Combine promises into a single one
        return $.when.apply($, promises);
    },

    /**
     * Automatically set server-side timezone if "Auto" timezone setting
     * is saved in user profile.
     */
    determineTimezone: function(wa_url, callback) {

        var done = false;
        $.each(document.cookie.split(/;\s*/g), function(i, pair) {
            pair = pair.split('=', 2);
            if (pair[0] == 'tz') {
                done = true;
                if (callback) {
                    callback(pair[1]);
                }
                return false;
            }
        });

        if (done) {
            return;
        }

        var options = {};
        options[wa_url + "wa-content/js/jstz/jstz.min.js"] = !window.jstz;
        $.wa.loadFiles(options).then(function() {
            var timezone = window.jstz.determine().name();

            // Session cookie timezone
            document.cookie = "tz="+jstz.determine().name();

            // Expires in two weeks
            var expire = new Date();
            expire.setTime(expire.getTime() + 14*24*60*60*1000); // two weeks
            document.cookie = "oldtz="+timezone+"; expires="+expire.toUTCString();
            if (callback) {
                callback(timezone);
            }
        });
    },

    util: {
        formatFileSize: function(bytes) {
            var i = -1;
            do {
                bytes = bytes / 1024;
                i++;
            } while (bytes > 99);

            return Math.max(bytes, 0.01).toFixed(2) + ((i >=0)? (' ' + $_(['kB', 'MB', 'GB', 'TB', 'PB', 'EB'][i])):'');
        }
    }
});

if (!window.wa_skip_ajax_setup) {
    $.ajaxSetup({'cache': false});
    $(document).ajaxError(function(e, xhr, settings, exception) {
        // Generic error page
        if (xhr.status !== 200 && xhr.responseText) {
            if (!$.wa.errorHandler || $.wa.errorHandler(xhr)) {
                if (xhr.responseText.indexOf('Exception') != -1) {
                    $.wa.dialogCreate('ajax-error', {'content': "<div>" + xhr.responseText + '</div>'});
                    return;
                }

                document.open("text/html");
                document.write(xhr.responseText); // !!! throws an "Access denied" exception in IE9
                document.close();
                $(window).one('hashchange', function() {
                    window.location.reload();
                });
            }
        }
        // Session timeout, show login page
        else if (xhr.getResponseHeader('wa-session-expired')) {
            window.location.reload();
        }
        // Show an exception in development mode
        else if (typeof xhr.responseText !== 'undefined' && xhr.responseText.indexOf('Exception') != -1) {
            $.wa.dialogCreate('ajax-error', {'content': "<div>" + xhr.responseText + '</div>'});
        }
    });
}

if (!window.wa_skip_csrf_prefilter) {
    $.ajaxPrefilter(function (settings, originalSettings, xhr) {
        if ((settings.type||'').toUpperCase() !== 'POST') {
            return;
        }

        var matches = document.cookie.match(new RegExp("(?:^|; )_csrf=([^;]*)"));
        if (!matches || !matches[1]) {
            return;
        }

        var csrf = decodeURIComponent(matches[1]);
        if (!settings.data && settings.data !== 0) settings.data = '';

        if (typeof(settings.data) == 'string') {
            if (settings.data.indexOf('_csrf=') == -1) {
                settings.data += (settings.data.length > 0 ? '&' : '') + '_csrf=' + csrf;
                xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");
            }
        } else if (typeof(settings.data) == 'object') {
            if (window.FormData && settings.data instanceof window.FormData) {
                if ('function' == typeof settings.data.set) {
                    settings.data.set('_csrf', csrf);
                } else {
                    settings.data.append('_csrf', csrf);
                }
            } else {
                settings.data['_csrf'] = csrf;
            }
        }
    });
}

if (!Array.prototype.indexOf)
{
    Array.prototype.indexOf = function(elt /*, from*/)
    {
    var len = this.length;

    var from = Number(arguments[1]) || 0;
    from = (from < 0)
         ? Math.ceil(from)
         : Math.floor(from);
    if (from < 0){from += len;}

    for (; from < len; from++)
    {
        if (from in this &&
            this[from] === elt) {
            return from;
        }
    }
    return -1;
    };
}

/** Localization */

// strings set up by apps
$.wa.locale = $.wa.locale || {};

/** One parameter: translate a string.
  * Two parameters, int and string: translate and get correct word form to use with number. */
$_ = function(p1, p2) {
    if (!$ || !$.wa || !$.wa.locale) {
        console.log('JS localization failed: empty $.wa.locale');
        return ('string' === typeof p2) ? p2 : p1;
    }
    // Two parameters: number and string?
    if (p2) {
        if (!$.wa.locale[p2]) {
            if (console){
                console.log('JS localization failed: '+p2);
            }
            return p2;
        }
        if (typeof $.wa.locale[p2] == 'string') {
            return $.wa.locale[p2];
        }

        var d = Math.floor(p1 / 10) % 10,
            e = p1 % 10;
        if (d == 1 || e > 4 || e == 0) {
            return $.wa.locale[p2][2];
        }
        if (e == 1) {
            return $.wa.locale[p2][0];
        }
        return $.wa.locale[p2][1];
    }

    // Just one parameter: a string
    if ($.wa.locale[p1]) {
        return typeof $.wa.locale[p1] == 'string' ? $.wa.locale[p1] : $.wa.locale[p1][0];
    }

    if (console){
        console.log('JS localization failed: '+p1);
    }
    return p1;
};

// EOF;
jQuery.fn.waDialog = function (options) {
    options = jQuery.extend({
        loading_header: '',
        title: '',
        esc: true,
        buttons: null,
        url: null,
        url_reload: true,
        'class': null, // className is a synonym
        content: null,
        'width': 0,
        'height': 0,
        'min-width': 0,
        'min-height': 0,
        offsetTop: null,
        offsetLeft: null,
        disableButtonsOnSubmit: false,
        onLoad: null,
        onCancel: null,
        onSubmit: null
    }, options || {});

    var d = $(this);

    var id = d.attr('id');
    if (id && !d.hasClass('dialog')) {
        d.removeAttr('id');
        if ($("#" + id).length) {
            if (options.url) {
                d = $("#" + id);
                if (!options.url_reload) {
                    options.url = null;
                }
            } else {
                $("#" + id).remove();
            }
        }
    }

    var cl = (options['class'] || options['className']) ? (options['class'] || options['className']) : (d.attr('class') || '');

    if (!d.hasClass('dialog')) {
        var content = $(this);
        var $dialog_parent = d.parent();
        if (!$dialog_parent.length || !$dialog_parent.is(':visible')) {
            $dialog_parent = $('body');
        }
        d = $('<div ' + (id ? 'id = "' + id + '"' : '') + ' class="dialog ' + cl + '" style="display: none">'+
                    '<div class="dialog-background"></div>'+
                    '<div class="dialog-window"></div>'+
              '</div>').appendTo($dialog_parent);
        if (content.find('.dialog-content').length || content.find('.dialog-buttons').length) {
            $('.dialog-window', d).append(content.show());
            var dc = content.find('.dialog-content');
            if (dc.length) {
                var tmp = $('<div class="dialog-content-indent"></div>');
                dc.contents().appendTo(tmp);
                dc.append(tmp);
            }
            dc = content.find('.dialog-buttons');
            if (dc.length) {
                var tmp = $('<div class="dialog-buttons-gradient"></div>');
                dc.contents().appendTo(tmp);
                dc.append(tmp);
            }
        } else {
            $('.dialog-window', d).append(
                    (options.onSubmit ? '<form method="post" action="">' : '') +
                    '<div class="dialog-content">'+
                        '<div class="dialog-content-indent">'+
                            // content goes here
                        '</div>'+
                    '</div>'+
                    '<div class="dialog-buttons">'+
                        '<div class="dialog-buttons-gradient">'+
                            // buttons go here
                        '</div>'+
                    '</div>'+
                    (options.onSubmit ? '</form>' : '')
            );
            d.find('.dialog-content-indent').append(content.show());
        }
        if (options.buttons) {
            d.find('.dialog-buttons-gradient').empty().append(options.buttons);
        }
        if (options.url) {
            d.find('.dialog-content-indent').append('<h1>'+(options.loading_header || '')+'<i class="icon16 loading"></i></h1>');
        } else if (options.content) {
            d.find('.dialog-content-indent').append(options.content);
        }
        if (options.title) {
            d.find('.dialog-content-indent').prepend('<h1>' + options.title + '</h1>');
        }
    } else {
        if (options.content) {
            d.find('.dialog-content-indent').html(options.content);
            if (options.title) {
                d.find('.dialog-content-indent').prepend('<h1>' + options.title + '</h1>');
            }
        }
        if (options.buttons) {
            d.find('.dialog-buttons-gradient').empty().append(options.buttons);
        }
    }

    if (!d.find('.dialog-background').length) {
        d.prepend('<div class="dialog-background"> </div>');
    }

    d.unbind('close').bind('close', function () {
        if (options.onClose) {
            options.onClose.call($(this));
        }
        $(this).hide();
    });

    var css = ['width', 'height', 'min-width', 'min-height'];
    for (var k = 0; k < css.length; k++) {
        if (options[css[k]]) {
            if ((css[k] == 'height' && options[css[k]] < '300px') || (css[k] == 'width' && options[css[k]] < '400px')) {
                d.find('div.dialog-window').css('min-' + css[k], options[css[k]]);
            }
            d.find('div.dialog-window').css(css[k], options[css[k]]);
        }
    }

    if (options.disableButtonsOnSubmit) {
        d.find("input[type=submit]").removeAttr('disabled');
    }

    if (!d.parent().length) {
        d.appendTo('body');
    }


    d.show();

    if (options.url) {
        jQuery.get(options.url, function (response) {
            var el = $(response);
            if (el.find('.dialog-content').length || el.find('.dialog-buttons').length) {
                if (el.find('.dialog-content').length) {
                    d.find('.dialog-content-indent').empty().append(el.find('.dialog-content').contents());
                }
                if (el.find('.dialog-buttons').length) {
                    d.find('.dialog-buttons-gradient').empty().append(el.find('.dialog-buttons').contents());
                }
            } else {
                d.find('.dialog-content-indent').html(response);
            }
            d.trigger('wa-resize');
            if (options.onLoad) {
                options.onLoad.call(d.get(0));
            }
        });
    } else {
        if (options.onLoad) {
            options.onLoad.call(d.get(0));
        }
    }

    d.find('.dialog-buttons').delegate('.cancel', 'click', function (e) {
        e.stopPropagation();
        e.preventDefault();
        if (options.onCancel) {
            options.onCancel.call(d.get(0));
        }
        d.trigger('close');
        return false;
    });


    if (options.onSubmit) {
        d.find('form').unbind('submit').submit(function (evt) {
            if (options.disableButtonsOnSubmit) {
                d.find("input[type=submit]").attr('disabled', 'disabled');
            }
            try {
                return options.onSubmit.apply(this, [d, evt]);
            } catch (e) {
                evt.preventDefault();
                throw e;
            }
        });
    }

    d.unbind('wa-resize').bind('wa-resize', function () {
        var el = jQuery(this).find('.dialog-window');
        var dw = el.width();
        var dh = el.height();

        jQuery("body").css('min-height', dh+'px');

        var ww = jQuery(window).width();
        var wh = jQuery(window).height()-60;

        //centralize dialog
        var w = (ww-dw)/2 / ww;
        var h = (wh-dh-60)/2 / wh; //60px is the height of .dialog-buttons div
        if (h < 0) h = 0;
        if (w < 0) w = 0;

        el.css({
            'left': options.offsetLeft || (Math.round(w*100)+'%'),
            'top': options.offsetTop || (Math.round(h*100)+'%')
        });
    }).trigger('wa-resize');

    if (options.esc) {
        d.unbind('esc').bind('esc', function () {
            d.trigger('close');
        });
    }
    return d;
}

jQuery(window).resize(function () {
    jQuery(".dialog:visible").trigger('wa-resize');
});

jQuery(document).keyup(function(e) {
    //all dialogs should be closed when Escape is pressed
    if (e.keyCode == 27) {
        jQuery(".dialog:visible").trigger('esc');
    }
});;
/**
 * jQuery History Plugin (balupton edition) - Simple History Handler/Remote for Hash, State, Bookmarking, and Forward Back Buttons
 * Copyright (C) 2008-2009 Benjamin Arthur Lupton
 * http://www.balupton/projects/jquery_history/
 *
 * This file is part of jQuery History Plugin (balupton edition).
 * 
 * jQuery History Plugin (balupton edition) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * jQuery History Plugin (balupton edition) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with jQuery History Plugin (balupton edition).  If not, see <http://www.gnu.org/licenses/>.
 *
 * @name jqsmarty: jquery.history.js
 * @package jQuery History Plugin (balupton edition)
 * @version 1.0.1-final
 * @date July 11, 2009
 * @category jquery plugin
 * @author Benjamin "balupton" Lupton {@link http://www.balupton.com}
 * @copyright (c) 2008-2009 Benjamin Arthur Lupton {@link http://www.balupton.com}
 * @license GNU Affero General Public License - {@link http://www.gnu.org/licenses/agpl.html}
 * @example Visit {@link http://jquery.com/plugins/project/jquery_history_bal} for more information.
 * 
 * 
 * I would like to take this space to thank the following projects, blogs, articles and people:
 * - jQuery {@link http://jquery.com/}
 * - jQuery UI History - Klaus Hartl {@link http://www.stilbuero.de/jquery/ui_history/}
 * - Really Simple History - Brian Dillard and Brad Neuberg {@link http://code.google.com/p/reallysimplehistory/}
 * - jQuery History Plugin - Taku Sano (Mikage Sawatari) {@link http://www.mikage.to/jquery/jquery_history.html}
 * - jQuery History Remote Plugin - Klaus Hartl {@link http://stilbuero.de/jquery/history/}
 * - Content With Style: Fixing the back button and enabling bookmarking for ajax apps - Mike Stenhouse {@link http://www.contentwithstyle.co.uk/Articles/38/fixing-the-back-button-and-enabling-bookmarking-for-ajax-apps}
 * - Bookmarks and Back Buttons {@link http://ajax.howtosetup.info/options-and-efficiencies/bookmarks-and-back-buttons/}
 * - Ajax: How to handle bookmarks and back buttons - Brad Neuberg {@link http://dev.aol.com/ajax-handling-bookmarks-and-back-button}
 *
 **
 ***
 * CHANGELOG
 **
 * v1.0.1-final, July 11, 2009
 * - Restructured a little bit
 * - Documented
 * - Cleaned go/request
 *
 * v1.0.0-final, June 19, 2009
 * - Been stable for over a year now, pushing live.
 * 
 * v0.1.0-dev, July 24, 2008
 * - Initial Release
 * 
 */

// Start of our jQuery Plugin
(function($)
{	// Create our Plugin function, with $ as the argument (we pass the jQuery object over later)
	// More info: http://docs.jquery.com/Plugins/Authoring#Custom_Alias
	
	// Debug
	
	if (typeof console === 'undefined') {
		console = typeof window.console !== 'undefined' ? window.console : {};
	}
	console.log			= console.log 			|| function(){};
	console.debug		= console.debug 		|| console.log;
	console.warn		= console.warn			|| console.log;
	console.error		= console.error			|| function(){var args = [];for (var i = 0; i < arguments.length; i++) { args.push(arguments[i]); } alert(args.join("\n")); };
	console.trace		= console.trace			|| console.log;
	console.group		= console.group			|| console.log;
	console.groupEnd	= console.groupEnd		|| console.log;
	console.profile		= console.profile		|| console.log;
	console.profileEnd	= console.profileEnd	|| console.log;
	
	
	// Declare our class
	$.History = {
		// Our Plugin definition
		
		// -----------------
		// Options
		
		options: {
			debug: false
		},
		
		// -----------------
		// Variables
		
		state:		'',
		$window:	null,
		$iframe:	null,
		handlers:	{
			generic:	[],
			specific:	{}
		},
		
		// --------------------------------------------------
		// Functions
		
		/**
		 * Format a hash into a proper state
		 * @param {String} hash
		 */
		format: function ( hash ) {
			// Format the hash
			hash = hash.replace(/^.+?#/g,'').replace(/^#?\/?|\/?$/g, '');
			// Return the hash
			return hash;
		},
		
		/**
		 * Get the current state of the application
		 */
        getState: function ( ) {
			var History = $.History;
			// Get the current state
			return History.state;
        },
		/**
		 * Set the current state of the application
		 * @param {String} hash
		 */
		setState: function ( state ) {
			var History = $.History;
			// Format the state
			state = History.format(state)
			// Apply the state
			History.state = state;
			// Return the state
			return History.state;
		},
		
		/**
		 * Get the current hash of the browser
		 */
		getHash: function ( ) {
			var History = $.History;
			// Get hash
			if (parent && !$.browser.msie) {
				var hash = parent.window.location.hash;
			} else {
				var hash = window.location.hash || location.hash;
			}
			// Format the hash
			hash = History.format(hash);
			// Return the hash
			return hash;
		},
		/**
		 * Set the current hash of the browser
		 * @param {String} hash
		 */
		setHash: function ( hash ) {
			var History = $.History;
			// Prepare hash
			hash = $.History.format(hash);
			hash = hash.replace(/^\/?|\/?(\?)|\/?$/g, '/$1');
			
			// Write hash
			if ( typeof window.location.hash !== 'undefined' ) {
				//window.location.hash = hash;
			} else {
				location.hash = hash;
			}
			
			// Update IE<8 History
			if ( $.browser.msie && parseInt($.browser.version, 10) < 8 )
			{	// We are IE<8
				$.History.$iframe.contentWindow.document.open();
				$.History.$iframe.contentWindow.document.close();
				//$.History.$iframe.contentWindow.document.location.hash = $.History.getState();						
			}
			
		},
		
		/**
		 * Go to the specific state - does not force a history entry like setHash
		 * @param {String} state
		 */
		go: function ( state ) {
			var History = $.History;
			
			// Format the state
			state = History.format(state);
			
			// Get the current hash
			var hash = History.getHash();
			
			// Are they different?
			if ( hash !== state ) {
				// Yes, create a history entry
				History.setHash(state);
				// Wait for hashchange
			} else {
				// No change, but update state and fire
				History.setState(state);
				History.trigger();
			}
			
			// Done
			return true;
		},
		
		/**
		 * Fired when the hash is changed, either automaticly or manually
		 * @param {Event} e
		 */
		hashchange: function ( e ) {

			var History = $.History;
			
			// Debug
			if ( History.options.debug ) {
				console.debug('History.hashchange', this, arguments);
			}
			
			// Get Hash
			var hash = History.getHash();
			var state = History.getState();
			
			// Prevent IE 8 from fireing this twice
			if ( (!History.$iframe && state === hash) || (History.$iframe && History.hash === History.$iframe.contentWindow.document.location.hash) ) {
				// For some reason this works
				return false;
			}
			
			// Check
			if ( state === hash ) {
				// Nothing to do
				return false;
			}
			
			// Update the state with the new hash
			History.setState(hash);
			
			// Fire the handler
			History.trigger();
			
			// All done
			return true;
		},
		
		/**
		 * Bind a handler to a hash
		 * @param {Object} state
		 * @param {Object} handler
		 */
		bind: function ( state, handler ) {
			var History = $.History;
			// 
			if ( handler ) {
				// We have a state specific handler
				// Prepare
				if ( typeof History.handlers.specific[state] === 'undefined' )
				{	// Make it an array
					History.handlers.specific[state] = [];
				}
				// Push new handler
				History.handlers.specific[state].push(handler);
			}
			else {
				// We have a generic handler
				handler = state;
				History.handlers.generic.push(handler);
			}
			
			// Done
			return true;
		},
		
		/**
		 * Trigger a handler for a state
		 * @param {String} state
		 */
		trigger: function ( state ) {
			var History = $.History;
			
			// Prepare
			if ( typeof state === 'undefined' ) {
				// Use current
				state = History.getState();
			}
			var i, n, handler, list;
			
			// Fire specific
			if ( typeof History.handlers.specific[state] !== 'undefined' ) {
				// We have specific handlers
				list = History.handlers.specific[state];
				for ( i = 0, n = list.length; i < n; ++i ) {
					// Fire the specific handler
					handler = list[i];
					handler(state);
				}
			}
			
			// Fire generics
			list = History.handlers.generic;
			for ( i = 0, n = list.length; i < n; ++i ) {
				// Fire the specific handler
				handler = list[i];
				handler(state);
			}
			
			// Done
			return true;
		},
		
		// --------------------------------------------------
		// Constructors
		
		/**
		 * Construct our application
		 */
		construct: function ( ) {
			var History = $.History;
			
			// Modify the document
			$(document).ready(function() {
				// Prepare the document
				History.domReady();
			});
			
			// Done
			return true;
		},
		
		/**
		 * Configure our application
		 * @param {Object} options
		 */
		configure: function ( options ) {
			var History = $.History;
			
			// Set options
			History.options = $.extend(History.options, options);
			
			// Done
			return true;
		},
		
		domReadied: false,
		domReady: function ( ) {
			var History = $.History;
			
			// Runonce
			if ( History.domRedied ) {
				return;
			}
			History.domRedied = true;
			
			// Define window
			History.$window = $(window);
			
			// Apply the hashchange function
			History.$window.bind('hashchange', this.hashchange);
			
			// Force hashchange support for all browsers
			setTimeout(History.hashchangeLoader, 200);
			
			// All done
			return true;
		},
		
		/**
		 * Enable hashchange for all browsers
		 */
		hashchangeLoader: function () {
			var History = $.History;
			
			// More is needed for non IE8 browsers
			if ( !($.browser.msie && parseInt($.browser.version) >= 8) ) {	
				// We are not IE8
			
				// State our checker function, it is used to constantly check the location to detect a change
				var checker;
				
				// Handle depending on the browser
				if ( $.browser.msie ) {
					// We are still IE
				
					// Append and $iframe to the document, as $iframes are required for back and forward
					// Create a hidden $iframe for hash change tracking
					History.$iframe = $('<iframe id="jquery-history-iframe" style="display: none;"></$iframe>').prependTo(document.body)[0];
					
					// Create initial history entry
					History.$iframe.contentWindow.document.open();
					History.$iframe.contentWindow.document.close();
					
					// Check for initial state
					var hash = History.getHash();
					if ( hash ) {
						// Apply it to the iframe
						History.$iframe.contentWindow.document.location.hash = hash;
					}
					
					// Define the checker function (for bookmarks)
					checker = function ( ) {
						var iframeHash = History.format(History.$iframe.contentWindow.document.location.hash);
						if ( History.getState() !== iframeHash ) {
							// Back Button Change
							History.setHash(History.$iframe.contentWindow.document.location.hash);
						}
						var hash = History.getHash();
						if ( History.getState() !== hash ) {
							// The has has changed
							History.go(hash);
						}
					};
				}
				else {
					// We are not IE
				
					// Define the checker function (for bookmarks, back, forward)
					checker = function ( ) {
						var hash = History.getHash();
						if ( History.getState() !== hash ) {
							// The has has changed
							History.go(hash);
						}
					};
				}
				
				// Apply the checker function
				if ( !($.browser.msie && parseInt($.browser.version) < 8) ) {
					setInterval(checker, 200);
				} else {
					setInterval(checker, 1500);
				}
			}
			else {
				// We are IE8
				var hash = History.getHash();
				if (hash) {
					History.$window.trigger('hashchange');
				}
			}
			
			// Done
			return true;
		}
	
	}; // We have finished extending/defining our Plugin

	// --------------------------------------------------
	// Finish up
	
	// Instantiate
	$.History.construct();

// Finished definition

})(jQuery); // We are done with our plugin, so lets call it with jQuery as the argument
;
jQuery.JSON = {
    useHasOwn : ({}.hasOwnProperty ? true : false),
    pad : function(n) {
        return n < 10 ? "0" + n : n;
    },
    m : {
        "\b": '\\b',
        "\t": '\\t',
        "\n": '\\n',
        "\f": '\\f',
        "\r": '\\r',
        '"' : '\\"',
        "\\": '\\\\'
    },
    encodeString : function(s){
        if (/["\\\x00-\x1f]/.test(s)) {
            return '"' + s.replace(/([\x00-\x1f\\"])/g, function(a, b) {
                    var c = jQuery.JSON.m[b];
                    if(c){
                        return c;
                    }
                    c = b.charCodeAt();
                    return "\\u00" +
                    Math.floor(c / 16).toString(16) +
                    (c % 16).toString(16);
            }) + '"';
        }
        return '"' + s + '"';
    },
    encodeArray : function(o){
        var a = ["["], b, i, l = o.length, v;
        for (i = 0; i < l; i += 1) {
            v = o[i];
            switch (typeof v) {
            case "undefined":
            case "function":
            case "unknown":
                break;
            default:
                if (b) {
                    a.push(',');
                }
                a.push(v === null ? "null" : this.encode(v));
                b = true;
            }
        }
        a.push("]");
        return a.join("");
    },
    encodeDate : function(o){
        return '"' + o.getFullYear() + "-" +
        pad(o.getMonth() + 1) + "-" +
        pad(o.getDate()) + "T" +
        pad(o.getHours()) + ":" +
        pad(o.getMinutes()) + ":" +
        pad(o.getSeconds()) + '"';
    },
    encode : function(o){
        if(typeof o == "undefined" || o === null){
            return "null";
        }else if(o instanceof Array){
            return this.encodeArray(o);
        }else if(o instanceof Date){
            return this.encodeDate(o);
        }else if(typeof o == "string"){
            return this.encodeString(o);
        }else if(typeof o == "number"){
            return isFinite(o) ? String(o) : "null";
        }else if(typeof o == "boolean"){
            return String(o);
        }else {
            var self = this;
            var a = ["{"], b, i, v;
            for (i in o) {
                if(!this.useHasOwn || o.hasOwnProperty(i)) {
                    v = o[i];
                    switch (typeof v) {
                    case "undefined":
                    case "function":
                    case "unknown":
                        break;
                    default:
                        if(b){
                            a.push(',');
                        }
                        a.push(self.encode(i), ":",
                            v === null ? "null" : self.encode(v));
                        b = true;
                    }
                }
            }
            a.push("}");
            return a.join("");
        }
    },
    decode : function(json){
        return eval("(" + json + ')');
    }
};
;
/*
 * jQuery store - Plugin for persistent data storage using localStorage, userData (and window.name)
 * 
 * Authors: Rodney Rehm
 * Web: http://medialize.github.com/jQuery-store/
 * 
 * Licensed under the MIT License:
 *   http://www.opensource.org/licenses/mit-license.php
 *
 */

/**********************************************************************************
 * INITIALIZE EXAMPLES:
 **********************************************************************************
 * 	// automatically detect best suited storage driver and use default serializers
 *	$.storage = new $.store();
 *	// optionally initialize with specific driver and or serializers
 *	$.storage = new $.store( [driver] [, serializers] );
 *		driver		can be the key (e.g. "windowName") or the driver-object itself
 *		serializers	can be a list of named serializers like $.store.serializers
 **********************************************************************************
 * USAGE EXAMPLES:
 **********************************************************************************
 *	$.storage.get( key );			// retrieves a value
 *	$.storage.set( key, value );	// saves a value
 *	$.storage.del( key );			// deletes a value
 *	$.storage.flush();				// deletes aall values
 **********************************************************************************
 */

(function($,undefined){

/**********************************************************************************
 * $.store base and convinience accessor
 **********************************************************************************/

$.store = function( driver, serializers )
{
	var that = this;
	
	if( typeof driver == 'string' )
	{
		if( $.store.drivers[ driver ] )
			this.driver = $.store.drivers[ driver ];
		else
			throw new Error( 'Unknown driver '+ driver );
	}
	else if( typeof driver == 'object' )
	{
		var invalidAPI = !$.isFunction( driver.init )
			|| !$.isFunction( driver.get )
			|| !$.isFunction( driver.set )
			|| !$.isFunction( driver.del )
			|| !$.isFunction( driver.flush );
			
		if( invalidAPI )
			throw new Error( 'The specified driver does not fulfill the API requirements' );
		
		this.driver = driver;
	}
	else
	{
		// detect and initialize storage driver
		$.each( $.store.drivers, function()
		{
			// skip unavailable drivers
			if( !$.isFunction( this.available ) || !this.available() )
				return true; // continue;
			
			that.driver = this;
			if( that.driver.init() === false )
			{
				that.driver = null;
				return true; // continue;
			}
			
			return false; // break;
		});
	}
	
	// use default serializers if not told otherwise
	if( !serializers )
		serializers = $.store.serializers;
	
	// intialize serializers
	this.serializers = {};
	$.each( serializers, function( key, serializer )
	{
		// skip invalid processors
		if( !$.isFunction( this.init ) )
			return true; // continue;
		
		that.serializers[ key ] = this;
		that.serializers[ key ].init( that.encoders, that.decoders );
	});
};


/**********************************************************************************
 * $.store API
 **********************************************************************************/

$.extend( $.store.prototype, {
	get: function( key )
	{
		var value = this.driver.get( key );
		return this.driver.encodes ? value : this.unserialize( value );
	},
	set: function( key, value )
	{
		this.driver.set( key, this.driver.encodes ? value : this.serialize( value ) );
	},
	del: function( key )
	{
		this.driver.del( key );
	},
	flush: function()
	{
		this.driver.flush();
	},
	driver : undefined,
	encoders : [],
	decoders : [],
	serialize: function( value )
	{
		var that = this;
		
		$.each( this.encoders, function()
		{
			var serializer = that.serializers[ this + "" ];
			if( !serializer || !serializer.encode )
				return true; // continue;
			try
			{
				value = serializer.encode( value );
			}
			catch( e ){}
		});

		return value;
	},
	unserialize: function( value )
	{
		var that = this;
		if( !value )
			return value;
		
		$.each( this.decoders, function()
		{
			var serializer = that.serializers[ this + "" ];
			if( !serializer || !serializer.decode )
				return true; // continue;

			value = serializer.decode( value );
		});

		return value;
	}
});


/**********************************************************************************
 * $.store drivers
 **********************************************************************************/

$.store.drivers = {
	// Firefox 3.5, Safari 4.0, Chrome 5, Opera 10.5, IE8
	'localStorage': {
		// see https://developer.mozilla.org/en/dom/storage#localStorage
		ident: "$.store.drivers.localStorage",
		scope: 'browser',
		available: function()
		{
			try
			{
				return !!window.localStorage;
			}
			catch(e)
			{
				// Firefox won't allow localStorage if cookies are disabled
				return false;
			}
		},
		init: $.noop,
		get: function( key )
		{
			return window.localStorage.getItem( key );
		},
		set: function( key, value )
		{
			window.localStorage.setItem( key, value );
		},
		del: function( key )
		{
			window.localStorage.removeItem( key );
		},
		flush: function()
		{
			window.localStorage.clear();
		}
	},
	
	// IE6, IE7
	'userData': {
		// see http://msdn.microsoft.com/en-us/library/ms531424.aspx
		ident: "$.store.drivers.userData",
		element: null,
		nodeName: 'userdatadriver',
		scope: 'browser',
		initialized: false,
		available: function()
		{
			try
			{
				return !!( document.documentElement && document.documentElement.addBehavior );
			}
			catch(e)
			{
				return false;
			}
		},
		init: function()
		{
			// $.store can only utilize one userData store at a time, thus avoid duplicate initialization
			if( this.initialized )
				return;
			
			try
			{
				// Create a non-existing element and append it to the root element (html)
				this.element = document.createElement( this.nodeName );
				document.documentElement.insertBefore( this.element, document.getElementsByTagName('title')[0] );
				// Apply userData behavior
				this.element.addBehavior( "#default#userData" );
				this.initialized = true;
			}
			catch( e )
			{
				return false; 
			}
		},
		get: function( key )
		{
			this.element.load( this.nodeName );
			return this.element.getAttribute( key );
		},
		set: function( key, value )
		{
			this.element.setAttribute( key, value );
			this.element.save( this.nodeName );
		},
		del: function( key )
		{
			this.element.removeAttribute( key );
			this.element.save( this.nodeName );
			
		},
		flush: function()
		{
			// flush by expiration
			this.element.expires = (new Date).toUTCString();
			this.element.save( this.nodeName );
		}
	},
	
	// most other browsers
	'windowName': {
		ident: "$.store.drivers.windowName",
		scope: 'window',
		cache: {},
		encodes: true,
		available: function()
		{
			return true;
		},
		init: function()
		{
			this.load();
		},
		save: function()
		{
			window.name = $.store.serializers.json.encode( this.cache );
		},
		load: function()
		{
			try
			{
				this.cache = $.store.serializers.json.decode( window.name + "" );
				if( typeof this.cache != "object" )
					this.cache = {};
			}
			catch(e)
			{
				this.cache = {};
				window.name = "{}";
			}
		},
		get: function( key )
		{
			return this.cache[ key ];
		},
		set: function( key, value )
		{
			this.cache[ key ] = value;
			this.save();
		},
		del: function( key )
		{
			try
			{
				delete this.cache[ key ];
			}
			catch(e)
			{
				this.cache[ key ] = undefined;
			}
			
			this.save();
		},
		flush: function()
		{
			window.name = "{}";
		}
	}
};

/**********************************************************************************
 * $.store serializers
 **********************************************************************************/

$.store.serializers = {
	
	'json': {
		ident: "$.store.serializers.json",
		init: function( encoders, decoders )
		{
			encoders.push( "json" );
			decoders.push( "json" );
		},
		encode: ((typeof(JSON) == 'object')?JSON.stringify:$.JSON.stringify),
		decode: ((typeof(JSON) == 'object')?JSON.parse:$.JSON.parse)
	},
	
	// TODO: html serializer
	// 'html' : {},
	
	'xml': {
		ident: "$.store.serializers.xml",
		init: function( encoders, decoders )
		{
			encoders.unshift( "xml" );
			decoders.push( "xml" );
		},
		
		// wouldn't be necessary if jQuery exposed this function
		isXML: function( value )
		{
			var documentElement = ( value ? value.ownerDocument || value : 0 ).documentElement;
			return documentElement ? documentElement.nodeName.toLowerCase() !== "html" : false;
		},

		// encodes a XML node to string (taken from $.jStorage, MIT License)
		encode: function( value )
		{
			if( !value || value._serialized || !this.isXML( value ) )
				return value;

			var _value = { _serialized: this.ident, value: value };
			
			try
			{
				// Mozilla, Webkit, Opera
				_value.value = new XMLSerializer().serializeToString( value );
				return _value;
			}
			catch(E1)
			{
				try
				{
					// Internet Explorer
					_value.value = value.xml;
					return _value;
				}
				catch(E2){}
			}
			
			return value;
		},
		
		// decodes a XML node from string (taken from $.jStorage, MIT License)
		decode: function( value )
		{
			if( !value || !value._serialized || value._serialized != this.ident )
				return value;

			var dom_parser = ( "DOMParser" in window && (new DOMParser()).parseFromString );
			if( !dom_parser && window.ActiveXObject )
			{
				dom_parser = function( _xmlString )
				{
					var xml_doc = new ActiveXObject( 'Microsoft.XMLDOM' );
					xml_doc.async = 'false';
					xml_doc.loadXML( _xmlString );
					return xml_doc;
				}
			}

			if( !dom_parser )
			{
				return undefined;
			}
			
			value.value = dom_parser.call(
				"DOMParser" in window && (new DOMParser()) || window, 
				value.value, 
				'text/xml'
			);
			
			return this.isXML( value.value ) ? value.value : undefined;
		}
	}
};

})(jQuery);;
(function(c){function e(a,b){this.path=a;"undefined"!==typeof b&&null!==b?(this.at_2x_path=b,this.perform_check=!1):(this.at_2x_path=a.replace(/\.\w+$/,function(a){return"@2x"+a}),this.perform_check=!0)}function f(a){if(!/@2x\.\w+$/.test(c(a).attr("src"))){this.el=a;this.path=new e(c(a).attr("src"),c(a).attr("data-at2x"));var b=this;this.path.check_2x_variant(function(a){a&&b.swap()})}}c.fn.retina=function(a){if(c.Retina.isRetina())return c.Retina.opts=c.extend(c.Retina.opts,a),this.each(function(){c(this).is("img")&&
new f(this)})};c.Retina=function(){};c.Retina.opts={check_mime_type:!0,force_original_dimensions:!0};c.Retina.isRetina=function(){return 1<window.devicePixelRatio||window.matchMedia&&window.matchMedia("(-webkit-min-device-pixel-ratio: 1.5),(min--moz-device-pixel-ratio: 1.5),(-o-min-device-pixel-ratio: 3/2),(min-resolution: 1.5dppx)").matches?!0:!1};e.confirmed_paths=[];e.prototype.is_external=function(){return!(!this.path.match(/^(https?\:|\/\/)/i)||this.path.match("//"+document.domain+"/"))};e.prototype.check_2x_variant=
function(a){var b,d=this;if(this.is_external()||!this.perform_check&&"undefined"!==typeof this.at_2x_path&&null!==this.at_2x_path||this.at_2x_path in e.confirmed_paths)return a(!0);b=new XMLHttpRequest;b.open("HEAD",this.at_2x_path);b.onreadystatechange=function(){if(4==b.readyState&&200<=b.status&&399>=b.status){if(c.Retina.opts.check_mime_type){var g=b.getResponseHeader("Content-Type");if(null===g||!g.match(/^image/i))return a(!1)}e.confirmed_paths.push(d.at_2x_path);return a(!0)}return a(!1)};
b.send()};c.RetinaImage=f;f.prototype.swap=function(a){function b(){if(d.el.complete){c.Retina.opts.force_original_dimensions&&(d.el.setAttribute("width",d.el.offsetWidth),d.el.setAttribute("height",d.el.offsetHeight));var e=d.el.src;d.el.setAttribute("src",a);c(d.el).one("error",function(){d.el.setAttribute("src",e)})}else setTimeout(b,5)}"undefined"==typeof a&&(a=this.path.at_2x_path);var d=this;b()}})(jQuery);
;
(function(a){var b=new Array;var c=new Array;a.fn.doAutosize=function(b){var c=a(this).data("minwidth"),d=a(this).data("maxwidth"),e="",f=a(this),g=a("#"+a(this).data("tester_id"));if(e===(e=f.val())){return;}var h=e.replace(/&/g,"&").replace(/\s/g," ").replace(/</g,"<").replace(/>/g,">");g.html(h);var i=g.width(),j=i+b.comfortZone>=c?i+b.comfortZone:c,k=f.width(),l=j<k&&j>=c||j>c&&j<d;if(l){f.width(j);}};a.fn.resetAutosize=function(b){var c=a(this).data("minwidth")||b.minInputWidth||a(this).width(),d=a(this).data("maxwidth")||b.maxInputWidth||a(this).closest(".tagsinput").width()-b.inputPadding,f=a(this),g=a("<tester/>").css({position:"absolute",top:-9999,left:-9999,width:"auto",fontSize:f.css("fontSize"),fontFamily:f.css("fontFamily"),fontWeight:f.css("fontWeight"),letterSpacing:f.css("letterSpacing"),whiteSpace:"nowrap"}),h=a(this).attr("id")+"_autosize_tester";if(!a("#"+h).length>0){g.attr("id",h);g.appendTo("body");}f.data("minwidth",c);f.data("maxwidth",d);f.data("tester_id",h);f.css("width",c);};a.fn.addTag=function(d,e){e=jQuery.extend({focus:false,callback:true},e);this.each(function(){var f=a(this).attr("id");var g=a(this).val().split(b[f]);if(g[0]==""){g=new Array;}d=jQuery.trim(d);var h;if(e.unique){h=a(g).tagExist(d);if(h==true){a("#"+f+"_tag").addClass("not_valid");}}else{h=false;}if(d!=""&&h!=true){a("<span>").addClass("tag").append(a("<span>").text(d).append("  "),a("<a>",{href:"#",title:"Removing tag",text:"x"}).click(function(){return a("#"+f).removeTag(escape(d));})).insertBefore("#"+f+"_addTag");g.push(d);a("#"+f+"_tag").val("");if(e.focus){a("#"+f+"_tag").focus();}else{a("#"+f+"_tag").blur();}a.fn.tagsInput.updateTagsField(this,g);if(e.callback&&c[f]&&c[f]["onAddTag"]){var i=c[f]["onAddTag"];i.call(this,d);}if(c[f]&&c[f]["onChange"]){var j=g.length;var i=c[f]["onChange"];i.call(this,a(this),g[j-1]);}}});return false;};a.fn.removeTag=function(d){d=unescape(d);this.each(function(){var e=a(this).attr("id");var f=a(this).val().split(b[e]);a("#"+e+"_tagsinput .tag").remove();str="";for(var i=0;i<f.length;i++){if(f[i]!=d){str=str+b[e]+f[i];}}a.fn.tagsInput.importTags(this,str);if(c[e]&&c[e]["onRemoveTag"]){var g=c[e]["onRemoveTag"];g.call(this,d);}});return false;};a.fn.tagExist=function(b){return jQuery.inArray(b,a(this))>=0;};a.fn.importTags=function(b){id=a(this).attr("id");a("#"+id+"_tagsinput .tag").remove();a.fn.tagsInput.importTags(this,b);};a.fn.tagsInput=function(d){var e=jQuery.extend({interactive:true,defaultText:"add a tag",minChars:0,width:"300px",height:"100px",autocomplete:{selectFirst:false},hide:true,delimiter:",",unique:true,removeWithBackspace:true,placeholderColor:"#666666",autosize:true,comfortZone:20,inputPadding:6*2},d);this.each(function(){if(e.hide){a(this).hide();}var d=a(this).attr("id");var f=jQuery.extend({pid:d,real_input:"#"+d,holder:"#"+d+"_tagsinput",input_wrapper:"#"+d+"_addTag",fake_input:"#"+d+"_tag"},e);b[d]=f.delimiter;if(e.onAddTag||e.onRemoveTag||e.onChange){c[d]=new Array;c[d]["onAddTag"]=e.onAddTag;c[d]["onRemoveTag"]=e.onRemoveTag;c[d]["onChange"]=e.onChange;}var g='<div id="'+d+'_tagsinput" class="tagsinput"><div id="'+d+'_addTag">';if(e.interactive){g=g+'<input id="'+d+'_tag" value="" data-default="'+e.defaultText+'" />';}g=g+'</div><div class="tags_clear"></div></div>';a(g).insertAfter(this);a(f.holder).css("width",e.width);a(f.holder).css("height",e.height);if(a(f.real_input).val()!=""){a.fn.tagsInput.importTags(a(f.real_input),a(f.real_input).val());}if(e.interactive){a(f.fake_input).val(a(f.fake_input).attr("data-default"));a(f.fake_input).css("color",e.placeholderColor);a(f.fake_input).resetAutosize(e);a(f.holder).bind("click",f,function(b){a(b.data.fake_input).focus();});a(f.fake_input).bind("focus",f,function(b){if(a(b.data.fake_input).val()==a(b.data.fake_input).attr("data-default")){a(b.data.fake_input).val("");}a(b.data.fake_input).css("color","#000000");});if(e.autocomplete_url!=undefined){autocomplete_options={source:e.autocomplete_url};for(attrname in e.autocomplete){autocomplete_options[attrname]=e.autocomplete[attrname];}if(jQuery.Autocompleter!==undefined){a(f.fake_input).autocomplete(e.autocomplete_url,e.autocomplete);a(f.fake_input).bind("result",f,function(b,c,f){if(c){a("#"+d).addTag(c[0]+"",{focus:true,unique:e.unique});}});}else if(jQuery.ui.autocomplete!==undefined){a(f.fake_input).autocomplete(autocomplete_options);a(f.fake_input).bind("autocompleteselect",f,function(b,c){a(b.data.real_input).addTag(c.item.value,{focus:true,unique:e.unique});return false;});}}else{a(f.fake_input).bind("blur",f,function(b){var c=a(this).attr("data-default");if(a(b.data.fake_input).val()!=""&&a(b.data.fake_input).val()!=c){if(b.data.minChars<=a(b.data.fake_input).val().length&&(!b.data.maxChars||b.data.maxChars>=a(b.data.fake_input).val().length)){a(b.data.real_input).addTag(a(b.data.fake_input).val(),{focus:true,unique:e.unique});}}else{a(b.data.fake_input).val(a(b.data.fake_input).attr("data-default"));a(b.data.fake_input).css("color",e.placeholderColor);}return false;});}a(f.fake_input).bind("keypress",f,function(b){if(b.which==b.data.delimiter.charCodeAt(0)||b.which==13){b.preventDefault();if(b.data.minChars<=a(b.data.fake_input).val().length&&(!b.data.maxChars||b.data.maxChars>=a(b.data.fake_input).val().length)){a(b.data.real_input).addTag(a(b.data.fake_input).val(),{focus:true,unique:e.unique});}a(b.data.fake_input).resetAutosize(e);return false;}else if(b.data.autosize){a(b.data.fake_input).doAutosize(e);}});f.removeWithBackspace&&a(f.fake_input).bind("keydown",function(b){if(b.keyCode==8&&a(this).val()==""){b.preventDefault();var c=a(this).closest(".tagsinput").find(".tag:last").text();var d=a(this).attr("id").replace(/_tag$/,"");c=c.replace(/[\s]+x$/,"");a("#"+d).removeTag(escape(c));a(this).trigger("focus");}});a(f.fake_input).blur();if(f.unique){a(f.fake_input).keydown(function(b){if(b.keyCode==8||String.fromCharCode(b.which).match(/\w+|[áéíóúÁÉÍÓÚñÑ,\/]+/)){a(this).removeClass("not_valid");}});}}return false;});return this;};a.fn.tagsInput.updateTagsField=function(c,d){var e=a(c).attr("id");a(c).val(d.join(b[e]));};a.fn.tagsInput.importTags=function(d,e){a(d).val("");var f=a(d).attr("id");var g=e.split(b[f]);for(var i=0;i<g.length;i++){a(d).addTag(g[i],{focus:false,callback:false});}if(c[f]&&c[f]["onChange"]){var h=c[f]["onChange"];h.call(d,d,g[i]);}};})(jQuery);;
/*
 * jQuery Autocomplete plugin 1.1
 *
 * Copyright (c) 2009 Jörn Zaefferer
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 * Revision: $Id: jquery.autocomplete.js 15 2009-08-22 10:30:27Z joern.zaefferer $
 */;(function($){$.fn.extend({autocomplete:function(urlOrData,options){var isUrl=typeof urlOrData=="string";options=$.extend({},$.Autocompleter.defaults,{url:isUrl?urlOrData:null,data:isUrl?null:urlOrData,delay:isUrl?$.Autocompleter.defaults.delay:10,max:options&&!options.scroll?10:150},options);options.highlight=options.highlight||function(value){return value;};options.formatMatch=options.formatMatch||options.formatItem;return this.each(function(){new $.Autocompleter(this,options);});},result:function(handler){return this.bind("result",handler);},search:function(handler){return this.trigger("search",[handler]);},flushCache:function(){return this.trigger("flushCache");},setOptions:function(options){return this.trigger("setOptions",[options]);},unautocomplete:function(){return this.trigger("unautocomplete");}});$.Autocompleter=function(input,options){var KEY={UP:38,DOWN:40,DEL:46,TAB:9,RETURN:13,ESC:27,COMMA:188,PAGEUP:33,PAGEDOWN:34,BACKSPACE:8};var $input=$(input).attr("autocomplete","off").addClass(options.inputClass);var timeout;var previousValue="";var cache=$.Autocompleter.Cache(options);var hasFocus=0;var lastKeyPressCode;var config={mouseDownOnSelect:false};var select=$.Autocompleter.Select(options,input,selectCurrent,config);var blockSubmit;$.browser.opera&&$(input.form).bind("submit.autocomplete",function(){if(blockSubmit){blockSubmit=false;return false;}});$input.bind(($.browser.opera?"keypress":"keydown")+".autocomplete",function(event){hasFocus=1;lastKeyPressCode=event.keyCode;switch(event.keyCode){case KEY.UP:event.preventDefault();if(select.visible()){select.prev();}else{onChange(0,true);}break;case KEY.DOWN:event.preventDefault();if(select.visible()){select.next();}else{onChange(0,true);}break;case KEY.PAGEUP:event.preventDefault();if(select.visible()){select.pageUp();}else{onChange(0,true);}break;case KEY.PAGEDOWN:event.preventDefault();if(select.visible()){select.pageDown();}else{onChange(0,true);}break;case options.multiple&&$.trim(options.multipleSeparator)==","&&KEY.COMMA:case KEY.TAB:case KEY.RETURN:if(selectCurrent()){event.preventDefault();blockSubmit=true;return false;}break;case KEY.ESC:select.hide();break;default:clearTimeout(timeout);timeout=setTimeout(onChange,options.delay);break;}}).focus(function(){hasFocus++;}).blur(function(){hasFocus=0;if(!config.mouseDownOnSelect){hideResults();}}).click(function(){if(hasFocus++>1&&!select.visible()){onChange(0,true);}}).bind("search",function(){var fn=(arguments.length>1)?arguments[1]:null;function findValueCallback(q,data){var result;if(data&&data.length){for(var i=0;i<data.length;i++){if(data[i].result.toLowerCase()==q.toLowerCase()){result=data[i];break;}}}if(typeof fn=="function")fn(result);else $input.trigger("result",result&&[result.data,result.value]);}$.each(trimWords($input.val()),function(i,value){request(value,findValueCallback,findValueCallback);});}).bind("flushCache",function(){cache.flush();}).bind("setOptions",function(){$.extend(options,arguments[1]);if("data"in arguments[1])cache.populate();}).bind("unautocomplete",function(){select.unbind();$input.unbind();$(input.form).unbind(".autocomplete");});function selectCurrent(){var selected=select.selected();if(!selected)return false;var v=selected.result;previousValue=v;if(options.multiple){var words=trimWords($input.val());if(words.length>1){var seperator=options.multipleSeparator.length;var cursorAt=$(input).selection().start;var wordAt,progress=0;$.each(words,function(i,word){progress+=word.length;if(cursorAt<=progress){wordAt=i;return false;}progress+=seperator;});words[wordAt]=v;v=words.join(options.multipleSeparator);}v+=options.multipleSeparator;}$input.val(v);hideResultsNow();$input.trigger("result",[selected.data,selected.value]);return true;}function onChange(crap,skipPrevCheck){if(lastKeyPressCode==KEY.DEL){select.hide();return;}var currentValue=$input.val();if(!skipPrevCheck&&currentValue==previousValue)return;previousValue=currentValue;currentValue=lastWord(currentValue);if(currentValue.length>=options.minChars){$input.addClass(options.loadingClass);if(!options.matchCase)currentValue=currentValue.toLowerCase();request(currentValue,receiveData,hideResultsNow);}else{stopLoading();select.hide();}};function trimWords(value){if(!value)return[""];if(!options.multiple)return[$.trim(value)];return $.map(value.split(options.multipleSeparator),function(word){return $.trim(value).length?$.trim(word):null;});}function lastWord(value){if(!options.multiple)return value;var words=trimWords(value);if(words.length==1)return words[0];var cursorAt=$(input).selection().start;if(cursorAt==value.length){words=trimWords(value)}else{words=trimWords(value.replace(value.substring(cursorAt),""));}return words[words.length-1];}function autoFill(q,sValue){if(options.autoFill&&(lastWord($input.val()).toLowerCase()==q.toLowerCase())&&lastKeyPressCode!=KEY.BACKSPACE){$input.val($input.val()+sValue.substring(lastWord(previousValue).length));$(input).selection(previousValue.length,previousValue.length+sValue.length);}};function hideResults(){clearTimeout(timeout);timeout=setTimeout(hideResultsNow,200);};function hideResultsNow(){var wasVisible=select.visible();select.hide();clearTimeout(timeout);stopLoading();if(options.mustMatch){$input.search(function(result){if(!result){if(options.multiple){var words=trimWords($input.val()).slice(0,-1);$input.val(words.join(options.multipleSeparator)+(words.length?options.multipleSeparator:""));}else{$input.val("");$input.trigger("result",null);}}});}};function receiveData(q,data){if(data&&data.length&&hasFocus){stopLoading();select.display(data,q);autoFill(q,data[0].value);select.show();}else{hideResultsNow();}};function request(term,success,failure){if(!options.matchCase)term=term.toLowerCase();var data=cache.load(term);if(data&&data.length){success(term,data);}else if((typeof options.url=="string")&&(options.url.length>0)){var extraParams={timestamp:+new Date()};$.each(options.extraParams,function(key,param){extraParams[key]=typeof param=="function"?param():param;});$.ajax({mode:"abort",port:"autocomplete"+input.name,dataType:options.dataType,url:options.url,data:$.extend({q:lastWord(term),limit:options.max},extraParams),success:function(data){var parsed=options.parse&&options.parse(data)||parse(data);cache.add(term,parsed);success(term,parsed);}});}else{select.emptyList();failure(term);}};function parse(data){var parsed=[];var rows=data.split("\n");for(var i=0;i<rows.length;i++){var row=$.trim(rows[i]);if(row){row=row.split("|");parsed[parsed.length]={data:row,value:row[0],result:options.formatResult&&options.formatResult(row,row[0])||row[0]};}}return parsed;};function stopLoading(){$input.removeClass(options.loadingClass);};};$.Autocompleter.defaults={inputClass:"ac_input",resultsClass:"ac_results",loadingClass:"ac_loading",minChars:1,delay:400,matchCase:false,matchSubset:true,matchContains:false,cacheLength:10,max:100,mustMatch:false,extraParams:{},selectFirst:true,formatItem:function(row){return row[0];},formatMatch:null,autoFill:false,width:0,multiple:false,multipleSeparator:", ",highlight:function(value,term){return value.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)("+term.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi,"\\$1")+")(?![^<>]*>)(?![^&;]+;)","gi"),"<strong>$1</strong>");},scroll:true,scrollHeight:180};$.Autocompleter.Cache=function(options){var data={};var length=0;function matchSubset(s,sub){if(!options.matchCase)s=s.toLowerCase();var i=s.indexOf(sub);if(options.matchContains=="word"){i=s.toLowerCase().search("\\b"+sub.toLowerCase());}if(i==-1)return false;return i==0||options.matchContains;};function add(q,value){if(length>options.cacheLength){flush();}if(!data[q]){length++;}data[q]=value;}function populate(){if(!options.data)return false;var stMatchSets={},nullData=0;if(!options.url)options.cacheLength=1;stMatchSets[""]=[];for(var i=0,ol=options.data.length;i<ol;i++){var rawValue=options.data[i];rawValue=(typeof rawValue=="string")?[rawValue]:rawValue;var value=options.formatMatch(rawValue,i+1,options.data.length);if(value===false)continue;var firstChar=value.charAt(0).toLowerCase();if(!stMatchSets[firstChar])stMatchSets[firstChar]=[];var row={value:value,data:rawValue,result:options.formatResult&&options.formatResult(rawValue)||value};stMatchSets[firstChar].push(row);if(nullData++<options.max){stMatchSets[""].push(row);}};$.each(stMatchSets,function(i,value){options.cacheLength++;add(i,value);});}setTimeout(populate,25);function flush(){data={};length=0;}return{flush:flush,add:add,populate:populate,load:function(q){if(!options.cacheLength||!length)return null;if(!options.url&&options.matchContains){var csub=[];for(var k in data){if(k.length>0){var c=data[k];$.each(c,function(i,x){if(matchSubset(x.value,q)){csub.push(x);}});}}return csub;}else
if(data[q]){return data[q];}else
if(options.matchSubset){for(var i=q.length-1;i>=options.minChars;i--){var c=data[q.substr(0,i)];if(c){var csub=[];$.each(c,function(i,x){if(matchSubset(x.value,q)){csub[csub.length]=x;}});return csub;}}}return null;}};};$.Autocompleter.Select=function(options,input,select,config){var CLASSES={ACTIVE:"ac_over"};var listItems,active=-1,data,term="",needsInit=true,element,list;function init(){if(!needsInit)return;element=$("<div/>").hide().addClass(options.resultsClass).css("position","absolute").appendTo(document.body);list=$("<ul/>").appendTo(element).mouseover(function(event){if(target(event).nodeName&&target(event).nodeName.toUpperCase()=='LI'){active=$("li",list).removeClass(CLASSES.ACTIVE).index(target(event));$(target(event)).addClass(CLASSES.ACTIVE);}}).click(function(event){$(target(event)).addClass(CLASSES.ACTIVE);select();input.focus();return false;}).mousedown(function(){config.mouseDownOnSelect=true;}).mouseup(function(){config.mouseDownOnSelect=false;});if(options.width>0)element.css("width",options.width);needsInit=false;}function target(event){var element=event.target;while(element&&element.tagName!="LI")element=element.parentNode;if(!element)return[];return element;}function moveSelect(step){listItems.slice(active,active+1).removeClass(CLASSES.ACTIVE);movePosition(step);var activeItem=listItems.slice(active,active+1).addClass(CLASSES.ACTIVE);if(options.scroll){var offset=0;listItems.slice(0,active).each(function(){offset+=this.offsetHeight;});if((offset+activeItem[0].offsetHeight-list.scrollTop())>list[0].clientHeight){list.scrollTop(offset+activeItem[0].offsetHeight-list.innerHeight());}else if(offset<list.scrollTop()){list.scrollTop(offset);}}};function movePosition(step){active+=step;if(active<0){active=listItems.size()-1;}else if(active>=listItems.size()){active=0;}}function limitNumberOfItems(available){return options.max&&options.max<available?options.max:available;}function fillList(){list.empty();var max=limitNumberOfItems(data.length);for(var i=0;i<max;i++){if(!data[i])continue;var formatted=options.formatItem(data[i].data,i+1,max,data[i].value,term);if(formatted===false)continue;var li=$("<li/>").html(options.highlight(formatted,term)).addClass(i%2==0?"ac_even":"ac_odd").appendTo(list)[0];$.data(li,"ac_data",data[i]);}listItems=list.find("li");if(options.selectFirst){listItems.slice(0,1).addClass(CLASSES.ACTIVE);active=0;}if($.fn.bgiframe)list.bgiframe();}return{display:function(d,q){init();data=d;term=q;fillList();},next:function(){moveSelect(1);},prev:function(){moveSelect(-1);},pageUp:function(){if(active!=0&&active-8<0){moveSelect(-active);}else{moveSelect(-8);}},pageDown:function(){if(active!=listItems.size()-1&&active+8>listItems.size()){moveSelect(listItems.size()-1-active);}else{moveSelect(8);}},hide:function(){element&&element.hide();listItems&&listItems.removeClass(CLASSES.ACTIVE);active=-1;},visible:function(){return element&&element.is(":visible");},current:function(){return this.visible()&&(listItems.filter("."+CLASSES.ACTIVE)[0]||options.selectFirst&&listItems[0]);},show:function(){var offset=$(input).offset();element.css({width:typeof options.width=="string"||options.width>0?options.width:$(input).width(),top:offset.top+input.offsetHeight,left:offset.left}).show();if(options.scroll){list.scrollTop(0);list.css({maxHeight:options.scrollHeight,overflow:'auto'});if($.browser.msie&&typeof document.body.style.maxHeight==="undefined"){var listHeight=0;listItems.each(function(){listHeight+=this.offsetHeight;});var scrollbarsVisible=listHeight>options.scrollHeight;list.css('height',scrollbarsVisible?options.scrollHeight:listHeight);if(!scrollbarsVisible){listItems.width(list.width()-parseInt(listItems.css("padding-left"))-parseInt(listItems.css("padding-right")));}}}},selected:function(){var selected=listItems&&listItems.filter("."+CLASSES.ACTIVE).removeClass(CLASSES.ACTIVE);return selected&&selected.length&&$.data(selected[0],"ac_data");},emptyList:function(){list&&list.empty();},unbind:function(){element&&element.remove();}};};$.fn.selection=function(start,end){if(start!==undefined){return this.each(function(){if(this.createTextRange){var selRange=this.createTextRange();if(end===undefined||start==end){selRange.move("character",start);selRange.select();}else{selRange.collapse(true);selRange.moveStart("character",start);selRange.moveEnd("character",end);selRange.select();}}else if(this.setSelectionRange){this.setSelectionRange(start,end);}else if(this.selectionStart){this.selectionStart=start;this.selectionEnd=end;}});}var field=this[0];if(field.createTextRange){var range=document.selection.createRange(),orig=field.value,teststring="<->",textLength=range.text.length;range.text=teststring;var caretAt=field.value.indexOf(teststring);field.value=orig;this.selection(caretAt,caretAt+textLength);return{start:caretAt,end:caretAt+textLength}}else if(field.selectionStart!==undefined){return{start:field.selectionStart,end:field.selectionEnd}}};})(jQuery);;
(function($){
    $.photos_sidebar = {
        width: 200,
        options: {},
        init: function(options) {
            var that = this;
            this.options = options || {};
            if (options.width) {
                this.width = options.width;
            }
            this.initCollapsible();
            this.initHandlers();
            this.initView();
            setTimeout( function() {
                that.initFixedSidebar();
            }, 1000);
        },

        initFixedSidebar: function() {
            // Class names
            var top_fix_class = "fixed-to-top",
                bottom_fix_class = "fixed-to-bottom";

            // DOM
            var $window = $(window),
                $wrapper = $("#wa-app"),
                $sidebarWrapper = $wrapper.find(".p-sidebar-wrapper"),
                $sidebar = $sidebarWrapper.find(".p-sidebar-block");

            // VARS
            var display_height = $window.height(),
                sidebar_top = $sidebar.offset().top;

            // DINAMIC VARS
            var is_top_set = false,
                is_fixed_to_bottom = false,
                is_fixed_to_top = false,
                scroll_value = 0;

            // EVENT
            $window.on("scroll", scrollingSidebar);

            // HANDLER
            function scrollingSidebar() {
                var scroll_top = $window.scrollTop(),
                    sidebar_height = $sidebar.outerHeight(),
                    wrapper_height = $wrapper.height(),
                    dynamic_sidebar_top = $sidebar.offset().top,
                    direction = ( scroll_value > scroll_top ) ? 1 : -1,
                    delta = scroll_top - sidebar_top,
                    sidebar_width = $sidebar.width();

                var is_sidebar_large = ( sidebar_height + parseInt($sidebarWrapper.css("padding-top")) + parseInt($sidebarWrapper.css("padding-bottom")) >= wrapper_height ),
                    active_scroll = ( wrapper_height > display_height && !is_sidebar_large );

                if (active_scroll) {

                    // If the height of the slider is smaller than the display, it's simple
                    if (sidebar_height < display_height) {
                        if (delta > 0) {
                            if (is_top_set || !is_fixed_to_bottom || is_fixed_to_top) {
                                $sidebar
                                    .removeAttr("style")
                                    .width(sidebar_width)
                                    .addClass(top_fix_class);
                            }
                            is_fixed_to_top = true;
                        } else {
                            $sidebar
                                .removeAttr("style")
                                .removeClass(bottom_fix_class)
                                .removeClass(top_fix_class);
                        }

                        // If the height is larger than the screen
                    } else {
                        // If less than the original position to turn off
                        if (scroll_top <= sidebar_top) {
                            if (is_top_set || is_fixed_to_bottom || is_fixed_to_top) {
                                $sidebar
                                    .removeAttr("style")
                                    .removeClass(bottom_fix_class)
                                    .removeClass(top_fix_class);

                                is_top_set = is_fixed_to_bottom = is_fixed_to_top = false;
                            }

                            // If the above start after scrolling fix up
                        } else if (scroll_top <= dynamic_sidebar_top && dynamic_sidebar_top >= sidebar_top) {

                            if (direction > 0) {
                                if (is_top_set || !is_fixed_to_top || is_fixed_to_bottom) {
                                    $sidebar
                                        .removeAttr("style")
                                        .width(sidebar_width)
                                        .removeClass(bottom_fix_class)
                                        .addClass(top_fix_class);

                                    is_top_set = is_fixed_to_bottom = false;
                                    is_fixed_to_top = true;
                                }
                            } else {
                                if (!is_top_set || is_fixed_to_top || is_fixed_to_bottom) {
                                    $sidebar
                                        .css("top", dynamic_sidebar_top - sidebar_top)
                                        .removeClass(top_fix_class)
                                        .removeClass(bottom_fix_class);

                                    is_top_set = true;
                                    is_fixed_to_top = is_fixed_to_bottom = false;
                                }
                            }

                            // If the lower end
                        } else if (scroll_top + display_height >= dynamic_sidebar_top + sidebar_height) {
                            // If the direction of scrolling up
                            if (direction > 0) {
                                if (!is_top_set || is_fixed_to_top || is_fixed_to_bottom) {
                                    $sidebar
                                        .css("top", dynamic_sidebar_top - sidebar_top)
                                        .removeClass(top_fix_class)
                                        .removeClass(bottom_fix_class);

                                    is_top_set = true;
                                    is_fixed_to_top = is_fixed_to_bottom = false;
                                }

                                // If the direction of scrolling down
                            } else {
                                if (is_top_set || is_fixed_to_top || !is_fixed_to_bottom) {
                                    $sidebar
                                        .removeAttr("style")
                                        .width(sidebar_width)
                                        .removeClass(top_fix_class)
                                        .addClass(bottom_fix_class);

                                    is_top_set = is_fixed_to_top = false;
                                    is_fixed_to_bottom = true;
                                }
                            }
                            // In all other cases
                        } else {
                            if (!is_top_set || is_fixed_to_top || is_fixed_to_bottom) {
                                $sidebar
                                    .css("top", dynamic_sidebar_top - sidebar_top)
                                    .removeClass(top_fix_class)
                                    .removeClass(bottom_fix_class);

                                is_top_set = true;
                                is_fixed_to_top = is_fixed_to_bottom = false;
                            }
                        }
                    }
                } else {
                    if (is_top_set || is_fixed_to_top || is_fixed_to_bottom) {
                        $sidebar
                            .removeAttr("style")
                            .removeClass(bottom_fix_class)
                            .removeClass(top_fix_class);

                        is_top_set = is_fixed_to_top = is_fixed_to_bottom = false;
                    }
                }

                // Save New Data
                scroll_value = scroll_top;
            }
        },

        initView: function() {
            var sidebar = $('#p-sidebar');
            var arrows_panel = $('#p-sidebar-width-control');
            arrows_panel.find('a.arrow').unbind('click').
                    bind('click', function() {
                        var max_width = 400;
                        var min_width = 200;
                        var cls = sidebar.attr('class');
                        var width = 0;

                        var m = cls.match(/left([\d]{2,3})px/);
                        if (m && m[1] && (width = parseInt(m[1]))) {
                            var new_width = width + ($(this).is('.right') ? 50 : -50);
                            new_width = Math.max(Math.min(new_width, max_width), min_width);

                            if (new_width != width) {

                                arrows_panel.css({'width': new_width.toString() + 'px'});

                                var replace = ['left' + width + 'px', 'left' + new_width + 'px'];
                                sidebar.attr('class', cls.replace(replace[0], replace[1]));
                                sidebar.css('width', '');

                                var content = $('#p-content');
                                if (content.length) {
                                    cls = content.attr('class');
                                    content.attr('class', cls.replace(replace[0], replace[1]));
                                    content.css('margin-left', '');
                                }
                                $.photos_sidebar.width = new_width;
                                $.post('?action=sidebarSaveWidth', {
                                    width: new_width
                                }, 'json');
                            }
                        }

                        return false;
                    });
        },

        initCollapsible: function() {
            $('#p-sidebar').off('click', '.collapse-handler').on('click', '.collapse-handler', function () {
                $.photos_sidebar._collapseSidebarSection(this, 'toggle');
            });
            $("#p-sidebar .collapse-handler").each(function() {
                $.photos_sidebar._collapseSidebarSection(this, 'restore');
            });
            $('#album-list-container').die('uncollapse_section').live('uncollapse_section', function(e, album_item) {
                album_item = $(album_item);
                var container = $(this),
                    container_handler = container.find('>.collapse-handler'),
                    section_handler = album_item.find('>i.collapse-handler');

                $.photos_sidebar._collapseSidebarSection(section_handler, 'uncollapse');

                var item = album_item.parent().parent();
                while (item.length && item.get(0) != this) {
                    var item_handler = item.find('>i.collapse-handler');
                    if (!item_handler.length) {
                        break;
                    }
                    $.photos_sidebar._collapseSidebarSection(item_handler, 'uncollapse');
                    item = item.parent().parent();
                }
                $.photos_sidebar._collapseSidebarSection(container_handler, 'uncollapse');
            });
        },

        initHandlers: function() {
            $("#p-upload-link").click(function () {
                $.photos.uploadDialog();
                return false;
            });

            $('#album-list-container').off('click', '.p-new-album').
                on('click', '.p-new-album',
                    function () {
                        var self = $(this);
                        var parent_id = 0;
                        if (!self.is('#p-new-album')) {
                            parent_id = parseInt(self.parents('li:first').attr('rel'), 10) || 0;
                        }
                        var showDialog = function () {
                            $('#album-create-dialog').waDialog({
                                onLoad: function (d) {
                                    $(this).find('input[type=text]').val('');
                                },
                                onSubmit: function (d) {
                                    var f = $(this);
                                    $.post(f.attr('action'), f.serialize(), function (r) {
                                        if (r.status == 'ok') {
                                            $.photos.onCreateAlbum(r.data, parent_id);
                                            d.trigger('close');
                                            if (r.data.id) {
                                                $.photos.goToHash('/album/' + r.data.id);
                                            }
                                        }
                                    }, "json");
                                    return false;
                                }
                            });
                        };
                        var d = $('#album-create-dialog-acceptor');
                        if (!d.length) {
                            d = $("<div id='album-create-dialog-acceptor'></div>");
                            $("body").append(d);
                        }
                        d.load("?module=dialog&action=createAlbum&parent_id="+parent_id, showDialog);
                        return false;
                });
        },

        countSubtree: function(item) {
            var counter = item.find('>.count:not(.subtree)'),
                subtree_counter = item.find('>.subtree');
            if (!subtree_counter.length) {
                subtree_counter = counter.clone().addClass('subtree').hide();
                counter.after(subtree_counter);
            }
            var total_count = parseInt(counter.text(), 10) || 0;
            item.find('li.static>.count:not(.subtree)').each(function() {
                var count = parseInt($(this).text(), 10) || 0;
                total_count += count;
            });
            if (!subtree_counter.hasClass('never-recount')) {
                subtree_counter.text(total_count);
            }
            subtree_counter.show();
            counter.hide();
            return total_count;
        },

        countItem: function(item) {
            var counter = item.find('>.count:not(.subtree)').show(),
                subtree_counter = item.find('>.subtree').hide();
            return parseInt(counter.text(), 10) || 0;
        },

        _collapseSidebarSection: function(el, action) {
            if (!action) {
                action = 'coollapse';
            }
            el = $(el);
            if (!el.length) {
                return;
            }

            var arr;
            if (el.hasClass('darr') || el.hasClass('rarr')) {
                arr = el;
            } else {
                arr = el.find('.darr, .rarr');
            }
            if (!arr.length) {
                return;
            }

            var item = el.parent();
            var list = item.find('.hierarchical:first');
            if (!list.length) {
                list = item.find('.collapsible-content:first');
            }
            if (!list.length) {
                list = item.find('ul:first');
            }

            var newStatus,
                id = el.attr('id') || el.parent().attr('id'),
                oldStatus = arr.hasClass('darr') ? 'shown' : 'hidden',

                hide = function() {
                    list.hide();
                    arr.removeClass('darr').addClass('rarr');
                    $.photos_sidebar.countSubtree(item);
                    newStatus = 'hidden';
                },

                show = function() {
                    list.show();
                    arr.removeClass('rarr').addClass('darr');
                    $.photos_sidebar.countItem(item);
                    newStatus = 'shown';
                };

            switch(action) {
                case 'toggle':
                    if (oldStatus == 'shown') {
                        hide();
                    } else {
                        show();
                    }
                    break;
                case 'restore':
                    if (id) {
                        var status = $.storage.get('photos/collapsible/'+id);
                        if (status == 'hidden') {
                            hide();
                        } else {
                            show();
                        }
                    }
                    break;
                case 'uncollapse':
                    show();
                    break;
                case 'collapse':
                default:
                    hide();
                    break;
            }

            // save status in persistent storage
            if (id && newStatus) {
                $.storage.set('photos/collapsible/'+id, newStatus);
            }
        }
    }
})(jQuery);;
(function($) {

    $.photos_dragndrop = {
        helper_shift: 20,

        init: function() {
            this._extendJqueryUIDragAndDrop();

            this._initDragPhotos();
            this._initDropPhotos();
            this._initDragAlbums();
            this._initDropAlbums();

        },

        _initDragPhotos: function() {
            var draggable_common_opts = {
                opacity: 0.75,
                zIndex: 9999,
                distance: 5,
                appendTo: 'body',
                cursor: 'move',
                refreshPositions: true,
                start: function(event, ui) {
                    // prevent default-browser drag-and-drop action
                    document.ondragstart = function() {
                        return false;
                    };
                    // scroll fix. See helperScroll
                    ui.helper.data('scrollTop', $(document).scrollTop());
                    $(document).bind('scroll', $.photos_dragndrop._scrolHelper);
                    // mark target of dragging
                    $('#album-list-container').addClass('p-drag-active');
                },
                stop: function(event, ui) {
                    document.ondragstart = null;
                    $(document).unbind('scroll', $.photos_dragndrop._scrolHelper);
                    $('#album-list-container').removeClass('p-drag-active');
                    hideSortHint();
                },
                drag: function(event, ui) {
                    var e = event.originalEvent;
                    ui.position.left = e.pageX - $.photos_dragndrop.helper_shift;
                    ui.position.top = e.pageY;
                }
            };

            var onStart = draggable_common_opts.start,
                onStop  = draggable_common_opts.stop;

            // drag photo to albums or sort
            $("img", $('#photo-list')).liveDraggable($.extend({}, draggable_common_opts, {
                containment: [
                    0,
                    0,
                    $(window).width(),
                    {
                        toString: function() {
                            return $(document).height();  // we have lengthened document, so make flexible calculating (use typecast method toString)
                        }
                    }
                ],
                helper: function(event) {
                    var self = $(this).parents('li:first'),
                        selected = $('#photo-list li.selected'),
                        count = selected.length ? selected.length : 1,
                        photo_ids = [self.attr('data-photo-id')],
                        included = false;

                    var li = self.get(0);
                    selected.each(function() {
                        if (this != li) {
                            photo_ids.push($(this).attr('data-photo-id'));
                        } else {
                            included = true;
                        }
                    });

                    // if we have selected list, but drag start with unselected item than inclue this item (and select)
                    if (!included && selected.length) {
                        self.addClass('selected').find('input:first').trigger('select', true);
                        ++count;
                    }
                    self.data('photo_ids', photo_ids);
                    return '<div id="helper"><span class="indicator red">' + count + '</span><i class="icon10 no-bw" style="display:none;"></i></div>';
                },
                handle: '.p-image',
                start: function(event, ui) {
                    onStart.apply(this, [event, ui]);
                    var self = $(this).parents('li:first');
                    if (self.data('photo_ids').length == 1) {
                        self.addClass('selected');
                    }
                },
                stop: function(event, ui) {
                    onStop.apply(this, [event, ui]);
                    var self = $(this).parents('li:first');
                    if (self.data('photo_ids').length == 1) {
                        self.removeClass('selected');
                    }
                }
            }));

            // drag one photo (big img in photo-card)
            $('#photo').liveDraggable($.extend({}, draggable_common_opts, {
                containment: 'body',
                start: function(event, ui) {
                    if (!$(event.target).hasClass('ui-draggable')) {
                        return false;
                    }
                },
                helper: function() {
                    return '<div id="helper"><span class="indicator red">1</span><i class="icon10 no-bw" style="display:none;"></i></div>';
                }
            }));
        },

        _initDropPhotos: function() {
            // dropping process in photo-list itself. Dropping process is trying sorting
            $("li", $('#photo-list')).liveDroppable({
                disabled: false,
                greedy: true,
                tolerance: 'pointer',
                over: function(event, ui) {
                    // sorting in not static album is illegal

                    if (ui.draggable.hasClass('dr')) {
                        return false;
                    }

                    var sort_enable = isSortEnable();
                    if (!sort_enable) {
                        showSortHint();
                    } else {
                        hideSortHint();
                    }
                    $.photos_dragndrop._activatePhotoListItem.call(this);
                },
                out: function(event, ui) {
                    $.photos_dragndrop._unactivatePhotoListItem.call(this);
                },
                drop: function(event, ui) {
                    var sort_enable = isSortEnable();

                    // sorting in not static album is illegal
                    var album = $.photos.getAlbum();

                    // drop into itself is illegal
                    var draggable = ui.draggable.parents('li:first'),
                        self = $(this);


                    if (draggable.get(0) == this || self.hasClass('selected')) {
                        $.photos_dragndrop._unactivatePhotoListItem.call(this);
                        return false;
                    }

                    // define selected item
                    var selected = $('#photo-list li.selected');
                    if (!selected.length) {
                        selected = draggable;
                    }

                    $.photos_dragndrop._unactivatePhotoListItem.call(this);
                    $.photos_dragndrop._unactivatePhotoListItem.call(draggable);

                    if (!sort_enable) {
                        return false;
                    }

                    // visually sorting and some clear actions
                    var before_id = parseInt(self.attr('data-photo-id'));
                    if (self.hasClass('last')) {
                        before_id = null;
                        self.after(selected);
                        self.removeClass('last');
                        $('#photo-list li:last').addClass('last');
                    } else {
                        self.before(selected);
                        if (draggable.hasClass('last')) {
                            draggable.removeClass('last')
                            $('#photo-list li:last').addClass('last');
                        }
                    }
                    // clear visuall hightlights
                    selected.trigger('select', false);

                    // sorting on server
                    var photo_id = [];
                    selected.each(function() {
                        photo_id.push(parseInt($(this).attr('data-photo-id')));
                    });
                    $.post('?module=album&action=photoMove', {
                        photo_id: photo_id,
                        album_id: album.id,
                        before_id: before_id
                    }, function(r) {
                        if (r.status == 'ok') {
                            $.photos.photo_stream_cache.move(photo_id, before_id);
                        }
                    }, 'json');
                }
            });
        },

        _initDragAlbums: function() {
            var containment = $('#wa-app > .sidebar'),
                containment_pos = containment.position(),
                containment_metrics = { width: containment.width(), height: containment.height() };

            $("li.dr", $('#album-list')).liveDraggable({
                containment: [
                      containment_pos.left,
                      containment_pos.top,
                      containment_pos.left + containment_metrics.width + containment_metrics.width*0.25,
                      containment_pos.top + containment_metrics.height
                ],
                refreshPositions: true,
                revert: "invalid",
                helper: function() {
                    var self = $(this),
                        clone = self.clone().addClass('ui-draggable').css({
                            position: 'absolute'
                        }).prependTo('#album-list > ul');
                    clone.find('a:first').append('<i class="icon10 no-bw" style="margin-left: 0; margin-right: 0; display:none;"></i>');
                    return clone;
                },
                cursor: "move",
                cursorAt: { left: 5 },
                opacity: 0.75,
                zIndex: 9999,
                distance: 5,
                start: function(event, ui) {
                    document.ondragstart = function() {
                        return false;
                    };
                },
                stop: function() {
                    document.ondragstart = null;
                }
            });
        },

        _initDropAlbums: function() {
            this._initDropBetweenAlbums();
            this._initDropInsideAlbums();
        },

        _initDropBetweenAlbums: function() {
            // drop between albums
            $("li.drag-newposition", $('#album-list')).liveDroppable({
                accept: 'li.dr',
                greedy: true,
                tolerance: 'pointer',
                over: function(event, ui) {
                    // legal only for album (li)
                    if (ui.draggable.get(0).tagName == 'IMG') {
                        return false;
                    }
                    $(this).addClass('active').parent().parent().addClass('drag-active');
                },
                out: function(event, ui) {
                    $(this).removeClass('active').parent().parent().removeClass('drag-active');
                },
                deactivate: function(event, ui) {
                    var self = $(this);
                    if (self.is(':animated') || self.hasClass('dragging')) {
                        self.stop().animate({height: '0px'}, 300, null, function(){self.removeClass('dragging');});
                    }
                    $(this).removeClass('active').parent().parent().removeClass('drag-active');
                },
                drop: function (event, ui) {
                    // legal only for album (li)
                    if (ui.draggable.get(0).tagName == 'IMG') {
                        return false;
                    }
                    var list = $(this).parent('ul');
                    var dr = $(ui.draggable);
                    var id = dr.attr('rel');
                    var prev = $(this).prev('li');

                    if (prev.length && prev.attr('rel') == id && !prev.hasClass('ui-draggable')) {
                        return false;
                    }
                    if (this == dr.next().get(0)) {
                        return false;
                    }
                    var parent_id = list.parent('li').length ? list.parent('li').attr('rel') : 0;
                    var before = $(this).next(),
                        before_id = null;
                    if (before.length) {
                        before_id = before.attr('rel');
                    }
                    $.post('?module=album&action=move', {
                        id: id,
                        before_id: before_id,
                        parent_id: parent_id
                    }, function(r) {
                        var current_album = $.photos.getAlbum(),
                            album = r.data.album,
                            counters = r.data.counters;

                        if (album.status <= 0 &&
                            $.photos_dragndrop.privateDescendants(album.id))
                        {
                            $.photos.dispatch('album/'+album.id+'/');
                        }

                        if (current_album && current_album.id == album.id) {
                            var frontend_link = r.data.frontend_link;
                            if (frontend_link) {
                                $('#photo-list-frontend-link').attr('href', frontend_link).text(frontend_link);
                            }
                            if (album.type == Album.TYPE_DYNAMIC) {
                                $.photos.load("?module=album&action=photos&id=" + album.id, $.photos.onLoadPhotoList);
                            }
                        }
                        if (!$.isEmptyObject(counters)) {
                            for (var album_id in counters) {
                                if (counters.hasOwnProperty(album_id)) {
                                    album_list.find('li[rel='+album_id+']').find('.count:first').text(counters[album_id]);
                                }
                            }
                        }
                    }, 'json');

                    var $parent_list = dr.parent('ul');
                    var li_count = $parent_list.children('li.dr[rel!='+id+']').length;

                    dr.next().insertAfter($(this));
                    dr.insertAfter($(this));

                    if (!li_count) {
                        $parent_list.parent('li').children('i').remove();
                        $parent_list.remove();
                    }
                }
            });
        },

        privateDescendants: function(album_id, include_parent) {
            include_parent = typeof include_parent === 'boolean' ? include_parent : true;
            var album_list = $('#album-list');
            var li = album_list.find('li[rel='+album_id+']');
            var list;
            if (include_parent) {
                list = li;
            } else {
                list = $();
            }
            changed = false;
            list.add(li.find('li.dr')).each(function() {
                var self = $(this).find('>a');
                if (!self.find('i.lock-bw').length) {
                    var next = self.find('.pictures').next();
                    var html = '<i class="icon10 lock-bw no-overhanging"></i>';
                    if (next.length) {
                        changed = true;
                        next.before(html);
                    } else {
                        self.append(html);
                    }
                }
            });
            return changed;
        },

        _initDropInsideAlbums: function() {
            // drop inside album
            $("li.dr a", $('#album-list')).liveDroppable({
                accept: function(el) {
                    // Albums in sidebar, image from single photo page
                    if (el.is('li.dr, img#photo')) {
                        return true;
                    }
                    // Images from photo lists
                    if (el.closest('li[data-photo-id]').length) {
                        return true;
                    }
                    return false;
                },
                tolerance: 'custom',
                greedy: true,
                out: function(event, ui) {
                    $(this).parent().removeClass('drag-newparent');
                    ui.helper.find('span').show().end().find('i').hide();       // show 'circle'-icon
                },
                over: function(event, ui) {
                    var self = $(this).parent(),  // li
                        is_photo = false;
                    ui.draggable = $.photos_dragndrop._fixUiDraggable(ui.draggable);

                    // photo
                    if (ui.draggable.parents('#photo-list').length || ui.draggable.is('#photo')) {
                        if (!self.hasClass('static')) {
                            ui.helper.find('span').hide().end().find('i').show();   // show 'cross'-icon
                        } else {
                            ui.helper.find('span').show().end().find('i').hide();       // show 'circle'-icon
                        }
                        is_photo = true;
                    }
                    self.addClass('drag-newparent');

                    if (is_photo) {
                        return false;
                    }

                    // album
                    if (ui.draggable.hasClass('static') && !self.hasClass('static'))
                    {
                        ui.helper.find('i.no-bw').show();
                        return false;
                    } else {
                        ui.helper.find('i.no-bw').hide();
                    }

                    var dr = $(ui.draggable);
                    var drSelector = '.dr[rel!="'+dr.attr('rel')+'"]';
                    var nearby = $();

                    // helper to widen all spaces below the current li and above next li (which may be on another tree level, but not inside current)
                    var addBelow = function(nearby, current) {
                        if (current.length <= 0) {
                            return nearby;
                        }
                        nearby = nearby.add(current.nextUntil(drSelector).filter('li.drag-newposition'));
                        if (current.nextAll(drSelector).length > 0) {
                            return nearby;
                        }
                        return arguments.callee(nearby, current.parent().closest('li'));
                    };

                    // widen all spaces above the current li and below the prev li (which may be on another tree level)
                    var above = self.prevAll(drSelector).first();
                    if(above.length > 0) {
                        var d = above.find(drSelector);
                        if (d.length > 0) {
                            nearby = addBelow(nearby, d.last());
                        } else {
                            nearby = addBelow(nearby, above);
                        }
                    } else {
                        nearby = nearby.add(self.prevUntil(drSelector).filter('li.drag-newposition'));
                    }

                    // widen all spaces below the current li and above the next li (which may be on another tree level)
                    if (self.children('ul').children(drSelector).length > 0) {
                        nearby = nearby.add(self.children('ul').children('li.drag-newposition:first'));
                    } else {
                        nearby = addBelow(nearby, self);
                    }

                    var old = $('.drag-newposition:animated, .drag-newposition.dragging').not(nearby);

                    old.stop().animate({height: '0px'}, 300, null, function(){old.removeClass('dragging');});
                    nearby.stop().animate({height: '10px'}, 300, null, function(){nearby.addClass('dragging');});
                },
                drop: function( event, ui ) {
                    var self = $(this).parent().removeClass('drag-newparent'),   // li
                        list;

                    ui.draggable = $.photos_dragndrop._fixUiDraggable(ui.draggable);

                    // copy photo to album (only static is legal)
                    if (ui.draggable.parents('#photo-list').length || ui.draggable.is('#photo')) {
                        var m = this.href.match(/.*#\/album\/([\d]+)/);
                        if (m === null || !parseInt(m[1], 10)) {
                            if (console) {
                                console.log("Link: " + this.href + " is not correct");
                            }
                            return;
                        }
                        var album_id = parseInt(m[1], 10),
                            photo_ids = null;
                        if (self.hasClass('static')) {
                            if (ui.draggable.is('#photo')) {
                                photo_ids = [$.photos.photo_stream_cache.getCurrent().id];
                            } else {
                                photo_ids = ui.draggable.data('photo_ids');
                            }
                        }
                        if (photo_ids) {
                            $.photos.addToAlbums({
                                photo_id: photo_ids,
                                album_id: album_id
                            });
                            $('#photo-list li.selected').trigger('select', false);
                        }
                        return false;
                    }

                    // album
                    if (ui.draggable.hasClass('static') && !self.hasClass('static'))
                    {
                        return false;
                    }

                    var dr = $(ui.draggable);
                    if (self.attr('rel') == dr.attr('rel')) {
                        return false;
                    }

                    if (self.hasClass('drag-newposition')) {
                        list = self.parent('ul');
                    } else {
                        if (self.children('ul').length) {
                            list =  self.children('ul');
                        } else {
                            list = $('<ul class="menu-v with-icons dr"><li class="drag-newposition"></li></ul>').appendTo(self);
                            list.find('.drag-newposition').mouseover(); // init droppable
                            $('<i class="icon16 darr overhanging"></i>').insertBefore(self.children('a'));
                        }
                    }

                    var id = dr.attr('rel');
                    var parent_id = self.attr('rel');
                    if (parent_id == dr.parent('ul').parent('li.dr').attr('rel')) {
                        return false;
                    }

                    $.post('?module=album&action=move', {
                        id: id,
                        parent_id: parent_id
                    }, function(r) {
                        var current_album = $.photos.getAlbum(),
                            album = r.data.album,
                            counters = r.data.counters;

                        if (album.status <= 0 &&
                            $.photos_dragndrop.privateDescendants(album.id))
                        {
                            $.photos.dispatch('album/'+album.id+'/');
                        }

                        if (current_album && current_album.id == album.id) {
                            var frontend_link = r.data.frontend_link;
                            if (frontend_link) {
                                $('#photo-list-frontend-link').attr('href', frontend_link).text(frontend_link);
                            }
                            if (album.type == Album.TYPE_DYNAMIC) {
                                $.photos.load("?module=album&action=photos&id=" + album.id, $.photos.onLoadPhotoList);
                            }
                        }
                        var album_list = $('#album-list');
                        if (!$.isEmptyObject(counters)) {
                            for (var album_id in counters) {
                                if (counters.hasOwnProperty(album_id)) {
                                    album_list.find('li[rel='+album_id+']').find('.count:first').text(counters[album_id]);
                                }
                            }
                        }
                    }, 'json');

                    var $parent_list = dr.parent('ul');
                    var li_count = $parent_list.children('li.dr[rel!='+id+']').length;

                    var sep = dr.next();
                    dr.appendTo(list);
                    sep.appendTo(list);

                    if (!li_count) {
                        $parent_list.parent('li').children('i').remove();
                        $parent_list.remove();
                    }
                }
            });
        },

        // when scrolling page drag-n-drop helper must moving too with cursor
        _scrolHelper: function(e) {
            var helper = $('#helper'),
                prev_scroll_top = helper.data('scrollTop'),
                scroll_top = $(document).scrollTop(),
                shift = prev_scroll_top ? scroll_top - prev_scroll_top : 50;

            helper.css('top', helper.position().top + shift + 'px');
            helper.data('scrollTop', scroll_top);
        },

        _dropAnimation: function(items, done) {
            var duration = 300;
            var deferreds = [];
            items.each(function() {
                var item = $(this);
                var item_offset = item.offset();
                var item_clone = item.clone().css({
                    'z-index': 10,
                    position: 'absolute',
                    top: item_offset.top,
                    left: item_offset.left
                }).insertAfter(item);
                item.css({
                    opacity: 0
                });
                deferreds.push(
                    item.hide(duration).promise()
                );
                deferreds.push(item_clone.animate({
                    top: item_offset.top,
                    left: item_offset.left
                }, duration).promise().done(function() {
                    $(this).remove();
                }));
            });
            $.when.apply($, deferreds).done(function() {
                if (typeof done === 'function') {
                    done();
                }
            });
        },

        _shiftToLeft: function(item) {
            if (item.data('shifted') !== 'left') {
                var wrapper = item.find('.p-wrapper');
                if (!wrapper.length) {
                    var children = item.children();
                    var wrapper = $("<div class='p-wrapper' style='position:relative;'></div>").appendTo(item);
                    wrapper.append(children);
                }
                wrapper.stop().animate({
                    left: -15
                }, 200);
                item.data('shifted', 'left');
            }
        },
        _shiftToRight: function(item) {
                if (item.data('shifted') !== 'right') {
                    var wrapper = item.find('.p-wrapper');
                    if (!wrapper.length) {
                        var children = item.children();
                        var wrapper = $("<div class='p-wrapper' style='position:relative;'></div>").appendTo(item);
                        wrapper.append(children);
                    }
                    wrapper.stop().animate({
                        left: 15
                    }, 200);
                    item.data('shifted', 'right');
                }
        },
        _shiftAtPlace: function(item) {
            if (item.data('shifted')) {
                var wrapper = item.find('.p-wrapper');
                if (wrapper.length) {
                    var children = wrapper.children();
                    wrapper.stop().css({
                        left: 0
                    });
                    item.append(children);
                    wrapper.remove();
                }
                item.data('shifted', '');
            }
        },

        _bindExtDragActivate: function(item, className) {
            $(document).bind('mousemove.ext_drag_activate', function (e) {
                $.photos_dragndrop._extDragActivate(
                    e,  item, className
                );
            });
        },

        _unbindExtDragActivate: function() {
            $(document).unbind('mousemove.ext_drag_activate');
        },

        _activatePhotoListItem: function() {
                var self = $(this);
                var sort_enable = isSortEnable();
                var className = sort_enable ? 'drag-active' : 'drag-active-disabled';
                if (sort_enable) {
                    $.photos_dragndrop._shiftToRight(self);
                }
                if (self.hasClass('last')) {
                    $.photos_dragndrop._bindExtDragActivate(self, className);
                } else {
                    self.addClass(className);
                }
        },

        // clear (unactive) action
        _unactivatePhotoListItem: function(ui) {
            var self = $(this);
            var sort_enable = isSortEnable();
            var className =  sort_enable ? 'drag-active' : 'drag-active-disabled';
            var classNameOfLast = className + '-last';
            if (self.hasClass('last')) {
                $.photos_dragndrop._unbindExtDragActivate();
            }
            self.removeClass(className + ' ' + classNameOfLast);
            if (sort_enable) {
                $.photos_dragndrop._shiftAtPlace(self);
            }
        },

        // active/inactive drop-li both left and right
        _extDragActivate: function(e, self, className) {
            var classNameOfLast = className + '-last';
            if (!self.hasClass('last')) {
                self.addClass(className);
                return;
            }
            var pageX = e.pageX,
                pageY = e.pageY,
                self_width = self.width(),
                self_height = self.height(),
                self_position = self.position();

            if ($.photos.list_template == 'template-photo-thumbs') {
                if (pageX > self_position.left + self_width*0.5 && pageX <= self_position.left + self_width) {
                    self.removeClass(className).addClass(classNameOfLast);
                    $.photos_dragndrop._shiftToLeft(self);
                } else if (pageX > self_position.left && pageX <= self_position.left + self_width*0.5) {
                    self.removeClass(classNameOfLast).addClass(className);
                    $.photos_dragndrop._shiftToRight(self);
                } else {
                    $.photos_dragndrop._shiftAtPlace(self);
                }
            } else if ($.photos.list_template == 'template-photo-descriptions') {
                if (pageY > self_position.top + self_height*0.5) {
                    self.removeClass(className).addClass(classNameOfLast);
                } else if (pageY > self_position.top) {
                    self.removeClass(classNameOfLast).addClass(className);
                }
            }
            if (pageY < self_position.top || pageY > self_position.top + self_height ||
                    pageX < self_position.left || pageX > self_position.left + self_width)
            {
                self.removeClass(className).removeClass(classNameOfLast);
            }
        },

        // standardize draggable because it must be different
        _fixUiDraggable: function(draggable) {
            if (draggable.is('#photo')) {
                return draggable;
            }
            if (draggable.get(0).tagName == 'IMG') {
                draggable = draggable.parents('li:first');
            }
            return draggable;
        },

        _extendJqueryUIDragAndDrop: function() {
            // live draggable and live droppable
            $.fn.liveDraggable = function (opts) {
                this.each(function(i,el) {
                    var self = $(this);
                    if (self.data('init_draggable')) {
                        self.die("mouseover", self.data('init_draggable'));
                    }
                });
                this.live("mouseover", function() {
                    var self = $(this);
                    if (!self.data("init_draggable")) {
                        self.data("init_draggable", arguments.callee).draggable(opts);
                    }
                });
            };

            $.fn.liveDroppable = function (opts) {
                this.each(function(i,el) {
                    var self = $(this);
                    if (self.data('init_droppable')) {
                        self.die("mouseover", self.data('init_droppable'));
                    }
                });

                var init = function() {
                    var self = $(this);
                    if (!self.data("init_droppable")) {
                        self.data("init_droppable", arguments.callee).droppable(opts);
                        self.mouseover();
                    }
                };
                init.call(this);
                this.die("mouseover", init).live("mouseover", init);
                this.live('mouseover', init);
            };

            // Custom tolerance-mode realization because of jquery.ui doesn't have necessary functionality
            // This functionality extension need when dragging "big-photo" in one photo-page: intersection
            // have to take into account small helper icon and NOT big photo.
            // Because left corner of big photo can rest against left bound of window, so x-coordinate is frozen and not recalculated
            var parent_ui_intersect = $.ui.intersect;
            $.ui.intersect = function(draggable, droppable, toleranceMode) {
                if (!$(draggable.element).is('#photo') && toleranceMode == 'custom') {
                    toleranceMode = 'pointer';
                }
                if (toleranceMode != 'custom') {
                    return parent_ui_intersect.call($.ui, draggable, droppable, toleranceMode);
                }
                var left = droppable.offset.left,
                    top = droppable.offset.top,
                    helper_position = draggable.helper.position(),
                    helper_left = helper_position.left,
                    helper_top = helper_position.top;

              return $.ui.isOver(helper_top, helper_left + $.photos_dragndrop.helper_shift, top, left, droppable.proportions.height, droppable.proportions.width);
            };
        }

    };

    function isSortEnable() {
        var album = $.photos.getAlbum();
        if (!album || album.type !== Album.TYPE_STATIC || album.edit_rights === false) {
            return false;
        }
        return true;
    }

    function showSortHint() {
        var sort_method = $.photos.getOption('sort_method');
        if (sort_method) {
            var block = $('#hint-menu-block').show();
            block.children().hide();
            block.find('.' + sort_method).show();
        }
    }

    function hideSortHint() {
            var block = $('#hint-menu-block').hide();
            block.children().hide();
    }

})(jQuery);;
/*
 * JavaScript Templates 2.1.0
 * https://github.com/blueimp/JavaScript-Templates
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 *
 * Inspired by John Resig's JavaScript Micro-Templating:
 * http://ejohn.org/blog/javascript-micro-templating/
 */

/*jslint evil: true, regexp: true */
/*global document, define */

(function ($) {
    "use strict";
    var tmpl = function (str, data) {
        var f = !/[^\w\-\.:]/.test(str) ? tmpl.cache[str] = tmpl.cache[str] ||
            tmpl(tmpl.load(str)) :
            new Function(
                tmpl.arg + ',tmpl',
                "var _e=tmpl.encode" + tmpl.helper + ",_s='" +
                    str.replace(tmpl.regexp, tmpl.func) +
                    "';return _s;"
            );
        return data ? f(data, tmpl) : function (data) {
            return f(data, tmpl);
        };
    };
    tmpl.cache = {};
    tmpl.load = function (id) {
        var e = document.getElementById(id),
            pattern = /<\\\/(\w+)/g,
            replace = '<'+'/$1';
        if(!e && console) {
            console.log('template with id='+id+' not found');
        }
        return e?(e.tagName.toLowerCase() == 'textarea' ? e.value: document.getElementById(id).innerHTML).replace(pattern, replace):null;
    };
    tmpl.regexp = /([\s'\\])(?![^%]*%\})|(?:\{%(=|#)([\s\S]+?)%\})|(\{%)|(%\})/g;
    tmpl.func = function (s, p1, p2, p3, p4, p5) {
        if (p1) { // whitespace, quote and backspace in interpolation context
            return {
                "\n": "\\n",
                "\r": "\\r",
                "\t": "\\t",
                " " : " "
            }[s] || "\\" + s;
        }
        if (p2) { // interpolation: {%=prop%}, or unescaped: {%#prop%}
            if (p2 === "=") {
                return "'+_e(" + p3 + ")+'";
            }
            return "'+(" + p3 + "||'')+'";
        }
        if (p4) { // evaluation start tag: {%
            return "';";
        }
        if (p5) { // evaluation end tag: %}
            return "_s+='";
        }
    };
    tmpl.encReg = /[<>&"'\x00]/g;
    tmpl.encMap = {
        "<"   : "&lt;",
        ">"   : "&gt;",
        "&"   : "&amp;",
        "\""  : "&quot;",
        "'"   : "&#39;"
    };
    tmpl.encode = function (s) {
        return String(s || "").replace(
            tmpl.encReg,
            function (c) {
                return tmpl.encMap[c] || "";
            }
        );
    };
    tmpl.arg = "o";
    tmpl.helper = ",print=function(s,e){_s+=e&&(s||'')||_e(s);}" +
        ",include=function(s,d){_s+=tmpl(s,d);}";
    if (typeof define === "function" && define.amd) {
        define(function () {
            return tmpl;
        });
    } else {
        $.tmpl = tmpl;
    }
}(this));;
(function($) {
    $.fn.inlineEditable = function(options, ext)
    {
        var binded = false;

        if (typeof options == 'string') {
            if (options == 'setOption') {
                var settings = this.data('inlineEditableSettings') || {};
                $.extend(true, settings, ext);
                if (typeof ext.hold !== 'undefined' && typeof ext.hold !== 'function') {
                    settings.hold = _scalarToFunc(settings.hold);
                }
                this.data('inlineEditableSettings', settings);
            }
            return this;        // means that widget is installed already
        }
        var prev_settings = this.data('inlineEditableSettings');   // prev-old settings
        this.data('inlineEditableSettings', $.extend({
            inputType: 'text',
            size: {
                height: null,
                width: null
            },
            minSize: {
                height: null,
                width: null
            },
            maxSize: {
                height: null,
                width: null
            },
            editLink: null,
            editOnItself: true,
            placeholder: null,
            makeReadableBy: ['blur', 'enter', 'esc'],        // available 'blur', 'enter', 'esc', function
            updateBy: ['ctrl+enter','alt+enter'],
            beforeBackReadable: function() {},
            afterBackReadable: function() {},
            beforeMakeEditable: function() {},
            placeholderClass: 'hint',
            truncate: false,
            hold: false,
            html: false,
            allowEmpty: false
        }, prev_settings, options || {}));

        var settings = this.data('inlineEditableSettings'),
            self = this,
            mode = 'read',                            // read|edit
            text = '';                                // previous text

        if (typeof settings.hold !== 'function') {
            settings.hold = _scalarToFunc(settings.hold);
        }
        init.call(this);

        function init() {
            if (this.data('inited')) {    // has initialized already. Don't initialize again
                return;
            }
            if (settings.truncate && typeof settings.truncate == 'boolean') {
                settings.truncate = 255; // default value of truncate
            }
            if (settings.truncate) {
                var text = !settings.placeholder || settings.placeholder !== this.text() ? this.text() : '';
                this.data('real_text', text);       // here real text. Non truncated text
                this.text(text.length < settings.truncate - 3 ? text : text.substr(0, settings.truncate - 3) + '...');
            }
            if (settings.placeholder) {
                setPlaceholder.call(this);
            }
            if (settings.editLink) {
                $(settings.editLink).click(function() {
                    if (settings.hold.call(self)) {
                        return;
                    }
                    if (mode != 'edit') {
                        makeEditable.call(self.get(0));
                    }
                });
            }
            if (settings.editOnItself) {
                this.click(function() {
                    if (settings.hold.call(self)) {
                        return;
                    }
                    if (mode != 'edit') {
                        makeEditable.call(this);
                    }
                });
            }
            this.bind('editable', function() {
                if (settings.hold.call(self)) {
                    return;
                }
                if (mode != 'edit') {
                    makeEditable.call(this);
                }
            });
            this.bind('placeholder', function(e, s) {
                if (s && settings.placeholder) {
                    setPlaceholder.call(this);
                }
                if (!s) {
                    $(this).removeClass(settings.placeholderClass);
                }
            });
            this.data('inited', true);
        }

        function setPlaceholder()
        {
            var text = getText($(this));
            if (!text) {
                $(this).addClass(settings.placeholderClass).text(settings.placeholder);
            }
        }

        function unsetPlaceholder()
        {
            var text = getText($(this));
            if (text == settings.placeholder) {
                $(this).text('').removeClass(settings.placeholderClass);
            }
        }

        function backPlaceholder(input)
        {
            if (!$(input).val()) {
                $(this).text(settings.placeholder).addClass(settings.placeholderClass);
                return true;
            }
            return false;
        }

        function makeEditable()
        {
            mode = 'edit';
            this.id = this.id || ('' + Math.random()).slice(2);

            var input_id = this.id + '-input',
                input = $('#' + input_id);

            if (!input.length) {
                self.after(inputHtml(input_id));
                input = $('#' + input_id);
            }
            setSize(input, self);
            if (settings.placeholder) {
                if (getText($(this)) == settings.placeholder) {
                    unsetPlaceholder.call(self);
                }
            }

            // fire before-callback
            settings.beforeMakeEditable.call(this, input);

            text = settings.truncate ? self.data('real_text') : getText(self);      // save text - for restoring if need
            input.val(text).show().focus();
            self.hide();
            $(settings.editLink).hide();

            if (!binded) {        // bind event handler only once
                var key_codes = [];
                var save_key_codes = [];
                for (var i = 0, n = settings.makeReadableBy.length; i < n; ++i) {
                    var item = settings.makeReadableBy[i];
                    if (item == 'blur') {
                        input.blur(function() {
                            if (mode != 'read') {
                                makeReadable.call(this);
                            }
                        });
                    }
                    if (item == 'enter') {
                        key_codes.push(13);
                    }
                    if (item == 'esc') {
                        key_codes.push(27);
                    }
                }
                for (var i = 0, n = settings.updateBy.length; i < n; ++i) {
                    var item = settings.updateBy[i];
                    if (item == 'alt+enter') {
                        save_key_codes.push({'ctrl':false,'alt':true,'shift':false,'key':13});
                    }
                    if (item == 'ctrl+enter') {
                        save_key_codes.push({'ctrl':true,'alt':false,'shift':false,'key':13});
                    }
                    if (item == 'ctrl+s') {
                        save_key_codes.push({'ctrl':true,'alt':false,'shift':false,'key':17});
                    }
                }
                if (key_codes.length) {
                    (function(key_codes) {
                        input.keydown(function(e) {
                            if (~key_codes.indexOf(e.keyCode) && !e.ctrlKey && !e.altKey && !e.shiftKey) {
                                if (mode != 'read') {
                                    makeReadable.call(this, e.keyCode == 27 ? text : null);
                                }
                            }
                            if(save_key_codes.length) {
                                for(var i in save_key_codes) {
                                    var k = save_key_codes[i];
                                    if ((e.keyCode == k.key) && (e.ctrlKey == k.ctrl) && (e.altKey == k.alt) && (e.shiftKey == k.shift) ){
                                        self.trigger('readable');
                                        break;
                                    }
                                }
                            }
                        });
                    })(key_codes);
                }
                self.bind('readable', function(e, disable_handlers) {
                    if (mode != 'read') {
                        var input_id = this.id + '-input';
                        var input = $('#' + input_id);
                        makeReadable.call(input, input.val(), disable_handlers);
                    }
                });
                binded = true;
            }
        }

        function makeReadable(new_text, disable_handlers)
        {
            disable_handlers = typeof disable_handlers === 'undefined' ? false : true;
            if (new_text != undefined && new_text != null) {
                $(this).val(new_text);
            } else {
                new_text = $(this).val();
            }
            if (disable_handlers === false) {
                if (settings.beforeBackReadable.call(self.get(0), this, {
                    changed: new_text != text,
                    old_text: text,
                    new_text: new_text
                }) === false) 
                {
                    return;
                }
            }
            mode = 'read';
            // this - input
            if (!settings.placeholder || !backPlaceholder.call(self, this)) {
                if (settings.allowEmpty || new_text) {
                    if (settings.truncate) {
                        self.data('real_text', new_text);       // here real text. Non truncated text
                        self.text(new_text.length < settings.truncate - 3 ? new_text : new_text.substr(0, settings.truncate - 3) + '...' );
                    } else {
                        setText(self, new_text);
                    }
                    if (!new_text) {
                        setPlaceholder.call(this);
                    }
                }
            }
            self.show();
            $(this).hide();
            $(settings.editLink).show();
            // fire after-callback
            if (disable_handlers === false) {
                settings.afterBackReadable.call(self.get(0), this, {
                   changed: new_text != text,
                   old_text: text
                });
            }
        }

        function inputHtml(id)
        {
            switch (settings.inputType) {
                case 'textarea':
                    return '<textarea id="' + id + '" style="display:none;"></textarea>';
                case 'input':
                default:
                    return '<input type="text" id="' + id + '" style="display:none;">';
            }
        }

        function setSize(dst, src)
        {
            var height = settings.size.height || src.height(),
                width = settings.size.width || src.width() * 1.5;

            height = settings.minSize.height && height < settings.minSize.height ? settings.minSize.height : height;
            width = settings.minSize.width && width < settings.minSize.width ? settings.minSize.width : width;

            height = settings.maxSize.height && height > settings.maxSize.height ? settings.maxSize.height : height;
            width = settings.maxSize.width && width > settings.maxSize.width ? settings.maxSize.width : width;

            dst.height(height);
            dst.width(width);
        }

        function _scalarToFunc(scalar) {
            return function() {
                return scalar;
            };
        }

        function getText(item)
        {
            return !settings.html ? item.text() : item.html();
        }

        function setText(item, text)
        {
            return !settings.html ? item.text(text) : item.html(text);
        }

        return this;

    };
})(jQuery);;
(function($) {
    $.fn.activeMenu = function(options, ext, value) {

        if (typeof options == 'string') {
            if (options == 'disable' || options == 'enable') {
                if (!$.isArray(ext)) {
                    ext = [ext];
                }
                this.find('li').each(function() {
                    var self = $(this);
                    if (~ext.indexOf(self.attr('data-action'))) {
                        options == 'disable' ? self.hide() : self.show();
                    }
                });
                return this;
            }
            if (options == 'setOption') {
                var settings = this.data('activeMenuSettings');
                if (!settings) {
                    return;
                }
                if (typeof ext === 'string') {
                    var o = {};
                    o[ext] = value;
                    ext = o;
                }
                $.extend(settings, ext);
                return this;
            }
        }

        if (typeof options == 'string') {
            if (options == 'fire') {
                var settings = this.data('activeMenuSettings');
                if (!settings) {
                    return;
                }
                settings['on'+options.substr(0,1).toUpperCase() + options.substr(1)].call(this);
                return this;
            }
        };

        this.data('activeMenuSettings', $.extend({
            beforeAnyAction: function() {},
            defaultAction: function() {},
            onInit: function(){},
            onFire: function(){}
        }, options || {}));

        var settings = this.data('activeMenuSettings');
        if (!settings) {
            return;
        }


        init.call(this);

        function init() {
            var self = this;
            if (this.data('inited')) {  // has inited already. Don't init again
                return;
            }
            this.bind('click.photos-active-menu', function(e) {
                var item = e.target;
                var root = self.get(0);
                while (item.tagName != 'LI') {
                    if (item == root) {
                        return;
                    }
                    item = $(item).parent().get(0);
                }
                item = $(item);
                var action = item.attr('data-action') || 'default',
                    parts = action.split('-');
                for (var i = 1; i < parts.length; i++) {
                    parts[i] = parts[i][0].toUpperCase() + parts[i].slice(1);
                }
                action = parts.join('');
                var callback_name = action + 'Action';
                if (!settings[callback_name] || typeof settings[callback_name] != 'function') {
                    callback_name = 'defaultAction';
                }
                var r = settings.beforeAnyAction(item.attr('data-action'));
                if (r !== false) {
                    settings[callback_name](item, e);
                }
                e.preventDefault();
            });
            settings.onInit(this);
            this.data('inited', true);
        }

        return this;

    };
})(jQuery);;
(function($) {
    $.fn.rateWidget = function(options, ext, value) {
        if (typeof options == 'string') {
            if (options == 'getOption') {
                if (ext == 'rate') {
                    return parseInt(this.attr('data-rate'));
                }
            }
            if (options == 'setOption') {
                if (ext == 'rate') {
                    var val = parseFloat(value) || 0;
                    update.call(this, Math.round(val * 2) / 2);
                    ext = {
                        rate: value
                    };
                }
                if (typeof ext === 'object' && ext) {
                    var settings = this.data('rateWidgetSettings') || {};
                    $.extend(settings, ext);
                    if (typeof ext.hold !== 'undefined' && typeof ext.hold !== 'function') {
                        settings.hold = _scalarToFunc(settings.hold);
                    }
                }
            }
            return this;        // means that widget is installed already
        }

        this.data('rateWidgetSettings', $.extend({
            onUpdate: function() {},
            rate: null,
            hold: false,
            withClearAction: true,
            alwaysUpdate: false
        }, options || {}));

        var settings = this.data('rateWidgetSettings'),
            self = this;
        if (typeof settings.hold !== 'function') {
            settings.hold = _scalarToFunc(settings.hold);
        }
        init.call(this);
        function init() {
            if (this.data('inited')) {  // has inited already. Don't init again
                return;
            }
            if (settings.rate != null) {
                self.attr('data-rate', settings.rate);
            }
            self.find('i:lt(' + self.attr('data-rate') + ')').removeClass('star-empty').addClass('star');
            self.mouseover(function(e) {
                if (settings.hold.call(self)) {
                    return;
                }
                var target = e.target;
                if (target.tagName == 'I') {
                    target = $(target);
                    target.prevAll()
                        .removeClass('star star-half star-empty').addClass('star-hover').end()
                        .removeClass('star star-half star-empty').addClass('star-hover');
                    target.nextAll().removeClass('star star-hover').addClass('star-empty');
                }
            }).mouseleave(function() {
                if (settings.hold.call(self)) {
                    return;
                }
                update.call(self, self.attr('data-rate'));
            });
            self.click(function(e) {
                if (settings.hold.call(self)) {
                    return;
                }
                var item = e.target;
                var root = this;
                while (item.tagName != 'I') {
                    if (item == root) {
                        return;
                    }
                }
                var prev_rate = self.attr('data-rate');
                var rate = 0;
                self.find('i')
                    .removeClass('star star-hover')
                    .addClass('star-empty')
                    .each(function() {
                        rate++;
                        $(this).removeClass('star-empty').addClass('star');
                        if (this == item) {
                            if (settings.alwaysUpdate || prev_rate != rate) {
                                self.attr('data-rate', rate);
                                settings.onUpdate(rate);
                            }
                            return false;
                        }
                });
            });
            // if withClearAction is setted to true make available near the stars link-area for clear all stars (set rate to zero)
            if (settings.withClearAction) {
                var clear_link_id = 'clear-' + $(this).attr('id'),
                    clear_link = $('#' + clear_link_id);
                if (!clear_link.length) {
                    self.after('<a href="javascript:void(0);" class="inline-link p-rate-clear" id="'+clear_link_id+'" style="display:none;"><b><i>'+$_('clear')+'</b></i></a>');
                    clear_link = $('#' + clear_link_id);
                }
                clear_link.click(function() {
                    if (settings.hold.call(self)) {
                        return;
                    }
                    var prev_rate = self.attr('data-rate');
                    update.call(self, 0);
                    if (prev_rate != 0) {
                        settings.onUpdate(0);
                    }
                });
                var timer_id;
                self.parent().mousemove(function() {
                    if (settings.hold.call(self)) {
                        return;
                    }
                    if (timer_id) {
                        clearTimeout(timer_id);
                    }
                    clear_link.show(0);
                }).mouseleave(function() {
                    timer_id = setTimeout(function() {
                        if (settings.hold.call(self)) {
                            return;
                        }
                        clear_link.hide(0);
                    }, 150);
                });
            }
            this.data('inited', true);
        }

        function update(new_rate) {
            var rate = 0;
            this.find('i')
                .removeClass('star star-empty star-half star-hover')
                .addClass('star-empty').each(function() {
                    if (rate == new_rate) {
                        return false;
                    }
                    rate++;
                    if (rate > new_rate) {
                        if (rate - new_rate == 0.5) {
                            $(this).removeClass('star-empty').addClass('star-half');
                        }
                    } else {
                        $(this).removeClass('star-empty').addClass('star');
                    }
                });
            this.attr('data-rate', new_rate);
        }

        function _scalarToFunc(scalar) {
            return function() {
                return scalar;
            };
        }

        return this;

    };
})(jQuery);;
// === Structures ===
var PhotoStream = (function() {
    var constructor = function(options) {
        this._options = options || {};
        this._onClear = this._options.onClear || function() {};
        this._photo_stream = [];
    };
    $.extend(constructor.prototype, {
        getById: function(id) {
            for (var i = 0, p = this._photo_stream[0], n = this._photo_stream.length; i < n; p = this._photo_stream[++i]) {
                if (p && p.id == id) {
                    return p;
                }
            }
            return null;
        },
        updateById: function(id, photo, push_new) {
            var p = this.getById(id);
            if (p) {
                $.extend(p, photo);
                return p;
            }
            push_new = push_new || false;
            if (push_new) {
                this._photo_stream.push(photo);
            }
            return photo;
        },
        deleteById: function(id) {
            if (!$.isArray(id)) {
                id = [id];
            }
            for (var ids = id, i = 0, n = ids.length, id = ids[0]; i < n; id = ids[++i]) {
                var p = this.getById(id);
                if (p && p.index) {
                    delete this._photo_stream[p.index];
                }
            }
            var new_photo_stream = [],
                index = 0;
            for (var i = 0, n = this._photo_stream.length, p = this._photo_stream[0]; i < n; p = this._photo_stream[++i]) {
                if (p) {
                    p.index = index++;
                    new_photo_stream.push(p);
                }
            }
            this._photo_stream = new_photo_stream;
            return this;
        },
        replace: function(old_photo, new_photo) {
            var index = old_photo.index;
            this._photo_stream[index] = new_photo;
            new_photo.index = index;
            return this;
        },
        push: function(photo) {
            this._photo_stream.push(photo);
            photo.index = this._photo_stream.length - 1;
            return this;
        },
        getNext: function(photo) {
            photo = photo || this.current;
            if (typeof photo != 'object') {
                photo = this.getById(photo);
            }
            if (!photo) {
                return null;
            }
            var index = photo.index + 1;
            return this._photo_stream[index] ? this._photo_stream[index] : null;
        },
        getPrev: function(photo) {
            photo = photo || this.current;
            if (typeof photo != 'object') {
                photo = this.getById(photo);
            }
            if (!photo) {
                return null;
            }
            var index = photo.index - 1;
            return this._photo_stream[index] ? this._photo_stream[index] : null;
        },
        setCurrent: function(photo) {
            if (!photo.index) {
                photo = this.getById(photo.id);
                if (!photo || (typeof photo.index !== 'number' && !photo.index)) {
                    throw new Error("This photo is not in stream");
                }
            }
            this.current = photo;
            return this;
        },
        setCurrentById: function(id)
        {
            var photo = this.getById(id);
            if (typeof photo === 'object' && photo) {
                this.setCurrent(photo);
            }
            return this;
        },
        getCurrent: function() {
            return this.current;
        },
        getCurrentId: function()
        {
            if (typeof this.current === 'object' && this.current) {
                return this.current.id;
            }
            return null;
        },
        set: function(photos) {
            this._photo_stream = [];
            this.append(photos);
            if (!this.isEmpty()) {
                this.setCurrent(this.getFirst());
            }
            return this;
        },
        append: function(photos) {
            for (var i = 0, p = photos[i], j = this._photo_stream.length, n = photos.length; i < n; p = photos[++i], ++j) {
                p.index = j;
                this._photo_stream.push(p);
            }
            return this;
        },
        prepend: function(photos) {
            var existed = this._photo_stream || [];
            this._photo_stream = [];
            for (var i = 0, p = photos[i], n = photos.length; i < n; p = photos[++i]) {
                p.index = i;
                this._photo_stream.push(p);
            }
            this.append(existed);
            return this;
        },
        clear: function() {
            this._photo_stream = [];
            this._onClear();
            return this;
        },
        length: function() {
            return this._photo_stream.length;
        },
        getAll: function() {
            return this._photo_stream;
        },
        getFirst: function() {
            return this._photo_stream[0];
        },
        getLast: function() {
            return this._photo_stream[this._photo_stream.length - 1];
        },
        isFirst: function(photo) {
            return photo && photo.index == 0;
        },
        isLast: function(photo) {
            return photo && photo.index == this._photo_stream.length - 1;
        },
        isEmpty: function() {
            return !this._photo_stream.length;
        },
        getCurrentIndex: function() {
            return this.current.index;
        },
        slice: function(start, end) {
            return this._photo_stream.slice(start, end);
        },
        /**
         * Move item(s) inside stream to place just before item with id=before_id
         * @param number|array id
         * @param number|null before_id If null or omitted than item(s) move to the end of stream
         */
        move: function(id, before_id) {
            var photos = [],
                photo,
                photo_stream = this._photo_stream;
            if (!$.isArray(id)) {
                photo = this.getById(id);
                //this._photo_stream.splice(photo.index, 1);
                delete photo_stream[photo.index];
                photos.push(photo);
            } else {
                for (var i = 0, n = id.length; i < n; ++i) {
                    photo = this.getById(id[i]);
                    //this._photo_stream.splice(photo.index, 1);
                    delete photo_stream[photo.index];
                    photos.push(photo);
                }
            }
            if (photos.length) {
                var place = 0;
                if (typeof before_id === 'undefined' || before_id === null) {
                    place = this._photo_stream.length;
                } else {
                    var photo = this.getById(before_id);
                    place = photo ? photo.index : 0;
                }
                
                Array.prototype.splice.apply(photo_stream, [place, 0].concat(photos));
                // clear spaces ('undefined' after delete operator) and reindex
                this.clear();
                var index = 0;
                for (var i = 0, n = photo_stream.length; i < n; ++i) {
                    var photo = photo_stream[i];
                    if (typeof photo === 'object' && photo) {
                        photo.index = index++;
                        this._photo_stream.push(photo);
                    }
                }
            }
        }
    });
    return constructor;
})();

// === functions ===
Date.parseISO = function (string) {
    var tried = Date.parse(string);
    if (!isNaN(tried)) {
        return tried;
    }
    var regexp = "([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})";
    var d = string.match(new RegExp(regexp));

    var date = new Date(d[1], 0, 1);

    if (d[2]) { date.setMonth(d[2] - 1); }
    if (d[3]) { date.setDate(d[3]); }
    if (d[4]) { date.setHours(d[4]); }
    if (d[5]) { date.setMinutes(d[5]); }
    if (d[6]) { date.setSeconds(d[6]); }

    return +date;
};

/**
 * Replace old src with new src in img tag with or not preloading. Also taking into account competition problem
 * 
 * @param jquery object img
 * @param string new_src
 * @param mixed fn. Optinality. 
 *     If parameter is null than just change src (without preloading). 
 *     If fn is function than it is callback after src changed (with preloading)
 *     If omitted (undefined) - with preloading
 * @param string namespace. Optionality. 
 *     Need for solving competition problem. Render only image of last calling of this namespace. 
 *     If omitted try to use id of tag or generate random namespace 
 */
function replaceImg (img, new_src, fn, namespace) {
    namespace = namespace || img.attr('id') || ('' + Math.random()).slice(2);
    replaceImg.loading_map = replaceImg.loading_map || {};
    replaceImg.loading_map[namespace] = new_src;
    img.unbind('load');
    if (fn === null) {
        img.attr('src', new_src);
    } else {
        $('<img>').attr('src', new_src).load(function() {
            // setTimeout need for fix FF "blink" problem with image rendering
            setTimeout(function() {
                // render img only of last calling of function for this namespace
                if (replaceImg.loading_map[namespace] == new_src) {
                    img.attr('src', new_src);
                    if (typeof fn == 'function') {
                        fn.call(img);
                    }
                }
                $(this).remove();
            }, 100);
        });
    }
    return namespace;
};

String.prototype.truncate = function(length, strip_tags) {
    strip_tags = typeof strip_tags === 'undefined' ? true : strip_tags;
    var str = '';
    if (strip_tags) {
        str = this.replace(/<\/?[\s\S]+?\/?>/g, '');
    }
    if (str.length > length - 3 && length > 3) {
        str = str.substr(0, length - 3) + '...';
    }
    return str;
};

/**
 * Parsing size-code (e.g. 500x400, 500, 96x96, 200x0) into key-value object with info about this size
 *
 * @see Server-side has the same function with the same realization
 * @param String size
 * @returns Object
 */
function parseSize(size)
{
    var type = 'unknown',
        ar_size = (''+size).split('x'),
        width = ar_size[0] && ar_size[0] != 0 ? ar_size[0] : null,
        height = ar_size[1] && ar_size[1] != 0 ? ar_size[1] : null;

    if (ar_size.length == 1) {
        type = 'max';
        height = width;
    } else {
        if (width == height) { // crop
            type = 'crop';
        } else {
            if (width && height) {
                type = 'rectangle';
            } else if (width === null) {
                type = 'height';
            } else if (height === null) {
                type = 'width';
            }
        }
    }
    return {
        type: type,
        width: width,
        height: height
    };
}

/**
 * Calculate real size of photo thumbnail
 *
 * @see Server-side has the same function with the same realization
 * @param Object photo Key-value object with photo info
 * @param String|Object size string size-code or key-value object returned by parseSize
 * @returns Object Key-value object with width and height values
 */
function getRealSizesOfThumb(photo, size)
{
    var photo_width = parseInt(photo.width, 10),   // typecast need for correct comparison
        photo_height = parseInt(photo.height, 10),
        rate = photo_width/photo_height,
        revert_rate = photo_height/photo_width,
        size_info;
    if (isNaN(rate) || isNaN(revert_rate)) {
        return null;
    }
    if (typeof size !== 'object') {
        size_info = parseSize(size);
    } else {
        size_info = size;
    }

    var type = size_info.type,
        width = size_info.width,
        height = size_info.height,
        w, h;
    switch(type) {
        case 'max':
            if (photo_width > photo_height) {
                w = width;
                h = revert_rate*w;
            } else {
                h = width;
                w = rate*h;
            }
            break;
        case 'crop':
            w = h = width;
            break;
        case 'rectangle':
            w = width;
            h = height;
            break;
        case 'width':
            w = width;
            h = revert_rate*w;
          break;
        case 'height':
            h = height;
            w = rate*h;
            break;
        default:
            w = h = null;
            break;
    }
    w = Math.round(w);
    h = Math.round(h);
    if (photo_width < w && photo_height < h) {
        return {
            width: photo.width,
            height: photo.height
        };
    }
    return {
        width: w,
        height: h
    };
};
(function($) {
    $.fn.photoStreamSlider = function(options) {
        var settings = $.extend({
            duration: 200
        }, options || {});

        var self = this;

        function init()
        {
            var photo_stream = self.find(settings.photoStream),
                visible_list = $('li.visible', photo_stream),
                list = $('li', photo_stream),
                visible_width = visible_list.filter(':first').outerWidth() * visible_list.length,
                width = list.filter(':first').outerWidth() * list.length,
                height = list.filter(':first').outerHeight(),
                wrapper = photo_stream.parent();

            wrapper.css({
                overflow: 'hidden',
                height: height,
                position: 'relative',
                padding: '4px 0',
                margin: 0,
                width: visible_width
            });

            var li = photo_stream.find('li:first'),
                first_visible = visible_list.filter(':first'),
                delta = (first_visible.outerWidth() - first_visible.width()) / 2,
                offset = 0,
                li_width = li.outerWidth();

            first_visible = first_visible.get(0);
            while (li.length) {
                if (li.get(0) == first_visible) {
                    break;
                }
                offset += li_width;
                li = li.next();
            }

            offset -= delta;
            photo_stream.css({
                position: 'absolute',
                left: -offset,
                width: width
            });

            $(settings.forwardLink).click(function() {
                slide('forward');
                return false;
            });

            $(settings.backwardLink).click(function() {
                slide('backward');
                return false;
            });

            self.bind('append prepend', function(e, html) {
                if (e.type == 'append') {
                    var last_dummy = photo_stream.find('li:last'),
                        li = last_dummy,
                        dummies_tail = $();
                    while (li.hasClass('dummy')) {
                        dummies_tail = dummies_tail.add(li);
                        li = li.prev('li')
                    }
                    dummies_tail.remove();
                    photo_stream.append(html);
                } else {
                    // because we prepend and use css-left for shifting, so calc shift (width of prepended items)
                    var rendered = $('<div></div>').html(html),
                        new_list = rendered.find('li'),
                        shift = new_list.length * li_width;
                    rendered.remove();

                    var first_dummy = photo_stream.find('li:first'),
                        li = first_dummy,
                        dummies_head = $();

                    while (li.hasClass('dummy')) {
                        dummies_head = dummies_head.add(li);
                        li = li.next('li')
                    }
                    dummies_head.remove();
                    photo_stream.prepend(new_list);
                }
                // update closure vars
                list = photo_stream.find('li');
                // recalc width
                width = list.filter(':first').outerWidth() * list.length;
                photo_stream.css('width', width);

                if (e.type == 'prepend') {
                    // prepend - take into account shifting (see before)
                    var f = function() {
                        photo_stream.css('left', parseInt(photo_stream.css('left')) - shift);
                    };
                    if (photo_stream.is(':animated')) {
                        photo_stream.stop(false, true);
                        f();
                    } else {
                        f();
                    }
                }
 
                var selected_li = photo_stream.find('li.selected');
                if (selected_li.hasClass('visible')) {
                    self.trigger('home', [null, false]);
                }
            });

            self.bind('forward backward', function(e, options) {
                slide({
                    direction: e.type,
                    steps: options.steps,
                    animate: typeof options.animate !== 'undefined' ? options.animate : true,
                    fn: options.fn
                });
                var selected_li = photo_stream.find('li.selected'),
                    candidate_li = e.type == 'forward' ? selected_li.next('li:not(.dummy)') : selected_li.prev('li:not(.dummy)');
                if (candidate_li.length) {
                    selected_li.removeClass('selected');
                    candidate_li.addClass('selected');
                }
            });

            self.bind('home', function(e, fn, animate) {
                var middle = parseInt(visible_list.length / 2),
                    current = visible_list.filter(':eq('+middle+')'),
                    next_selected = current.nextAll('.selected:first'),
                    prev_selected = current.prevAll('.selected:first'),
                    cnt = 0,
                    direction = '';

                if (typeof fn !== 'function') {
                    animate = fn;
                }
                animate = typeof animate !== 'undefined' ? animate : true;
                if (next_selected.length) {
                    direction = 'forward';
                    current.nextAll().each(function() {
                        ++cnt;
                        if ($(this).hasClass('selected')) {
                            return false;
                        }
                    });
                } else if (prev_selected.length) {
                    direction = 'backward';
                    current.prevAll().each(function() {
                        ++cnt;
                        if ($(this).hasClass('selected')) {
                            return false;
                        }
                    });
                }
                if (direction && cnt) {
                    slide({
                        direction: direction,
                        steps: cnt,
                        fn: fn,
                        animate: animate
                    });
                } else {
                    if (typeof fn == 'function') {
                        fn();
                    }
                }
                return false;
            });

            function slide(options)
            {
                if (typeof options == 'string') {
                    options = {
                        direction: options,
                        animate: true
                    };
                }
                var direction = options['direction'] || 'forward',
                    count = options['steps'] || visible_list.length;

                if (slide.execution) {
                    return;
                }
                slide.execution = true;

                var shift = visible_list.filter(':first').outerWidth() * count,
                    visible_count = visible_list.length;

                if (direction == 'forward') {
                    var last = visible_list.filter(':last'),
                        next = last.nextAll(':lt(' + count + ')'),
                        next_count = next.length,
                        last_in_next = next.filter(':last');
                    if (next_count) {
                        visible_list.removeClass('visible');
                        last_in_next.prevAll(':lt(' + (visible_count - 1) + ')').addClass('visible');
                        last_in_next.addClass('visible');
                    }
                } else {
                    var first = visible_list.filter(':first'),
                        prev = first.prevAll(':lt(' + count + ')'),
                        prev_count = prev.length,
                        first_in_prev = prev.filter(':last');       // prevAll return list in right-to-left order, so first is last
                    if (prev_count) {
                        visible_list.removeClass('visible');
                        first_in_prev.nextAll(':lt(' + (visible_count - 1) + ')').addClass('visible').show();
                        first_in_prev.addClass('visible');
                    }
                }
                // update closure
                visible_list = $('li.visible', photo_stream);
                // sliding itself
                var left = photo_stream.position()['left'];
                if (direction == 'forward') {
                    var bound = width - visible_width - delta;
                    left = left - shift;
                    left = left > -bound ? left : -bound;
                } else {
                    left = left + shift;
                    left = left < delta ? left : delta;
                }

                function afterAnimate() {
                    slide.execution = false;
                    var callback = 'on' + direction.charAt(0).toUpperCase() + direction.slice(1);
                    callback = settings[callback];
                    if (typeof callback == 'function') {
                        callback.call(self);
                    }
                    callback = options.fn;
                    if (typeof callback == 'function') {
                        callback.call(self);
                    }
                }
                if (options.animate) {
                    photo_stream.animate({
                        left: left
                    }, settings.duration, afterAnimate);
                } else {
                    photo_stream.css({
                        left: left
                    });
                    afterAnimate();
                }
            }
        }

        init();

    }
})(jQuery);;
(function ($) {
    $.storage = new $.store();
    $.photos = {
        namespace: '.photos',
        load_from_hash: 0,
        hash: '',
        raw_hash: '',
        options: {},
        shift_next: false,      // signal that shift to next or prev photo
        anchor: '',             // we use hash (#) for RIA interface therefore browser-anchor mechanism doesn't work. Make own
        album: null,
        total_count: null,          // count of all VISIBLE photos in current photo-list (this counter implys taking into account RIGHTS)
        photos_per_page:null,
        list_template:'template-photo-thumbs',           //template id
        photo_list_string:{},
        init: function (options) {
            if (typeof($.History) != "undefined") {
                $.History.bind(function () {
                    $.photos.dispatch();
                });

                $.History.unbind = function (state, handler) {
                    if (handler) {
                        if ($.History.handlers.specific[state]) {
                            $.each($.History.handlers.specific[state], function (i, h) {
                                if (h === handler) {
                                    $.History.handlers.specific[state].splice(i, 1);
                                    return false;
                                }
                            });
                        }
                    } else {
                        // We have a generic handler
                        handler = state;
                        $.each($.History.handlers.generic, function (i, h) {
                            if (h === handler) {
                                $.History.handlers.generic.splice(i, 1);
                                return false;
                            }
                        });
                    }
                };

                $.History.one = function(state, handler) {
                    if (!handler) {
                        handler = state;
                        state = null;
                    }
                    var h = function() {
                        handler.call(this);
                        $.History.unbind.apply($.History, state ? [state, h] : [h]);
                    };
                    $.History.bind.apply($.History, state ? [state, h] : [h]);
                };
            }
            $.wa.errorHandler = function (xhr) {
                $.storage.del('photos/hash');
                if (xhr.status === 403) {
                    $("#content").html('<div class="content left'+$.photos_sidebar.width+'px"><div class="block double-padded">' + xhr.responseText + '</div></div>');
                    return false;
                } else {
                    if ($.photos.load_from_hash) {
                        $.wa.setHash('#/');
                        return false;
                    }
                }
                return true;
            }
            this.options = options;
            var hash = window.location.hash || $.storage.get('photos/hash');
            if (hash && hash != window.location.hash) {
                this.load_from_hash = 2;
                $.wa.setHash('#/' + hash);
            } else {
                this.dispatch();
            }
        },
        dispatch: function (hash) {
            if ($.photos.ignore_dispatch) {
                $.photos.ignore_dispatch--;
                return;
            }

            $.photos.hash = '';
            if (hash == undefined) {
                hash = window.location.hash;
            }
            hash = hash.replace(/^[^#]*#\/*/, ''); /* fix syntax highlight*/
            $.photos.raw_hash = hash;
            if (hash) {
                hash = hash.split('/');
                if (hash[0]) {
                    var actionName = "";
                    var attrMarker = hash.length;
                    for (var i = 0; i < hash.length; i++) {
                        var h = hash[i];
                        if (i < 2) {
                            if (i === 0) {
                                actionName = h;
                            } else if (actionName == 'tag' || actionName == 'search' || actionName == 'plugins' || actionName == 'pages' || actionName == 'app') {
                                attrMarker = i;
                                break;
                            } else if (parseInt(h, 10) != h && h.indexOf('=') == -1) {
                                actionName += h.substr(0,1).toUpperCase() + h.substr(1);
                            } else {
                                attrMarker = i;
                                break;
                            }
                        } else {
                            attrMarker = i;
                            break;
                        }
                    }
                    var attr = hash.slice(attrMarker);
                    $.photos.hash = '/' + hash.slice(0, 2).join('/');
                    if (~$.photos.hash.indexOf('photo')) {
                        $.photos.hash = '';
                    }
                    this.beforeAnyAction(actionName, attr);
                    if (this[actionName + 'Action']) {
                        if (this.load_from_hash) {
                            this.load_from_hash--;
                        }
                        this[actionName + 'Action'].apply(this, attr);

                        // save last page to return to by default later
                        $.storage.set('photos/hash', $.photos.hash);
                    } else {
                        $.storage.del('photos/hash');
                        console && console.log('Invalid action name:', actionName+'Action');
                    }
                } else {
                    this.beforeAnyAction();
                    this.defaultAction();
                }
            } else {
                this.beforeAnyAction();
                this.defaultAction();
            }
        },

        ignore_dispatch: 0,
        forceHash: function(hash) {
            if (hash != window.location.hash) {
                $.photos.ignore_dispatch = 1;
                window.location.hash = hash;
            }
        },

        menu: {
            stack:{
                'list':[],
                'photo':[]
            },
            extend_stack: {
                'list':[],
                'photo':[]
            },
            register:function(type, selector, options) {
                if(this.stack[type]) {
                    this.stack[type].push(new ToolbarMenu(selector, options));
                }
            },
            get: function(type, selector) {
                if (this.stack[type] && $.isArray(this.stack[type])) {
                    for (var i = 0; i < this.stack[type].length; i++) {
                        if (this.stack[type][i].is(selector)) {
                            return this.stack[type][i];
                        }
                    }
                }
                return null;
            },
            init: function(type) {
                var extra_action = '';
                if (this.stack[type]){
                    while(extra_action = this.extend_stack[type].shift()) {
                        for (var id = 0; id < this.stack[type].length; id++) {
                            if(this.stack[type][id].is(extra_action.selector)) {
                                for(var action in extra_action.actions) {
                                    this.stack[type][id].setAction(action, extra_action.actions[action]);
                                }
                                break;
                            }
                        }
                    }
                    for (var id = 0; id < this.stack[type].length; id++) {
                        this.stack[type][id].init();
                    }
                }
            },
            enable: function(type, selector, actions) {
                selector = selector || '*';
                if (this.stack[type]){
                    for (var id = 0; id < this.stack[type].length; id++) {
                        var item = this.stack[type][id];
                        if(!selector || item.is(selector)){
                            item.enable(actions);
                        }
                    }
                }
            },
            disable: function(type, selector, actions) {
                selector = selector || '*';
                if (this.stack[type]){
                    for (var id = 0; id < this.stack[type].length; id++) {
                        var item = this.stack[type][id];
                        if(!selector || item.is(selector)){
                            item.disable(actions);
                        }
                    }
                }
            },
            extend: function(type, selector, actions) {
                if (this.stack[type]){
                    this.extend_stack[type].push({'selector':selector,'actions':actions});
                }
                return this;
            }
        },

        setOption: function(name, value) {
            this.options[name] = value;
        },

        getOption: function(name) {
            return this.options[name];
        },

        beforeAnyAction: function() {},

        initClearance: function() {
            $.photos.toggleFullScreen();
            $.photos.highlightSidebarItem();
            $.photos.hotkey_manager.unset();
            $.photos.unsetLazyLoad();
            $.photos.photo_stream_cache.clear();
            $.photos.photo_stack_cache.clear();
            delete $.photos.photo_stream_cache.hash;
        },

        defaultAction: function () {
            if (window.location.hash || !$('#album-list ul li.dr').length) {
                $.storage.set('photos/hash', 'photos/');
                this.photosAction();
            } else {
                $.storage.set('photos/hash', 'albums/');
                this.albumsAction();
            }
        },

        photosAction: function () {
            $.photos.loadDispatch(arguments, function() {
                $.photos.load("?module=photo&action=list", $.photos.onLoadPhotoList);
            });
        },

        albumsAction: function () {
            $.photos.loadDispatch(arguments, function() {
                $.photos.load("?action=albums");
            });
        },

        albumAction: function (id) {
            $.photos.loadDispatch(arguments, function() {
                $.photos.load("?module=album&action=photos&id=" + id, $.photos.onLoadPhotoList);
            });
        },

        searchAction: function (q) {
            $.photos.loadDispatch(arguments, function() {
                $.photos.load("?module=search&action=photos", {q: q}, $.photos.onLoadPhotoList);
            });
        },

        tagAction: function (name) {
            $.photos.loadDispatch(arguments, function() {
                $.photos.load("?module=tag&action=photos&tag=" + name, $.photos.onLoadPhotoList);
            });
        },

        appAction: function (app_id) {
            $.photos.loadDispatch(arguments, function() {
                $.photos.load("?module=photo&action=list&app_id=" + app_id, $.photos.onLoadPhotoList);
            });
        },

        settingsAction: function() {
            $.photos.initClearance();
            $.photos.load('?module=settings', $.photos.onLoadSettings);
        },

        pagesAction: function(id) {
            if ($('#wa-page-container').length) {
                waLoadPage(id);
            } else {
                $.photos.initClearance();
                $.photos.load('?module=pages', $.photos.onLoadPages, '<div class="content left'+$.photos_sidebar.width+'px"></div>');
            }
        },


        designAction: function(params) {
            $.photos.initClearance();
            if (params) {
                if ($('#wa-design-container').length) {
                    $.photos.setTitle($_('Themes'));
                    $.photos.scrollTop();
                    waDesignLoad();
                } else {
                    $.photos.load('?module=design', function () {
                        waDesignLoad(params);
                        $.photos.setTitle($_('Themes'));
                        $.photos.scrollTop();
                    }, '<div class="content left'+$.photos_sidebar.width+'px"></div>');
                }
            } else {
                $.photos.load('?module=design', function () {
                    waDesignLoad('');
                    $.photos.setTitle($_('Design'));
                    $.photos.scrollTop();
                }, '<div class="content left'+$.photos_sidebar.width+'px"></div>');
            }
        },

        designThemesAction: function(params) {
            $.photos.initClearance();
            if ($('#wa-design-container').length) {
                $.photos.setTitle($_('Themes'));
                $.photos.scrollTop();
                waDesignLoad();
            } else {
                $.photos.load('?module=design', function () {
                    waDesignLoad();
                    $.photos.setTitle($_('Themes'));
                    $.photos.scrollTop();
                }, '<div class="content left'+$.photos_sidebar.width+'px"></div>');
            }
        },

        pluginsAction: function(params) {
            $.photos.initClearance();
            $('#p-sidebar li.selected').removeClass('selected');
            $('#p-sidebar #sidebar-plugins').addClass('selected');
            if (!$('#wa-plugins-container').length) {
                $.photos.load("?module=plugins");
            } else {
                $.plugins.dispatch('#/plugins/' + params);
            }
        },

        photoAction: function (id) {
            $.photos.loadPhoto(id);
        },

        loadDispatch: function(delegated_arguments, loadCollectionCallback) { // delegated_arguments is an instance of Arguments
            var args = Array.prototype.slice.call(delegated_arguments, 1);
            for (var i = 0; i < args.length; i++) {
                if (args[i] == 'photo' && i < args.length - 1) {
                    this.loadPhoto(args[i + 1]);
                    return;
                }
            }
            if (typeof loadCollectionCallback == "function") {
                loadCollectionCallback(delegated_arguments[0]);
            }
            $.photos.initClearance();
        },

        onLoadSettings: function() {
            $.photos.setTitle($_('Settings'));
            $.photos.scrollTop();
        },

        onLoadPlugins: function f(id) {
            $.photos.setTitle($_('Plugins'));
            $('#plugins-settings-form').submit(function() {
                $('#plugins-settings-form-status').fadeIn(400);
                $('#plugins-settings-iframe').one('load', function() {
                    var r = $.parseJSON($(this).contents().find('body').html());
                    $('#plugins-settings-form-status').fadeOut(200, function () {
                        if (r.status == 'ok') {
                            $.photos.loadPluginSettings(id, f);
                        } else {
                            $("#plugins-settings-form-status").html(r.errors ? r.errors : r).css('color', 'red');
                            $("#plugins-settings-form-status").fadeIn("slow");
                        }
                    });
                });
            });
            $.photos.scrollTop();
        },

        onLoadPages: function() {
            $.photos.setTitle($_('Pages'));
            $.photos.scrollTop();
        },

        renderPhotoList: function() {
            var target = $("#photo-list");
            target.empty();

            $.photos.renderPhotoListChunk(target, 0);
            if ($.photos.photo_stream_cache.length() && (!$.photos.total_count || $.photos.total_count>$.photos.photo_stream_cache.length())) {
                $.photos.setLazyLoad();
            }
        },
        renderPhotoListChunk: function(target, offset, options, callback) {
            var chunk  = $.photos.options.photo_list_render_chunk || 10;
            var length = $.photos.photo_stream_cache.length();

            options = options || {};
            if(!options.hide_name) {
                //XXX use event instead or etc
                options.hide_name = $.storage.get('photos/list/hide_name',false);
            }

            var chunk = $.photos.photo_stream_cache.slice(offset, offset += chunk);
            var tmpl_prams = {
                photos: chunk,
                hash: $.photos.hash,
                last_login_time: $.photos.options.last_login_time,
                options:options,
                selected: !!$('#selector-menu').find('[data-action=select-photos]').data('checked'),
                view: ($.photos.list_template || '').replace('template-photo-', '')
            };
            target.append(tmpl($.photos.list_template, tmpl_prams));

            $('#content').trigger('photos_list_chunk_render', [tmpl_prams]);

            if(offset < length) {
                setTimeout(function() {
                    $.photos.renderPhotoListChunk(target, offset, options, callback);
                }, 100);
            } else {
                if (typeof callback == 'function') {
                    callback();
                }
                var string = options.string || $.photos.photo_list_string || false ;
                if (string) {
                    $('.lazyloading-wrapper').html(tmpl('template-photo-counter',{
                        count: length,
                        total_count: $.photos.total_count,
                        string: string
                    }));
                    $.photos.photo_list_string = string;
                }

            }

            $.Retina && $.photos.options.retina_2x_enabled && target.find('img').retina();
        },

        selectPhotoListView: function(view) {
            view = view.replace(/-view$/,'');
            $.photos.list_template = 'template-photo-'+view;
            var album = $.photos.getAlbum();
            if(album) {
                if(view == 'thumbs') {
                    $.storage.del('photos/list/view/'+album.id);
                } else {
                    $.storage.set('photos/list/view/'+album.id, view);
                }
            }
            //menu
            $.photos.menu.enable('list','.'+view+'-view-menu');
            $.photos.menu.disable('list',':not(.'+view+'-view-menu)');
            //$.photos.menu.disable('list',false,'select-photos');
            //list class
            var container = $('#photo-list');
            container.removeClass(container.attr('class'));
            switch(view) {
                case 'thumbs':{
                    container.addClass('thumbs li250px');
                    break;
                }
                case 'descriptions':{
                    container.addClass('p-descriptions');
                    break;
                }
            };
            //control
            $('#p-block .p-content-control li.selected').removeClass('selected');
            $('#p-block .p-content-control a[data-action="'+view+'-view"]').parents('li').addClass('selected');
        },

        onLoadPhotoList: function() {
            var album = $.photos.getAlbum();
            var view = null;
            if (album) {
                view = $.storage.get('photos/list/view/'+album.id);
                if((view != 'thumbs') && (view != 'descriptions')){
                    view = 'thumbs';
                }
                var li = $('#album-list li[rel=' + album.id + ']');
                li.find('.count:first').text(album.count);
                li.find('.count-new:first').text('');
                $('#album-list-container').trigger('uncollapse_section', li);

                // Album cover selection controller
                if (album.edit_rights) {
                    $('#photo-list').on('click', '.make-key-photo-link', function() {
                        $('#photo-list .key-photo').removeClass('key-photo');
                        $li = $(this).closest('li').addClass('key-photo');
                        album.key_photo_id = $li.data('photo-id');
                        $.post('?module=album&action=keyPhoto', { album_id: album.id, photo_id: album.key_photo_id });
                    });
                }
            }
            if(!view) {
                view = 'thumbs';
            }
            if (!$('#template-photo-'+view).length) {
                $("#content").empty();
                $.wa.setHash('#/');
                return;
            }
            $.photos.list_template = 'template-photo-'+view;

            $.photos.renderPhotoList();
            $.photos.fixRightToolbar();

            $.photos.setTitle($('#photo-list-name').text());
            $.photos.menu.init('list');
            $.photos.selectPhotoListView(view);

            $.Retina && $.photos.options.retina_2x_enabled && $('#album-thumbs-list img').retina();

            $('#p-block .p-content-control li a.album-view').click(function() {
                var new_view = $(this).attr('data-action');
                if(new_view != view) {
                    view = new_view.replace(/-view$/,'');;
                    $.photos.list_template = 'template-photo-'+view;
                    $.photos.renderPhotoList();
                    $.photos.selectPhotoListView(view);
                }
                return false;
            });

            $('#photo-list .p-description div').live('click', function() {
                var self = $(this),
                    height = $(this).height(),
                    placeholder = $_('add description');

                $(this).inlineEditable({
                    inputType: 'textarea',
                    makeReadableBy: ['esc'],
                    updateBy: ['ctrl+enter'],
                    placeholder: placeholder,
                    placeholderClass: 'gray',
                    minSize: {
                        height: 40
                    },
                    html: true,
                    allowEmpty: true,
                    beforeMakeEditable: function(input) {
                        var self = $(this),
                            full_text = self.parent().find('.full-description:first').html(),
                            size = self.css('font-size'),
                            line_height = self.css('line-height');

                        input.css('font-size', size).css('line-height', line_height);
                        self.html(full_text);

                        var width = Math.max(self.parents('li:first').find('img').width(), self.width());
                        input.width(width);

                        var button_id = this.id + '-button',
                            button = $('#' + button_id);
                        if (!button.length) {
                            input.after('<br><input type="button" id="' + button_id + '" value="' + $_('Save') + '"> <em class="hint" id="' + this.id + '-hint">Ctrl+Enter</em>');
                            $('#' + button_id).click(function() {
                                self.trigger('readable');
                            });
                        }
                        $('#'+this.id+'-hint').show();
                        button.show();
                    },
                    afterBackReadable: function(input, data) {
                        var button_id = this.id + '-button',
                            button = $('#' + button_id),
                            self = $(this),
                            value = $(input).val(),
                            href = self.parents('li:first').find('.p-image a').attr('href'),
                            match = /(\d+)[\/]*$/.exec(href),
                            id = null;

                        button.hide();
                        $('#'+this.id+'-hint').hide();
                        if (value) {
                            self.text(value.truncate(255));
                            self.parent().find('.full-description:first').html(value);
                        } else {
                            self.parent().find('.full-description:first').html('');
                        }
                        if (match && data.changed) {
                            id = match[1];
                            $.photos.saveField({
                                id: id,
                                type: 'photo',
                                name: 'description',
                                value: value,
                                fn: function() {}
                            });
                        }
                    },
                    hold: function() {
                        return !this.hasClass('editable');
                    }
                }).trigger('editable');

            });

            var album_name = $('#photo-list-name');
            if (album_name.hasClass('editable')) {
                album_name.inlineEditable({
                    minSize: {
                        width: 350
                    },
                    maxSize: {
                        width: 600
                    },
                    size: {
                        height: 30
                    },
                    afterBackReadable: function(input, data) {
                        if (!data.changed) {
                            return false;
                        }
                        var value = $(input).val(),
                            album = $.photos.getAlbum();
                        if (album) {
                            $.photos.saveField({
                                id: album.id,
                                type: 'album',
                                name: 'name',
                                value: value,
                                fn: function(r) {
                                    if (r.status == 'ok') {
                                        var album = r.data.album;

                                        // Update album name in sidebar
                                        $('#album-list li[rel='+album.id+'] > a > .album-name').html(album.name);

                                        // update album-list in upload-form
                                        $('#p-upload-step2 select[name=album_id] option[value='+album.id+']').html(album.name);

                                        // Update page title
                                        $.photos.setTitle(album.not_escaped_name);
                                    }
                                }
                            });
                        }
                    },
                    hold: function() {
                        return !this.hasClass('editable');
                    }
                });
            }
            var album_note = $('#photo-album-note');
            if (album_note.hasClass('editable')) {
                album_note.inlineEditable({
                    placeholder: '(' + $_('subtitle') + ')',
                    placeholderClass: 'gray',
                    minSize: {
                        width: 350
                    },
                    maxSize: {
                        width: 600
                    },
                    size: {
                        height: 22
                    },
                    afterBackReadable: function(input, data) {
                        if (!data.changed) {
                            return false;
                        }
                        var value = $(input).val(),
                            album = $.photos.getAlbum();
                        if (album) {
                            $.photos.saveField({
                                id: album.id,
                                type: 'album',
                                name: 'note',
                                value: value
                            });
                        }
                    },
                    hold: function() {
                        return !this.hasClass('editable');
                    }
                });
            }
            $('#share-menu-block, #organize-menu-block').bind('recount', function() {
                var cnt = $('#photo-list li.selected').length;
                if (cnt > 0) {
                    $('.count:first', $(this)).text(cnt).show();
                    //$.photos.menu.enable('list',false,'select-photos');
                } else {
                    $('.count:first', $(this)).hide();
                    //$.photos.menu.disable('list',false,'select-photos');
                }
            });

            $('#p-album-settings').click(function() {
                var album = $.photos.getAlbum(),
                    album_id = album ? album.id : 0,

                    showDialog = function () {
                        $("#album-settings-dialog").waDialog({
                            onSubmit: function(d) {
                                var f = $(this);
                                d.trigger('change_loading_status', true);
                                $.post(f.attr('action'), f.serializeArray(), function(r) {
                                    if (r.status == 'ok') {
                                        var total_count = r.data.total_count,
                                            status = r.data.status,
                                            groups = r.data.groups,
                                            count = r.data.count,
                                            offset = count;

                                        function process(data) {
                                            $.post('?module=album&action=savePhotosAccess', data, function() {
                                                data.offset += count;
                                                if (data.offset <= total_count) {
                                                    process(data);
                                                } else {
                                                    d.trigger('change_loading_status', false);
                                                    location.reload();
                                                }
                                            });
                                        }
                                        if (count < total_count) {
                                            process({
                                                id: album_id,
                                                status: status,
                                                groups: groups,
                                                count: count,
                                                offset: offset
                                            });
                                        } else {
                                            d.trigger('change_loading_status', false);
                                            location.reload();
                                        }
                                    } else if (r.status == 'fail') {
                                        d.trigger('change_loading_status', false);
                                        var errors = r.errors;
                                        for (var name in errors) {
                                            if (errors.hasOwnProperty(name)) {
                                                d.find('input[name=' + name + ']').addClass('error').parent().find('.errormsg').text(errors[name]);
                                            }
                                        }
                                    }
                                }, 'json');
                                return false;
                            }
                        });
                    };

                    //album-settings-dialog
                    var d = $('#album-settings-dialog-acceptor');
                    if (!d.length) {
                        d = $("<div id='album-settings-dialog-acceptor'></div>");
                        $("body").append(d);
                    }
                    d.load('?module=dialog&action=albumSettings&id=' + album_id, showDialog);
                    return false;
            });

            $('#p-album-delete').click(function() {
                var album = $.photos.getAlbum(),
                    album_id = album ? album.id : 0;

                $.photos.confirmDialog({
                    url: '?module=dialog&action=confirmDeleteAlbum&id=' + album_id,
                    onSubmit: function(d) {
                        var del_photos = parseInt($('input[name=delete-photos]:checked', d).val());
                        var album_ids;
                        var del_sub_album_ids = $('input[name=delete-offspring]:checked', d).val();
                        if (del_sub_album_ids) {
                            album_ids = del_sub_album_ids.split(',').reverse();
                            album_ids.push(album_id);
                        } else {
                            album_ids = [album_id];
                        }

                        d.trigger('close');
                        $.photos.setCover();
                        $.photos.deleteAllAlbums(album_ids, del_photos, function() {
                            $.photos.unsetCover();
                        });
                        return false;
                    }
                });

                return false;
            });

            // fix prevent browser-action
            $('#photo-list').find('.p-description textarea, .p-photo-details textarea, .p-photo-details input').live('select', function() {
                return false;
            });

            $.photos.hotkey_manager.set('rate');
            // if we go from some photo back to collection do not scroll top
            if ($.photos.hash != $.photos.photo_stream_cache.hash) {
                $.photos.scrollTop();
            }

            $('#content').trigger('photos_list_load');
        },

        loadPhoto: function (id) {
            // check case when jumping from photo-page of one collection
            // to photo-page of another collection by passing the going to page of collection (photo-list)
            if ($.photos.photo_stream_cache.hash != $.photos.hash) {
                $.photos.loadNewPhoto(id);
            } else {
                var photo = $.photos.photo_stream_cache.getById(id);
                if (!photo) {
                    photo = $.photos.photo_stack_cache.getById(id);
                    if (photo) {
                        $.photos.setTitle(photo.name_not_escaped);
                        $.photos.loadPhotoInStack(photo);
                    } else {
                        $.photos.loadNewPhoto(id);
                    }
                } else {
                    $.photos.setTitle(photo.name_not_escaped);
                    $.photos.loadPhotoCompletly(photo);
                }
            }
        },

        loadPhotoInStack: function f(photo)
        {
            $.photos.abortPrevLoading();
            /**
             * @hook
             */
            $.photos.hooks_manager.trigger('beforeLoadPhoto', photo);
            $.photos.photo_stack_cache.setCurrent(photo);
            var proper_thumb = $.photos._chooseProperThumb(photo);
            if (typeof proper_thumb.size === 'object' && proper_thumb.size) {
                $('#photo').width(proper_thumb.size.width).height(proper_thumb.size.height);
            }
            replaceImg(
                $('#photo'),
                photo.thumb.url + (photo.edit_datetime ? '?' + Date.parseISO(photo.edit_datetime) : ''),
                null
            );
            $.photos.setNextPhotoLink();
            var xhr = $.post('?module=photo&action=load', { id: photo.id, in_stack: 1 },
                function(r) {
                    var data = r.data,
                        photo = data.photo;
                    photo = $.photos.photo_stack_cache.updateById(photo.id, photo);
                    data.photo = photo;
                    $.photos.updateViewChildPhoto(data);
                    /**
                     * @hook
                     */
                    $.photos.hooks_manager.trigger('afterLoadPhoto', photo);
                    delete f.xhr;
                },
                'json'
            );
            f.xhr = xhr;
            $('#photo-name').html(photo.name);
        },

        updateViewChildPhoto: function(data)
        {
            var author = data.author,
                albums = data.albums,
                exif = data.exif,
                photo = data.photo;

            $.photos.renderPhotoImg(photo);
            $('#photo-author').html(tmpl('template-photo-author', {
                photo: photo,
                author: author
            }));
            $.photos.updatePhotoOriginalBlock(photo);
            $('#photo-exif').html(tmpl('template-photo-exif', {
                exif: exif
            }));
            $.photos.renderMap(exif.GPSLatitude, exif.GPSLongitude, photo.name);
            $('#photo-albums').html(tmpl('template-photo-albums', {
                albums: albums
            }));

            $.photos.initPhotoContentControlWidget({
                frontend_link_template: frontend_link_template,
                photo: photo
            });
        },

        loadNewPhoto: function method(id)
        {
            $.photos.initClearance();
            $.photos.widget.loupe.init();

            method.xhr_map = method.xhr_map || {};
            if (method.xhr_map[id]) {
                method.xhr_map[id].abort();
            }

            method.xhr_map[id] = $.post('?module=photo&action=load', { id: id, hash: $.photos.hash },
                function(r) {

                    method.xhr_map[id] = null;

                    var data = r.data,
                        photo = data.photo;
                    $.photos.renderViewPhoto(data);

                    // preloading next photo
                    var next_photo = $.photos.photo_stream_cache.getNext();
                    if (next_photo) {
                        $.photos.preloadPhoto(next_photo);
                    }

                    if (data.album) {
                        $.photos.setAlbum(data.album);
                    }
                    /**
                     * @hook
                     */
                    $.photos.hooks_manager.trigger('afterLoadPhoto', photo);
                },
            'json');
        },

        renderViewPhoto: function(data)
        {
            var photo = data.photo,
                author = data.author,
                exif = data.exif,
                stack = data.stack,
                albums = data.albums,
                album = data.album,
                hooks = data.hooks,
                frontend_link_template = data.frontend_link_template,
                photo_stream = data.photo_stream,
                in_collection = photo_stream.in_collection;

            var not_in_dynamic_album = false;
            if (album && !in_collection) {
                if (album.type == Album.TYPE_STATIC) {
                    $.photos.goToHash('album/' + album.id + '/');
                    return;
                } else {
                    not_in_dynamic_album = true;
                }
            }

            $.photos.setTitle(photo.name_not_escaped);
            $('#content').html(tmpl('template-p-block'));

            $.photos.initPhotoToolbar({
                photo: photo,
                author: author,
                exif: exif,
                stack: stack
            });
            $.photos.renderPhotoBlock({
                photo: photo,
                hash: $.photos.hash,
                albums: albums,
                hooks: hooks,
                frontend_link_template: frontend_link_template
            });
            $.photos.initPhotoWidgets({
                photo: photo,
                stack: stack,
                exif: exif,
                photo_stream: photo_stream,
                hash: $.photos.hash
            });
            if ($.photos.anchor) {
                $.photos.goToAnchor($.photos.anchor);
                $.photos.anchor = '';
            } else {
                $.photos.scrollTop();
            }

            $('#p-warning-not-in-album').hide();
            if (not_in_dynamic_album) {
                $('#p-warning-not-in-album').show();
                $.photos.setNextPhotoLink($.photos.photo_stream_cache.getCurrent());
            } else {
                $.photos.setNextPhotoLink();
            }

        },

        loadPhotoCompletly: function(photo)
        {
            $.photos.photo_stream_cache.setCurrent(photo);
            // make shift inside photo-stream
            $.photos.updatePhotoStreamWidget({
                shift: photo.id,
                fn: function() {
                    $.photos._loadPhotoCompletly(photo);
                }
            });
        },

        _loadPhotoCompletly: function f(photo)
        {
            $.photos.abortPrevLoading();
            /**
             * @hook
             */
            $.photos.hooks_manager.trigger('beforeLoadPhoto', photo);

            $('#p-warning-not-in-album').hide();

            $.photos.setNextPhotoLink();
            $.photos.updatePhotoName(photo.name);
            $.photos.updatePhotoDescription(photo.description);
            $.photos.updatePhotoRate(photo.rate);

            $('#photo-frontend-url').html(photo.url);
            // clean stack-stream
            $('#stack-stream').hide();
            // clean prev hooks results
            $('#photo-hook-bottom').html('');

            var is_preloaded = $.photos.isPhotoPreloaded(photo);
            if (is_preloaded) {
                $.photos.renderPhotoImg(photo);
            } else {
                var proper_thumb = $.photos._chooseProperThumb(photo);
                if (typeof proper_thumb.size === 'object' && proper_thumb.size) {
                    $('#photo').width(proper_thumb.size.width).height(proper_thumb.size.height);
                }
                replaceImg(
                    $('#photo'),
                    photo.thumb.url + (photo.edit_datetime ? '?' + Date.parseISO(photo.edit_datetime) : ''),
                    null
                );
            }
            $.photos.updatePhotoTags(photo.tags);

            // preload next photo
            var next_photo = $.photos.photo_stream_cache.getNext();
            if (next_photo) {
                $.photos.preloadPhoto(next_photo);
            }

            // load addition info about photo
            var xhr = $.post('?module=photo&action=load', { id: photo.id },
                function (r) {
                    if (r.status == 'ok') {
                        var data = r.data,
                            album = data.album,
                            photo = data.photo,
                            photo_stream = data.photo_stream,
                            in_collection = photo_stream.in_collection;

                        var not_in_dynamic_album = false;
                        if (album && !in_collection) {
                            if (album.type == Album.TYPE_STATIC) {
                                $.photos.goToHash('album/' + album.id + '/');
                                return;
                            } else {
                                not_in_dynamic_album = true;
                            }
                        }

                        if (not_in_dynamic_album) {
                            $('#p-warning-not-in-album').show();
                            $.photos.setNextPhotoLink($.photos.photo_stream_cache.getCurrent());
                        } else {
                            $.photos.setNextPhotoLink();
                        }

                        photo = $.photos.photo_stream_cache.updateById(photo.id, photo);
                        data.photo = photo;
                        $.photos.updateViewPhoto(data, is_preloaded);
                        /**
                         * @hook
                         */
                        $.photos.hooks_manager.trigger('afterLoadPhoto', photo);
                        delete f.xhr;
                    }
                },
                'json'
            );
            f.xhr = xhr;
        },

        updateViewPhoto: function(data, is_preloaded)
        {
            var author = data.author,
                albums = data.albums,
                exif = data.exif,
                frontend_link_template = data.frontend_link_template,
                hooks = data.hooks,
                stack = data.stack,
                photo = data.photo;

            if (!is_preloaded) {
                $.photos.renderPhotoImg(photo);
            }

            // update toolbars menus
            $.photos.updateViewPhotoMenu((photo.parent_id != 0 || photo.stack_count > 0), photo.edit_rights);

            $.photos.updatePhotoName(photo.name, photo.edit_rights);
            $.photos.updatePhotoDescription(photo.description, photo.edit_rights);
            $.photos.updatePhotoRate(photo.rate, photo.edit_rights);
            $.photos.updatePhotoTags(photo.tags);

            // update photo's author info
            $('#photo-author').html(tmpl('template-photo-author', {
                photo: photo,
                author: author
            }));

            $.photos.updatePhotoOriginalBlock(photo);

            // update-exif
            $('#photo-exif').html(tmpl('template-photo-exif', {
                exif: exif
            }));
            $.photos.renderMap(exif.GPSLatitude, exif.GPSLongitude, photo.name);
            // update albums
            $('#photo-albums').html(tmpl('template-photo-albums', {
                albums: albums
            }));

            $.photos.initPhotoContentControlWidget({
                frontend_link_template: frontend_link_template,
                photo: photo
            });

            // update stack if it is necessary
            if (stack) {
                // show and init photo-stack widget
                $('#stack-stream').html(tmpl('template-photo-stack', {
                    stack: stack,
                    photo_id: photo.id,
                    hash: $.photos.hash
                })).show();
                $.photos.photo_stack_cache.set(stack);
                $.photos.initPhotoStackWidget();
            } else {
                // clear previous stack
                $.photos.photo_stack_cache.clear();
            }

            // insert hooks
            var html_hooks = '';
            for (var plugin in hooks.backend_photo) {
                if (hooks.backend_photo[plugin].bottom) {
                    html_hooks += hooks.backend_photo[plugin].bottom;
                }
            }
            $('#photo-hook-bottom').html(html_hooks);

            html_hooks = '';
            for (var plugin in hooks.backend_photo) {
                if (hooks.backend_photo[plugin].after_rate) {
                    html_hooks += hooks.backend_photo[plugin].after_rate;
                }
            }
            if (html_hooks) {
                $('#photo-rate').nextAll().remove();
                $('#photo-rate').after(html_hooks);
            }

            // go by anchor
            if ($.photos.anchor) {
                $.photos.goToAnchor($.photos.anchor);
                $.photos.anchor = '';
            }
        },

        renderPhotoImg: function(photo) {
            var proper_thumb = $.photos._chooseProperThumb(photo);
            replaceImg(
                $('#photo'),
                proper_thumb.url + (photo.edit_datetime ? '?' + Date.parseISO(photo.edit_datetime) : ''),
                function() {
                    if (typeof proper_thumb.size === 'object' && proper_thumb.size) {
                        $(this).width(proper_thumb.size.width).height(proper_thumb.size.height);
                    }
                    /**
                     * @hook
                     */
                    $.photos.hooks_manager.trigger('afterRenderImg', this, photo, proper_thumb);
                }
            );
        },

        updateViewPhotoMenu: function(stack, edit)
        {
            // update toolbars menus
            if (stack) {
                $.photos.menu.enable('photo','#photo-organize-menu','unstack');
            } else {
                $.photos.menu.disable('photo','#photo-organize-menu','unstack');
            }
            if (edit) {
                $.photos.menu.enable('photo','#photo-organize-menu');
                $.photos.menu.enable('photo','#edit-menu');
                $('#photo-tags').parent().show();
            } else {
                $.photos.menu.disable('photo','#photo-organize-menu');
                $.photos.menu.disable('photo','#edit-menu');
                $('#photo-tags').parent().hide();
            }
        },

        preloadPhoto: function(photo) {
            var preload_photo_img = $('#preload-photo');
            preload_photo_img.attr('data-photo-id', '');
            replaceImg(
                preload_photo_img,
                photo.thumb_big.url,
                function() {
                    preload_photo_img.attr('data-photo-id', photo.id);
                }
            );
        },

        isPhotoPreloaded: function(photo) {
            return $('#preload-photo').attr('data-photo-id') == photo.id;
        },

        abortPrevLoading: function() {
            if (typeof $.photos._loadPhotoCompletly.xhr === 'object' && typeof $.photos._loadPhotoCompletly.xhr.abort === 'function')
            {
                $.photos._loadPhotoCompletly.xhr.abort();
                /**
                 * @hook
                 */
                $.photos.hooks_manager.trigger('onAbortPrevLoading');
            }
            if (typeof $.photos.loadPhotoInStack.xhr === 'object' && typeof $.photos.loadPhotoInStack.xhr.abort === 'function')
            {
                $.photos.loadPhotoInStack.xhr.abort();
                /**
                 * @hook
                 */
                $.photos.hooks_manager.trigger('onAbortPrevLoading');
            }
        },

        updateThumbRate: function(li, rate) {
            var rate_item = li.find('.p-details .p-rate');
            rate = Math.round(rate * 2) / 2;
            if (!rate) {
                rate_item.hide();
            } else {
                var stars = rate_item.find('i').filter(function() {
                    return ~this.className.indexOf('star');
                }).removeClass('star star-empty star-half').addClass('star-empty');
                stars.each(function(i) {
                    i += 1;
                    if (i > rate) {
                        if (i - rate == 0.5) {
                            $(this).removeClass('star-empty').addClass('star-half');
                        }
                    } else {
                        $(this).removeClass('star-empty').addClass('star');
                    }
                });
                rate_item.show();
            }
        },
        showManageAccessDialog: function(params, onSubmit) {
            var showDialog = function () {
                $("#manage-access-dialog").waDialog({
                    'onSubmit': onSubmit
                });
            };
            //manage-access-dialog
            var d = $('#manage-access-dialog-acceptor'),
                url = '?module=dialog&action=manageAccess';
            if (!d.length) {
                d = $("<div id='manage-access-dialog-acceptor'></div>");
                $("body").append(d);
            }
            if (params) {
                if ($.isArray(params)) {
                    for (var i = 0, n = params.length; i < n; ++i) {
                        var param = params[i];
                        url += '&' + param.name + '=' + param.value;
                    }
                } else {
                    url += '&' + params;
                }
            }
            d.load(url, showDialog);
        },

        initPhotoNameWidget: function(edit_status) {
            edit_status = typeof edit_status === 'undefined' ? false : edit_status;
            $('#photo-name').inlineEditable({
                placeholder: $('#photo-name').text() ? null : $_('Edit title...'),
                placeholderClass: 'gray',
                afterBackReadable: function(input, e) {
                    if (!e.changed) {
                        return;
                    }
                    var value = $(input).val();
                    if (!value.length) {
                        return;
                    }
                    $.photos.saveField({
                        id: $.photos.getPhotoId(),
                        type: 'photo',
                        name: 'name',
                        value: value,
                        fn: function(r) {
                            $('#photo-name').inlineEditable('setOption', {
                                placeholder: null
                            });
                            if (r.status == 'ok') {
                                $.photos.setTitle(r.data.value);
                            }
                        }
                    });
                },
                minSize: {
                    width: 350
                },
                maxSize: {
                    width: 600
                },
                size: {
                    height: 30
                },
                hold: function() {
                    return !this.hasClass('editable');
                }
            });
            $.photos.updatePhotoName(edit_status);
        },

        initPhotoDescriptionWidget: function(edit_status) {
            edit_status = typeof edit_status === 'undefined' ? false : edit_status;
            $('#photo-description').inlineEditable({
                placeholder: $_('add description'),
                placeholderClass: 'gray',
                makeReadableBy: ['esc'],
                updateBy: ['ctrl+enter'],
                html: true,
                allowEmpty: true,
                beforeMakeEditable: function(input) {
                    var button = $('#photo-description-save');
                    if (!button.length) {
                        var widget = $(this);
                        input.after('<br><input type="button" id="photo-description-save" value="' + $_('Save') + '"> <em class="hint" id="' + this.id + '-hint">Ctrl+Enter</em>');
                        button = $('#photo-description-save');
                        button.click(function() {
                            widget.trigger('readable');
                        });
                    }
                    $('#'+this.id+'-hint').show();
                    button.show().prev('br').show();
                },
                afterBackReadable: function(input, status) {
                    $('#photo-description-save').hide().prev('br').hide();
                    $('#'+this.id+'-hint').hide();
                    if (!status.changed) {
                        return false;
                    };
                    var value = $(input).val();
                    // when parent in stack save this value for all photos in stack
                    $.photos.saveField({
                        id: $.photos.photo_stream_cache.getCurrent().id,
                        type: 'photo',
                        name: 'description',
                        value: $(input).val(),
                        fn: function() {}
                    });
                },
                minSize: {
                    height: 50,
                    width: 600
                },
                size: {
                    width: $('#photo').width()
                },
                inputType: 'textarea',
                editLink: '#photo-description-edit-link',
                hold: function() {
                    return !this.hasClass('editable');
                }
            });
            $.photos.updatePhotoDescription(edit_status);
        },

        initPhotoRateWidget: function(edit_status) {
            edit_status = typeof edit_status === 'undefined' ? false : edit_status;
            var update = function(rate) {
                // when parent in stack save this value for all photos in stacks
                $.photos.saveField($.photos.photo_stream_cache.getCurrent().id, 'rate', rate,
                    function (r) {
                        if (r.status == 'ok' && r.data.count) {
                            $('#rated-count').text(r.data.count > 0 ? r.data.count : '');
                        }
                    }
                );
            };
            var photo_rate = $('#photo-rate');
            photo_rate.rateWidget({
                onUpdate: update,
                hold: function() {
                    return this.hasClass('hold');
                }
            });
            $.photos.updatePhotoRate(edit_status);
        },

        initPhotoStackWidget: function(data) {
            if (typeof data === 'object' && data) {
                $('#stack-stream').html(tmpl('template-photo-stack', data)).show();
            }
            //template-photo-stack
            var href = $('#stack-stream li.dr:first a').attr('href');
            var match = /(\d+)[\/]*$/.exec(href);
            if (match) {
                parent_id = match[1];
            }
            $('#stack-stream').data('parent_id', parent_id);
            $("#stack-stream").sortable({
                distance: 5,
                helper: 'clone',
                items: 'li.dr',
                opacity: 0.75,
                tolerance: 'pointer',
                start: function() {
                    document.ondragstart = function() { return false; }
                },
                stop: function (event, ui) {
                    document.ondragstart = null;
                    var li = $(ui.item);
                    var id = parseInt(li.attr('data-photo-id'));
                    var next = li.next(),
                        before_id = null;
                    if (next.length) {
                        before_id = parseInt(next.attr('data-photo-id'));
                    }
                    $.post('?module=stack&action=photoMove',
                        {
                            id: id,
                            before_id: before_id
                        },
                        function (response) {
                            if (response.status == 'ok') {
                                if (response.data.stack) {
                                    var stack = response.data.stack;
                                    var prev_parent_id = $('#stack-stream').data('parent_id');
                                    var new_parent = stack[0];
                                    var new_parent_id = new_parent.id;
                                    // if stack parent has changed than we need update photo-stream
                                    // (but before it we need update photo_stream_cache)
                                    if (prev_parent_id != new_parent_id) {
                                        var prev_parent = $.photos.photo_stream_cache.getById(prev_parent_id);
                                        new_parent.tags = prev_parent.tags;
                                        $.photos.photo_stream_cache.replace(prev_parent, new_parent);
                                        // Say stack-stream that we have new parent
                                        $('#stack-stream').data('parent_id', new_parent_id);
                                        // update photo-stream visually
                                        $.photos.updatePhotoStreamWidget({
                                            current_photo: new_parent
                                        });
                                    }
                                }
                            }
                        },
                    "json");
            }});
            if ($('#stack-stream').data('inited')) {
                return false;
            }
            $('#stack-stream li.dr').live('click', function() {
                $('#stack-stream li.dr.selected').removeClass('selected');
                $(this).addClass('selected');
            });
            $('#stack-stream').data('inited', true);
        },

        initPhotoTagsWidget: function(tags) {
            var tags_input = $('#photo-tags'),
                default_text = $_('add a tag');

            if (typeof tags !== 'undefined') {
                if (typeof tags === 'object' && tags) {
                    tags = $.photos.joinObject(tags, ',');
                }
                tags_input.importTags(tags);
            }

            tags_input.data('current_value', tags_input.val());

            var onUserChange = function () {
                if (tags_input.data('current_value') === tags_input.val()) {
                    return;
                }
                tags_input.data('current_value', tags_input.val());
                $('#photo-save-tags-status').html('<i style="vertical-align: middle" class="icon16 yes"></i>'+$_('Saving')).fadeIn('slow');
                $.photos.assignTags({
                    photo_id: $.photos.getPhotoId(),
                    tags: $('#photo-tags').val(),
                    fn: function() {
                        $('#photo-save-tags-status').html('<i style="vertical-align: middle" class="icon16 yes"></i>'+$_('Saved')).fadeOut('slow');
                    },
                    onDeniedExist: function() {
                        alert($_("You don't have sufficient access rights"));
                    }
                });
            };

            try {
                tags_input.tagsInput({
                    autocomplete_url: '?module=tag&action=list',
                    height: 120,
                    width: 150,
                    defaultText: default_text,
                    onChange: function () {
                        // this event calls every time list of tags is changed, event by importTags, so don't use it for ajax!
                    },
                    onAddTag: function () {
                        onUserChange();
                    },
                    onRemoveTag: function () {
                        onUserChange();
                    }
                });
            } catch (e) {
                ;
            }
        },

        initPhotoContentControlWidget: function(data) {
            if (typeof data === 'object' && data) {
                $('#photo-content-control').html(tmpl('template-photo-content-control', data));
                edit_rights = data.photo.edit_rights;
            } else {
                edit_rights = data;
            }
            edit_rights = typeof edit_rights === 'undefined' ? false : edit_rights;
            var frontend_url = $('#photo-frontend-url'),
                new_window = frontend_url.parents('li:first').find('i.new-window'),
                span = $('#photo-frontend-link').nextAll('span.slash:first');
            if (frontend_url.length) {
                frontend_url.inlineEditable({
                    inputType: 'input',
                    editLink: '#photo-frontend-url-edit-link',
                    editOnItself: false,
                    minSize: {
                        width: 100
                    },
                    beforeMakeEditable: function(input) {
                        var self = $(this),
                            text = self.text().replace(/\/$/, '');
                        self.text(text);
                        span.show();
                        new_window.hide();
                        input.removeClass('error');
                        $('#photo-content-control').find('.errormsg').text('').hide();
                    },
                    beforeBackReadable: function(input, data) {
                        var self = $(this),
                            text = self.text() + '/',
                            photo_id = $.photos.getPhotoId(),
                            value = $(input).val();

                        function restoreReadableView() {
                            self.text(text);
                            span.hide();
                            new_window.show();
                            $(input).removeClass('error');
                            $('#photo-content-control').find('.errormsg').text('').hide();
                        }
                        if (!data.changed) {
                            restoreReadableView();
                            return;
                        }
                        $.photos.saveField(photo_id, 'url', value, function(r) {
                            if (r.status == 'ok') {
                                var http = $('#photo-frontend-link').text();
                                $('#photo-frontend-link').attr('href', http);
                                restoreReadableView();
                                frontend_url.trigger('readable', true);
                            } else if (r.status == 'fail') {
                                $(input).addClass('error');
                                $('#photo-content-control').find('.errormsg').text(r.errors.url).show();
                            }
                        });
                        return false;
                    },
                    hold: function() {
                        return this.hasClass('hold');
                    }
                });
            }
            $.photos.updatePhotoFrontendUrl(edit_rights);
        },

        renderMap: function(lat, lng, title) {
            if (lat && lng) {
                $('#photo-map').show();
                var latLng = new google.maps.LatLng(lat, lng),
                    options = {
                        zoom: 11,
                        center: latLng,
                        mapTypeId: google.maps.MapTypeId.ROADMAP,
                        disableDefaultUI: true,
                        zoomControlOptions: {
                            position: google.maps.ControlPosition.TOP_LEFT,
                            style: google.maps.ZoomControlStyle.SMALL
                        }
                    };
                map = new google.maps.Map($('#photo-map').get(0), options);
                var marker = new google.maps.Marker({
                    position: latLng,
                    map: map,
                    title: title
                });
            } else {
                $('#photo-map').hide();
            }
        },

        joinObject: function(obj, glue) {
            var str = '';
            var i = 0;
            glue = glue || '';
            for (var k in obj) {
                if (!obj.hasOwnProperty(k)) {
                    continue;
                }
                if (i++ > 0) {
                   str += glue;
                }
                str += obj[k];
            }
            return str;
        },

        initPhotoStreamWidget: function(data) {
            var photos = data.photos;

            photos = [null].concat(photos, [null]);
            $('#photo-stream').html(tmpl('template-photo-stream', {
                photos: photos,
                current_photo: data.current_photo || null,
                hash: $.photos.hash
            }));
            var max_availabe_rest_count = 15,
                photo_stream = 'ul',
                duration = 400,
                is_end = false,
                is_start = false;

            $('#photo-stream ul.photostream:first').photoStreamSlider({
                backwardLink: '#photo-stream .rewind',
                forwardLink: '#photo-stream .ff',
                photoStream: photo_stream,
                duration: duration,
                onForward: function f() {
                    if (is_end) {
                        return;
                    }
                    var self = this,
                        list = self.find(photo_stream).find('li:not(.dummy)'),
                        visible_list = list.filter('.visible'),
                        last = list.filter(':last'),
                        last_visible = visible_list.filter(':last'),
                        next = last_visible.nextAll(),
                        next_count = next.length;
                    if (next_count < max_availabe_rest_count) {
                        if (typeof f.xhr == 'object') {
                            return;
                        }
                        var photo_id = last.attr('data-photo-id');
                        f.xhr = $.post('?module=photo&action=loadList',
                            {
                                id: photo_id,
                                direction: 1,
                                hash: $.photos.hash
                            },
                            function(r) {
                                if (r.status == 'ok') {
                                    var photos = r.data.photos;
                                    if (photos.length > 0) {
                                        $.photos.photo_stream_cache.append(photos);
                                    } else {
                                        is_end = true;
                                        return;
                                    }
                                    photos.push(null);  // one dummy item at the end
                                    self.trigger('append', tmpl('template-photo-stream-list', {
                                        photos: photos
                                    }));
                                }
                                delete f.xhr;
                            },
                        'json');
                    }
                },
                onBackward: function f() {
                    if (is_start) {
                        return;
                    }
                    var self = this,
                        list = self.find(photo_stream).find('li:not(.dummy)'),
                        visible_list = list.filter('.visible'),
                        first = list.filter(':first'),
                        first_visible = visible_list.filter(':first'),
                        prev = first_visible.prevAll(),
                        prev_count = prev.length;
                    if (prev_count < max_availabe_rest_count) {
                        if (typeof f.xhr == 'object') {
                            return;
                        }
                        var photo_id = first.attr('data-photo-id');
                        f.xhr = $.post('?module=photo&action=loadList',
                            {
                                id: photo_id,
                                direction: -1,
                                hash: $.photos.hash
                            },
                            function(r) {
                                if (r.status == 'ok') {
                                    var photos = r.data.photos;
                                    if (photos.length > 0) {
                                        $.photos.photo_stream_cache.prepend(photos);
                                    } else {
                                        is_start = true;
                                        return;
                                    }
                                    photos.unshift(null);  // one dummy item at the start
                                    self.trigger('prepend', tmpl('template-photo-stream-list', {
                                        photos: photos
                                    }));
                                }
                                delete f.xhr;
                            },
                        'json');
                    }
                }
            });
        },

        updatePhotoStreamWidget: function(data) {
            // update current photo
            var photo_stream = $('#photo-stream ul.photostream:first');
            if (data.current_photo) {
                var li = photo_stream.find('li.selected'),
                    current_photo = data.current_photo;
                li.attr('data-photo-id', current_photo.id);
                li.find('a').attr('href', '#/photo/'+current_photo.id);
                li.find('img').attr('src', current_photo.thumb_crop.url);
            }
            // make shift in photo-stream
            if (data.shift) {
                photo_stream.find('li.selected').removeClass('selected');
                photo_stream.find('li[data-photo-id=' + data.shift + ']').addClass('selected');
                var fn = data.fn || function() {};
                photo_stream.trigger('home', [fn, !$.photos.shift_next]);
                $.photos.shift_next = false;
            }
        },

        updatePhotoName: function(name, edit_status) {
            if (typeof name === 'boolean' || typeof name === 'undefined') {
                edit_status = name;
                name = null;
            }
            var photo_name = $('#photo-name');
            if (name !== null) {
                photo_name.html(name);
            }
            if (edit_status) {
                photo_name.addClass('editable');
            } else {
                photo_name.removeClass('editable');
            }
        },

        updatePhotoDescription: function(description, edit_status) {
            if (typeof description === 'boolean' || typeof description === 'undefined') {
                edit_status = description;
                description = $('#photo-description').html();
            }
            var photo_description = $('#photo-description'),
                placeholder = null,
                placeholder_text = $_('add description');

            if (edit_status) {
                photo_description.addClass('editable');
                //placeholder = description && description !== placeholder_text ? null : placeholder_text;
                placeholder = placeholder_text;
                $('#photo-description-edit-link').show();
            } else {
                placeholder = null;
                description = description !== placeholder_text ? description : '';
                photo_description.removeClass('editable');
                $('#photo-description-edit-link').hide();
            }
            photo_description.inlineEditable('setOption', {
                placeholder: placeholder
            }).html(description).trigger('placeholder', !!placeholder);
        },

        updatePhotoRate: function(rate, edit_status) {
            if (typeof rate === 'boolean' || typeof rate === 'undefined') {
                edit_status = rate;
                rate = null;
            }
            var photo_rate = $('#photo-rate');
            if (rate !== null) {
                photo_rate.rateWidget('setOption', 'rate', rate);
            }
            if (edit_status) {
                photo_rate.removeClass('hold').show();
            } else {
                photo_rate.addClass('hold');
                rate = photo_rate.rateWidget('getOption', 'rate');
                if (!rate) {
                    photo_rate.hide();
                }
            }
        },

        updatePhotoTags: function(tags)
        {
            var tags_input = $('#photo-tags');
            tags_input.data('current_value', tags_input.val());
            if (typeof tags !== 'undefined') {
                if (typeof tags === 'object' && tags) {
                    tags = $.photos.joinObject(tags, ',');
                }
                //#
                tags_input.importTags(tags);
            }
        },

        updatePhotoFrontendUrl: function(edit_status) {
            var frontend_url = $('#photo-frontend-url');
            if (edit_status) {
                frontend_url.removeClass('hold');
                $('#photo-frontend-url-edit-link').show();
            } else {
                frontend_url.addClass('hold');
                $('#photo-frontend-url-edit-link').hide();
            }
        },

        updatePhotoOriginalBlock: function(photo) {
            $('#photo-original').html(tmpl('template-photo-original', {
                photo: photo
            }));
        },

        initPhotoToolbar: function(data)
        {
            $('#p-toolbar').html(
                tmpl('template-photo-toolbar', data)
            ).addClass('rendered');
            $.photos.menu.init('photo');

            // init only once
            var pop_tags = $('#photos-photo-popular-tags');
            if (!pop_tags.data('inited')) {
                pop_tags.off('click.photos', 'a').
                        on('click.photos', 'a', function() {
                            var name = $(this).text();
                            var tags_input = $('#photo-tags')
                            tags_input.removeTag(name);
                            tags_input.addTag(name);
                }).data('inited', true);
            }

            $.photos.updateViewPhotoMenu(($.isArray(data.stack) && data.stack.length), data.photo.edit_rights);
        },

        renderPhotoBlock: function(data)
        {
            var photo = data.photo,
                proper_thumb = $.photos._chooseProperThumb(photo),
                size = photo.thumb.size;

            if (typeof proper_thumb.size === 'object' && proper_thumb.size) {
                // for gradual load image effect we first render image with thumb.url but with proper_thumb sizes
                // and than load with proper_thumb.url
                photo.thumb.size = {
                    width: proper_thumb.size.width,
                    height: proper_thumb.size.height
                };
            }
            $("#p-block").html(tmpl('template-photo', data)).addClass('rendered');

            if (typeof size === 'object' && size) {
                // restore real sizes for this thumb
                photo.thumb.size = {
                    width: size.width,
                    height: size.height
                };
            }
            replaceImg($('#photo'),
                proper_thumb.url + (photo.edit_datetime ? '?' + Date.parseISO(photo.edit_datetime) : ''),
                function() {
                    /**
                     * @hook
                     */
                    $.photos.hooks_manager.trigger('afterRenderImg', this, photo, proper_thumb);
                }
            );
        },

        initPhotoWidgets: function(data)
        {
            var photo = data.photo,
                exif = data.exif,
                stack = data.stack,
                photo_stream = data.photo_stream,
                hash = $.photos.hash;

            $.photos.initPhotoNameWidget(photo.edit_rights);
            $.photos.initPhotoDescriptionWidget(photo.edit_rights);
            $.photos.initPhotoRateWidget(photo.edit_rights);
            $.photos.initPhotoTagsWidget(photo.tags);
            $.photos.initPhotoContentControlWidget(photo.edit_rights);
            $.photos.hotkey_manager.set();

            // map
            $.photos.renderMap(exif.GPSLatitude, exif.GPSLongitude, photo.name);
            // stack
            if ($.isArray(stack) && stack.length) {
                $.photos.photo_stack_cache.set(stack).setCurrentById(photo.id);
                $.photos.initPhotoStackWidget({
                    stack: stack,
                    photo_id: photo.id,
                    hash: $.photos.hash
                });
            }

            var stream = $.photos.photo_stream_cache;
            stream.hash = hash;
            stream.set(photo_stream.photos).setCurrentById(photo_stream.current_photo_id);
            // visually update photo-stream
            $.photos.initPhotoStreamWidget({
                photos: photo_stream.photos,
                current_photo: stream.getCurrent()
            });

            // Go to prev or next photo when user clicks on an arrow over the photo
            $('#p-block .p-one-photo > .p-image-nav').click(function() {
                if ($(this).hasClass('p-rewind')) {
                    var prev = $.photos.photo_stream_cache.getPrev();
                    if (prev) {
                        $.photos.goToHash($.photos.getHashByPhotoId(prev.id), false);
                        $.photos.shift_next = true;
                    }
                } else {
                    var next = $.photos.photo_stream_cache.getNext();
                    if (next) {
                        $.photos.goToHash($.photos.getHashByPhotoId(next.id), false);
                        $.photos.shift_next = true;
                    }
                }
            });
        },

        _chooseProperThumb: function(photo)
        {
            var thumb_big = photo.thumb_big,
                thumb_middle = photo.thumb_middle,
                proper_thumb,
                block_width = $('#p-block').width();

            proper_thumb = thumb_big;
            if (typeof thumb_big.size === 'object' && thumb_big.size) {
                if (parseInt(thumb_big.size.height, 10) > parseInt(thumb_middle.bound.height, 10) && // is vertical photo
                        parseInt(thumb_big.size.height, 10) > $(window).height())
                {
                    proper_thumb = thumb_middle;
                }
                if (parseInt(proper_thumb.size.width, 10) > block_width) {
                    proper_thumb.size.height = Math.round(block_width/parseInt(proper_thumb.size.width, 10)*parseInt(proper_thumb.size.height, 10));
                    proper_thumb.size.width = block_width;
                }
            } else {
                proper_thumb.size = {
                    width: block_width,
                    height: ''
                };
            }
            if (typeof proper_thumb.size !== 'object' || !proper_thumb.size) {
                proper_thumb.size = {
                    widht: block_width,
                    height: ''
                };
            }
            return proper_thumb;
        },

        setNextPhotoLink: function(next) {
            // set a-link to next
            var a = $('#photo').parents('a:first');
            next = next ? next : $.photos.photo_stream_cache.getNext();
            if (next) {
                a.attr('title', $_('Next →'));
                a.attr('href', '#' + $.photos.hash + '/photo/' + next.id + '/');
            } else {
                a.attr('title', '');
                a.attr('href', 'javascript:void(0);');
            }
        },

        setTitle: function(title) {
            if (title) {
                document.title = title + $.photos.options.title_suffix;
            }
        },

        ignore_scrolltop: false,
        scrollTop: function() {
            if ($.photos.ignore_scrolltop) {
                $.photos.ignore_scrolltop = false;
            } else {
                $(document).scrollTop(0);
            }
        },

        load: function (url, data, callback,wrapper) {
            var target = $('#content');
            if (typeof data == 'function') {
                wrapper = callback||null;
            }
            if(wrapper) {
                target.empty().append(wrapper);
                target = target.find(':last-child');
            }

            if (typeof data == 'function') {
                target.load(url, data);
            } else {
                target.load(url, data, callback);
            }
        },
        setCover: function() {
            $.photos.centralizeLoadingIcon();
            $('#cover').show();
        },
        unsetCover: function() {
            $('#cover').hide();
        },
        centralizeLoadingIcon: function() {
            var cover = $('#cover'),
                icon = $('#cover .loading');

            var width = cover.width(), w = icon.width(),
                height = cover.height(), h = icon.height();

            $('.loading').css({
                position: 'absolute',
                left: parseInt((width - w) / 2) + 'px',
                top:  parseInt((height - h) / 2) + 'px'
            });
        },

        saveField: function(id, name, value, fn) {
            var type = 'photo';
            if (arguments.length == 1) {
                var options = id;
                options = $.extend({
                    type: type,
                    fn: function() {}
                }, options);
                var id = options.id,
                    name = options.name,
                    value = options.value,
                    fn = options.fn;
                type = options.type;
            }
            if (!~['photo', 'album'].indexOf(type)) {
                throw "Unknown type";
            }
            if (!$.isArray(id)) {
                id = [{name: 'id[]', value: parseInt(id)}];
            }
            var data = [].concat(id, {
                name: 'name',
                value: name
            }, {
                name: 'value',
                value: value
            });
            $.post('?module=' + type + '&action=saveField', data,
                function(r) {
                    if (r.status == 'ok') {
                        var info = {};
                        info[name] = value;
                        if (r.data.parent_id) {
                            id = r.data.parent_id;
                        }
                        $.photos._updateStreamCache(id, info);
                        if (typeof fn == 'function') {
                            fn(r);
                        }
                    } else if (r.status == 'fail') {
                        if (typeof fn == 'function') {
                            fn(r);
                        }
                    }
                },
            'json');
        },

        saveFields: function(data,success, fail) {
            var type = 'photo'
            $.post('?module=' + type + '&action=saveFields', {'data':data},
                function(response) {
                    if (response.status == 'ok') {
                        for(var i in response.data.update) {
                            var id = response.data.update[i]['id'];
                            if (!$.isArray(id)) {
                                id = [id];
                            }
                            var info = response.data.update[i]['data'];
                            for (var i = 0, n = id.length; i < n; ++i) {
                                var updated_info = $.photos.photo_stream_cache.updateById(id[i], info);
                            }
                        }
                    }
                   //callback
                },
            'json');
        },

        _updateStreamCache: function(photo_ids, info) {
            if (!$.isArray(photo_ids)) {
                photo_ids = [{value: photo_ids}];
            }
            for (var i = 0, n = photo_ids.length; i < n; ++i) {
                $.photos.photo_stream_cache.updateById(photo_ids[i].value, info);
            }
        },

        restoreOriginal: function(id, fn) {
            fn = fn || function() {};
            $.post('?module=photo&action=restore', { id: id },
                function(r) {
                    if (r.status == 'ok') {
                        var photo = r.data.photo;
                        if (photo.parent_id == 0) {
                            photo = $.photos.photo_stream_cache.updateById(id, photo);
                        } else {
                            photo = $.photos.photo_stack_cache.updateById(id, photo);
                        }
                        $.photos.updatePhotoOriginalBlock(photo);
                        $.photos.updatePhotoImgs(photo, fn);
                    }
                },
            'json');
        },

        rotate: function(id, direction, fn) {
            fn = fn || function() {};
            $.post('?module=photo&action=rotate', { id: id, direction: direction },
                function(r) {
                    if (r.status == 'ok') {
                        var photo = r.data.photo;
                        if (photo.parent_id == 0) {
                            photo = $.photos.photo_stream_cache.updateById(id, photo);
                        } else {
                            photo = $.photos.photo_stack_cache.updateById(id, photo);
                        }
                        $.photos.updatePhotoOriginalBlock(photo);
                        $.photos.updatePhotoImgs(photo, fn);
                    }
                },
            'json').error(function(xhr) {
                $.photos.showServerError(xhr.responseText);
                if (typeof fn == 'function') {
                    fn();
                }
            });
        },

        updatePhotoImgs: function(photo, fn) {
            var proper_thumb = $.photos._chooseProperThumb(photo),
                salt = photo.edit_datetime ? '?' + Date.parseISO(photo.edit_datetime) : '';
            replaceImg(
                $('#photo'),
                proper_thumb.url + salt,
                function() {
                    $('#photo').width(proper_thumb.size.width).height(proper_thumb.size.height);
                    $('#photo-stream .selected img, #stack-stream .selected img').each(function() {
                        var self = $(this);
                        if (self.hasClass('thumb')) {
                            self.attr('src', photo.thumb.url + salt);
                        } else {
                            self.attr('src', photo.thumb_crop.url + salt);
                        }
                    });
                    if (typeof fn == 'function') {
                        fn();
                    }
                    /**
                     * @hook
                     */
                    $.photos.hooks_manager.trigger('afterRenderImg', this, photo, proper_thumb);
                }
            );
        },

        deletePhotos: function(photo_id, fn) {
            var original_photo_id = photo_id;

            $.post('?module=photo&action=resolution', $.isArray(photo_id) ? photo_id : { photo_id: photo_id },
                function(r) {
                    if (r.status == 'ok') {
                        var photo_id = r.data.photo_id,
                            data = [],
                            denied_photo_id = [];

                        // serializeArray
                        for (var i = 0, n = photo_id.length; i < n; ++i) {
                            data.push({
                                name: 'photo_id[]', value: photo_id[i]
                            });
                        }
                        $.photos.massPost({
                            photo_id: data,
                            url: '?module=photo&action=delete',
                            dataType: 'json',
                            data: { photos_length: $.isArray(original_photo_id) ? original_photo_id.length : 1 },
                            success: function(r, data) {
                                if (r.status == 'ok') {
                                    denied_photo_id = denied_photo_id.concat(r.data.denied_photo_id);
                                    for (var i = 0, n = denied_photo_id.length; i < n; ++i) {
                                        data.push({
                                            name: 'denied_photo_id[]', value: denied_photo_id[i]
                                        });
                                    }
                                }
                            },
                            fullSuccess: function(r) {
                                var hash;
                                if (r.status == 'ok') {
                                    if (!$.isArray(original_photo_id)) { // one photo page
                                        if (denied_photo_id.length) {
                                            alert($_("You don't have sufficient access rights"));
                                        }
                                        if (r.data.parent_id) {
                                            hash = $.photos.getHashByPhotoId(r.data.parent_id);
                                            $.photos.photo_stack_cache.deleteById(photo_id);
                                        } else {
                                            var stream = $.photos.photo_stream_cache,
                                                next = stream.getNext(original_photo_id);
                                            if (next) {
                                                hash = $.photos.getHashByPhotoId(next.id);
                                            } else {
                                                hash = stream.hash;
                                            }
                                            stream.deleteById(photo_id);
                                        }

                                        $.wa.setHash(hash);
                                        fn && fn(r);
                                    } else { // photo list page
                                        if (r.data.alert_msg) {
                                            alert(r.data.alert_msg);
                                        }

                                        var removed_photo_ids = {};
                                        $.each(photo_id, function(i, id) {
                                            removed_photo_ids[id] = id;
                                        });
                                        if (r.data.denied_photo_id && r.data.denied_photo_id.length) {
                                            $.each(r.data.denied_photo_id, function(i, id) {
                                                delete removed_photo_ids[id];
                                            });
                                        }
                                        removed_photo_ids = $.map(removed_photo_ids, function(i, id) {
                                            $.photos.photo_stream_cache.deleteById(photo_id[i]);
                                            return id;
                                        });

                                        $('#photo-list li.selected').trigger('select', false);

                                        if (removed_photo_ids.length) {
                                            $.photos.makeDeleteAnimation(removed_photo_ids, function() {
                                                fn && fn(r);
                                            });
                                        } else {
                                            fn && fn(r);
                                        }
                                    }
                                } else {
                                    fn && fn(r);
                                }
                            }
                        });
                    }
                },
            'json');
        },

        deleteAllAlbums: function(album_ids, del_photos, fn) {
            if (!album_ids.length) {
                return fn && fn();
            }

            // Delete first album from the list, then delete the rest of albums
            var a_id = album_ids.shift();
            $.photos.deleteAlbum(a_id, del_photos, function() {
                $.photos.deleteAllAlbums(album_ids, del_photos, fn);
            });
        },

        deleteAlbum: function(album_id, del_photos, fn) {
            if (del_photos) {
                $.photos._deleteAlbumWithPhotos(album_id, fn);
            } else {
                $.post('?module=album&action=delete', { album_id: album_id },
                    function(r) {
                        if (r.status == 'ok') {
                            $.photos.onDeleteAlbum(album_id);
                            $.photos.goToHash('');
                            if (typeof fn == 'function') {
                                fn();
                            }
                        }
                    },
                'json');
            }
        },

        _deleteAlbumWithPhotos: function(album_id, fn) {
            $.post('?module=photo&action=resolution', { album_id: album_id },
                function(r) {
                    if (r.status == 'ok') {
                        var photo_id = r.data.photo_id,
                            data = [];

                        // serializeArray
                        for (var i = 0, n = photo_id.length; i < n; ++i) {
                            data.push({
                                name: 'photo_id[]', value: photo_id[i]
                            });
                        }

                        if (data.length) {
                            var chunk_count = 10,
                                params = {
                                    url: '?module=photo&action=delete',
                                    photo_id: data,
                                    dataType: 'json',
                                    fullSuccess: function(r) {
                                        if (r.status == 'ok') {
                                            $.photos.deleteAlbum(album_id, 0, fn);
                                        } else if(console) {
                                            console.log('Error while delete album');
                                        }
                                    }
                                };
                            $.photos.massPost(params);
                        } else {
                            $.photos.deleteAlbum(album_id, 0, fn);
                        }
                    }
                },
            'json');
        },

        /**
         * Serialize data in format of jQuery.serializeArray function
         */
        serializeData: function(data, name) {
            if (typeof data === 'object' && !$.isArray(data) && typeof name === 'undefined') {
                var result = [];
                for (name in data) {
                    if (data.hasOwnProperty(name)) {
                        result.push({
                            name: name,
                            value: data[name]
                        });
                    }
                }
                return result;
            }
            if (!$.isArray(data)) {
                data = [data];
            }
            for (var i = 0, n = data.length, item = data[0]; i < n; item = data[++i]) {
                if (typeof item != 'object') {
                    item = {
                        name: name,
                        value: item
                    };
                }
                data[i] = item;
            }
            return data;
        },

        saveAccess: function(options) {
            var photo_id = options.photo_id || [],
                data = options.data || [],
                fn = options.fn,
                original_photo_id = photo_id;
                onDeniedExist = options.onDeniedExist || function(msg) {
                    alert(msg);
                },
                resolution = typeof options.resolution === 'boolean' ? options.resolution : true;

            if (typeof data === 'object' && !$.isArray(data)) {
                data = $.photos.serializeData(data);
            }
            data.push({
                name: 'photos_length',
                value: original_photo_id.length
            });

            function _saveAccess(photo_id) {
                var post_data = [],
                    denied_photo_id = [],
                    allowed_photo_id = [];

                // serializeArray
                for (var i = 0, n = photo_id.length; i < n; ++i) {
                    post_data.push({
                        name: 'photo_id[]', value: photo_id[i]
                    });
                }
                $.photos.massPost({
                    photo_id: post_data,
                    url: '?module=photo&action=manageAccessSave',
                    dataType: 'json',
                    data: data,
                    success: function(r, data) {
                        if (r.status == 'ok') {
                            denied_photo_id = denied_photo_id.concat(r.data.denied_photo_id);
                            for (var i = 0, n = denied_photo_id.length; i < n; ++i) {
                                data.push({
                                    name: 'denied_photo_id[]', value: denied_photo_id[i]
                                });
                            }
                            allowed_photo_id = r.data.allowed_photo_id;
                            for (var i = 0, n = allowed_photo_id.length; i < n; ++i) {
                                data.push({
                                    name: 'allowed_photo_id[]', value: allowed_photo_id[i]
                                });
                            }
                        }
                    },
                    fullSuccess: function(r) {
                        if (r.status == 'ok' && r.data.alert_msg) {
                            onDeniedExist(r.data.alert_msg);
                        }
                        if (typeof fn === 'function') {
                            fn(r, allowed_photo_id);
                        }
                    }
                });
            }
            if (resolution) {
                $.post('?module=photo&action=resolution', $.isArray(photo_id) ? photo_id : { photo_id: photo_id },
                    function(r) {
                        if (r.status == 'ok') {
                            _saveAccess(r.data.photo_id);
                        }
                    },
                'json');
            } else {
                _saveAccess($.isArray(photo_id) ? photo_id : [photo_id]);
            }
        },

        addToAlbums: function(options) {
            var photo_id = options.photo_id || [],
                album_id = options.album_id || [],
                copy = options.copy == undefined ? 1 : options.copy,  // true is default value
                fn = options.fn,
                onDeniedExist = options.onDeniedExist || function(msg) {
                    alert(msg);
                };

            photo_id = $.photos.serializeData(photo_id, 'photo_id[]');
            album_id = $.photos.serializeData(album_id, 'album_id[]');

            var data = photo_id.concat(album_id);
            data.push({
                name: 'copy',
                value: +copy
            });
            $.post('?module=photo&action=addToAlbums', data, function (r) {
                if (r.status == 'ok') {
                    var old_albums = r.data.old_albums || [],
                        albums = [].concat(r.data.albums || [], old_albums),
                        denied_album_id = r.data.denied_album_id;
                    for (var i = 0, n = albums.length; i < n; ++i) {
                        var album = albums[i];
                        $('#album-list li[rel=' + album.id + ']')
                            .find('.count:first').text(album.count).end()
                            .find('.count-new:first').text(album.count_new > 0 ? '+' + album.count_new : '');
                    }
                    if (r.data.alert_msg) {
                        onDeniedExist(r.data.alert_msg);
                    }
                }
                if (typeof fn == 'function') {
                    fn(r);
                }
            }, 'json');
        },
        assignTags: function(options) {
            var photo_id = options.photo_id || [],
                tags = options.tags || [],
                delete_tags = options.delete_tags || [],
                fn = options.fn,
                onDeniedExist = options.onDeniedExist || function(msg) {
                    alert(msg);
                },
                data = [];
            if (!$.isArray(photo_id)) {
                data = data.concat([{
                    name: 'photo_id[]',
                    value: photo_id
                }, {
                    name: 'one_photo',
                    value: 1
                }]);
            } else {
                data = photo_id;
            }
            if (!$.isArray(tags) || !tags.length) {
                data.push({
                    name: 'tags',
                    value: tags
                });
                if (delete_tags.length) {
                    data = data.concat(delete_tags);
                }
            } else {
                data = data.concat(tags);
            }
            $.post('?module=photo&action=assignTags', data,
                function(r) {
                    if (r.status == 'ok') {
                        var cloud = r.data.cloud,
                            tag_cloud_block = $('#tag-cloud-block');

                        if (($.isArray(cloud) && !cloud.length) || !cloud) {
                            tag_cloud_block.hide();
                        } else {
                            $('#tag-cloud').html(tmpl('template-tag-cloud', {
                                cloud: cloud
                            }));
                            tag_cloud_block.show();
                        }

                        // update stream cache
                        var photo_tags = r.data.tags || {},
                            photo_id,
                            tags;

                        for (photo_id in photo_tags) {
                            if (photo_tags.hasOwnProperty(photo_id)) {
                                tags = photo_tags[photo_id];
                                $.photos._updateStreamCache(photo_id, {
                                    tags: tags
                                });
                            }
                        }
                        // new cloud tag needed in the album-create-dialog, so remove, because waDialog made cache of it
                        $('#album-create-dialog').remove();
                        if (r.data.alert_msg) {
                            onDeniedExist(r.data.alert_msg);
                        }
                    }
                    if (typeof fn == 'function') {
                        fn(r);
                    }
                },
            'json');
        },

        makeStack: function(photo_ids, fn) {
            var parent_id = photo_ids.shift(),
                original_photo_ids = photo_ids;

            $.post('?module=photo&action=resolution', photo_ids, function(r) {
                if (r.status == 'ok') {
                    var photo_ids = r.data.photo_id,
                        data = [],
                        denied_photo_ids = [];

                    for (var i = 0, n = photo_ids.length; i < n; ++i) {
                        if (photo_ids[i] != parent_id.value) {
                            data.push({
                                name: 'photo_id[]', value: photo_ids[i]
                            });
                        }
                    }

                    $.photos.massPost({
                        photo_id: data,
                        data: { parent_id: parent_id.value, photos_length: original_photo_ids.length },
                        url: '?module=stack&action=make',
                        dataType: 'json',
                        success: function(r, data) {
                            if (r.status == 'ok') {
                                if (r.status == 'ok') {
                                    denied_photo_ids = denied_photo_ids.concat(r.data.denied_photo_ids);
                                    for (var i = 0, n = denied_photo_ids.length; i < n; ++i) {
                                        data.push({
                                            name: 'denied_photo_id[]', value: denied_photo_ids[i]
                                        });
                                    }
                                }
                            }
                        },
                        fullSuccess: function(r) {
                            if (r.status == 'ok') {
                                if (r.data.alert_msg) {
                                    alert(r.data.alert_msg);
                                }
                                for (var i = 0, n = original_photo_ids.length; i < n; ++i) {
                                    $.photos.photo_stream_cache.deleteById(original_photo_ids[i].value);
                                }
                                $.photos.photo_stream_cache.updateById(r.data.parent_id, r.data.photo);
                                $('#photo-list li.selected').trigger('select', false);
                                $.photos.makeStackAnimation([parent_id].concat(original_photo_ids));
                                //$.photos.goToHash($.photos.getHashByPhotoId(parent_id.value));
                            }
                        }
                    });
                }
            }, 'json');
        },

        makeStackAnimation: function(photo_ids, done) {
            var parent_id = photo_ids[0].value;
            var parent = $('li[data-photo-id="'+parent_id+'"]');
            var parent_offset = parent.offset();
            var duration = 300;
            var win = $(window);

            // scroll to parent
            if (parent_offset.top < win.scrollTop() || parent_offset.top > win.scrollTop() + win.height()) {
                $("html, body").animate({
                    scrollTop: parent_offset.top
                }, duration);
            }

            var deferreds = [];
            for (var i = 1; i < photo_ids.length; i++) {
                var photo_id = photo_ids[i].value;
                var photo = $('li[data-photo-id="'+photo_id+'"]');
                var photo_offset = photo.offset();
                var photo_clone = photo.clone().css({
                    'z-index': 10,
                    position: 'absolute',
                    top: photo_offset.top,
                    left: photo_offset.left
                }).insertAfter(photo);
                photo.css({
                    opacity: 0
                });
                deferreds.push(
                    photo.hide(duration).promise()
                );
                $.photos.photo_stream_cache.deleteById(photo_id);
                deferreds.push(photo_clone.animate({
                    top: parent_offset.top,
                    left: parent_offset.left
                }, duration).promise().done(function() {
                    $(this).remove();
                }));

            }
            $.when.apply($, deferreds).done(function() {
                var is_last = parent.hasClass('last');
                parent.replaceWith(tmpl($.photos.list_template, {
                    photos: [$.photos.photo_stream_cache.getById(parent_id)],
                    hash: $.photos.hash,
                    last_login_time: $.photos.options.last_login_time,
                    options: {}
                }));
                if (!is_last) {
                    $('li[data-photo-id="'+parent_id+'"]').removeClass('last');
                }
                $('li[data-photo-id="'+parent_id+'"]').addClass('highlighted');
                if (typeof done === 'function') {
                    done();
                }
            });
        },

        makeDeleteAnimation: function(photo_ids, done) {
            var ids = {};
            $.each(photo_ids, function(i, id) {
                ids[id] = true;
            });
            var $lis = $('#photo-list').children().filter(function() {
                return !!ids[$(this).data('photo-id')];
            }).animate({ width: 0 }, function() {
                $lis.remove();
                done && done();
            });
        },

        highlightSidebarItem: function() {
            var href = $.photos.hash;
            $('#p-sidebar li.selected').removeClass('selected');
            var link = $('#p-sidebar li a[href="#'+(href||'/')+'"]');
            if (!link.length) {
                link = $('#p-sidebar li a[href^="#'+(href||'/')+'"]');
            }
            if (link.length) {
                link.parents('li:first').addClass('selected');
            }
        },
        toggleFullScreen: function() {
            if ($.storage.get('photos/maximize_photo')) {
                $('#wa-app').addClass('p-full-screen');
            } else {
                $('#wa-app').removeClass('p-full-screen');
            }
        },
        hotkey_manager: (function() {
            function arrowsHandlerDown(e) {
                var target_type = e.target.type,
                    code = e.keyCode;
                if ( arrowsHandlerDown.hold ||
                     target_type == 'text' || target_type == 'textarea' ||
                     (code != 37 && code != 39)
                   )
                {
                    return;
                }
                if (code == 39) { // right arrow
                    var next = $.photos.photo_stream_cache.getNext();
                    if (next) {
                        $.photos.goToHash($.photos.getHashByPhotoId(next.id), false);
                        $.photos.shift_next = true;
                    }
                    arrowsHandlerDown.hold = true;
                }
                if (code == 37) { // left arrow
                    var prev = $.photos.photo_stream_cache.getPrev();
                    if (prev) {
                        $.photos.goToHash($.photos.getHashByPhotoId(prev.id), false);
                        $.photos.shift_next = true;
                    }
                    arrowsHandlerDown.hold = true;
                }
            }
            function arrowsHandlerUp(e) {
                arrowsHandlerDown.hold = false;
            }
            function hotkeyToRate(key) {
                switch (key) {
                    case 48:
                    case 96:
                        key = 0;
                        break;
                    case 49:
                    case 97:
                        key = 1;
                        break;
                    case 50:
                    case 98:
                        key = 2;
                        break;
                    case 51:
                    case 99:
                        key = 3;
                        break;
                    case 52:
                    case 100:
                        key = 4;
                        break;
                    case 53:
                    case 101:
                        key = 5;
                        break;
                    default:
                        key = null;
                        break;
                }
                return key;
            }
            function rateHandlerDown(e) {
                var target_type = e.target.type,
                    code = e.keyCode;
                if ( rateHandlerDown.hold ||
                     target_type == 'text' || target_type == 'textarea'
                   )
                {
                    return;
                }
                var rate = hotkeyToRate(code);
                if (typeof rate !== 'number') {
                    return;
                }
                rateHandlerDown.hold = true;
                // TODO: kick dublicate code
                if ($('#photo').length) {
                    // when parent in stack save this value for all photos in stacks
                    var photo = $.photos.photo_stream_cache.getCurrent();
                    if (!photo.edit_rights) {
                        return;
                    }
                    $.photos.saveField(photo.id, 'rate', rate,
                        function (r) {
                            if (r.status == 'ok' && r.data.count) {
                                $('#rated-count').text(r.data.count > 0 ? r.data.count : '');
                                $('#photo-rate').rateWidget('setOption', 'rate', rate);
                            }
                        }
                    );
                } else {
                    var photo_id = $('input[name^=photo_id]').map(function() {
                        return this.checked ? { name: 'id[]', value: this.value } : null;
                    }).toArray();
                    if (!photo_id.length) {
                        return;
                    }
                    $.photos.saveField({
                        id: photo_id,
                        name: 'rate',
                        value: rate,
                        fn: function(r) {
                            if (r.status == 'ok') {
                                var allowed_photo_id = r.data.allowed_photo_id && !$.isArray(r.data.allowed_photo_id) ?
                                        r.data.allowed_photo_id :
                                        {};
                                $('#photo-list li.selected').each(function() {
                                    var self = $(this);
                                    if (allowed_photo_id[self.attr('data-photo-id')]) {
                                        $.photos.updateThumbRate(self, rate);
                                    }
                                }).find('input:first').trigger('select', false);
                                if (r.data.count) {
                                    $('#rated-count').text(r.data.count > 0 ? r.data.count : '');
                                }
                                if (r.data.alert_msg) {
                                    alert(r.data.alert_msg);
                                }
                            }
                        }
                    });
                }
            };
            function rateHandlerUp() {
                rateHandlerDown.hold = false;
            }
            return {
                set: function(type) {
                    if (typeof type === 'undefined') {
                        $(document).bind('keydown', arrowsHandlerDown).bind('keyup', arrowsHandlerUp).
                            bind('keydown', rateHandlerDown).bind('keyup', rateHandlerUp);
                    } else if (type === 'rate') {
                        $(document).bind('keydown', rateHandlerDown).bind('keyup', rateHandlerUp);
                    }
                },
                unset: function() {
                    $(document).unbind('keydown', arrowsHandlerDown).unbind('keyup', arrowsHandlerUp).
                        unbind('keyup', rateHandlerDown).unbind('keyup', rateHandlerUp);
                }
            };
        })(),

        getHashByPhotoId: function(id) {
            return $.photos.hash + '/photo/' + id;
        },

        setLazyLoad: function() {
            var offset = null;
            $(window).lazyLoad({
                container: '#photo-list',
                load: function() {
                    offset = offset || $('#photo-list li').length;
                    $(window).lazyLoad('sleep');
                    $(".lazyloading-wrapper .lazyloading-progress").show();
                    $(".lazyloading-wrapper .lazyloading-link").hide();
                    $.post(
                        '?module=photo&action=loadList',
                        { offset : offset, hash: $.photos.hash },
                        function (r) {
                            // if hash has changed already than ignore
                            if (r.data.hash != $.photos.hash) {
                                return;
                            }
                            var target = $("#photo-list");
                            if (!r.data.photos.length) {

                                $(".lazyloading-wrapper .lazyloading-progress").hide();
                                $(".lazyloading-wrapper .lazyloading-link").hide();
                                $(window).lazyLoad('stop');
                                return;
                            }
                            var list_offset = $.photos.photo_stream_cache.length();
                            $.photos.photo_stream_cache.append(r.data.photos);
                            target.find("li.last").removeClass('last');
                            $.photos.renderPhotoListChunk(target, list_offset, {string: r.data.string}, function(){
                                if(!$.photos.total_count || ($.photos.total_count>$.photos.photo_stream_cache.length())) {
                                    $(window).lazyLoad('wake');
                                } else {
                                    $(".lazyloading-wrapper .lazyloading-progress").hide();
                                    $(".lazyloading-wrapper .lazyloading-link").hide();
                                    $(window).lazyLoad('stop');
                                }
                            });
                            offset += r.data.photos.length;
                        },
                        "json"
                    );
                }
            });
            $('.lazyloading-wrapper a.lazyloading-link').die('click.lazyloading').live('click.lazyloading',function(){
                $(window).lazyLoad('force');
                return false;
            });
        },

        unsetLazyLoad: function() {
            if ($(window).lazyLoad) {
                $(window).lazyLoad('stop');
            }
            $('.lazyloading-wrapper a.lazyloading-link').die('click.lazyloading')
        },

        getAlbum: function() {
            this.album = this.album || null;
            return this.album;
        },

        setAlbum: function(album) {
            this.album = album;
        },

        unsetAlbum: function() {
            this.album = null;
        },

        /**
         * Get id of current rendered photo
         */
        getPhotoId: function() {
            var match = /photo\/(\d+)[\/]*$/.exec(location.href);
            if (match) {
                return parseInt(match[1]);
            }
            return null;
        },

        isCurrentPhotoStack: function() {
            var photo_id = this.getPhotoId();
            if (!photo_id) {
                return false;
            }
            var photo = this.photo_stream_cache.getById(photo_id);
            return photo && photo.stack_count > 0;
        },

        goToHash: function(hash, reload) {
            reload = typeof reload === 'undefined' ? true : reload;
            hash = hash.replace(/^\/*/, '').replace(/\/*\s*$/, '');

            var cur_hash = location.hash.replace(/^[^#]*#\/*/, '').replace(/\/*\s*$/, '');
            if (cur_hash == hash && reload) {
                $.photos.ignore_scrolltop = true;
                $.photos.dispatch();
            } else {
                location.hash = hash ? '/'+hash+'/' : '/';
            }
        },

        goToAnchor: function(anchor_name) {
            var anchor = $('a[name='+anchor_name+']');
            if (anchor.length) {
                $(document).scrollTop(anchor.position()['top']);
            }
        },

        photo_stream_cache: new PhotoStream(),

        // visual corrections after creating new album
        onCreateAlbum: function(album, parent_id) {
            // update album-list in left sidebar
            var html = tmpl('template-album-list-item', album);
            var album_list = $('#album-list');

            var ul;
            if (!parent_id) {
                ul = album_list.find('ul:first');
                if (!ul.length) {
                    album_list.find('.p-empty-album-list').hide();
                    ul = album_list.prepend(
                            '<ul class="menu-v with-icons"><li class="drag-newposition"></li></ul>'
                    ).find('ul:first');
                }
                album_list.find('ul:first').prepend(html);
            } else {
                var li = album_list.find('li[rel='+parent_id+']');
                ul = li.find('ul:first');
                if (!ul.length) {
                    li.append('<ul class="menu-v with-icons"></ul>');
                    ul = li.find('ul:first');
                    li.find('.count:first').after('<i class="icon16 darr overhanging collapse-handler" id="album-'+parent_id+'-handler"></i>');
                }
                ul.prepend(html);
            }

            album_list.find('.new-item').removeClass('new-item').mouseover();

            // update album-list in upload-form
            if(!album.type) {
                var select = $('#p-upload-step2 select[name=album_id]');
                if (!parent_id) {
                    select.find('optgroup').prepend('<option value="'+album.id+'">'+album.name+'</option>');
                } else {
                    var item = select.find('option[value='+parent_id+']');
                    var text = item.text();
                    var prefix = text.replace(/[^-]/g, '') + '-';
                    item.after('<option value="'+album.id+'">'+prefix+' '+album.name+'</option>');
                }
            }
        },

        // visual corrections after deleting album
        onDeleteAlbum: function(album_id) {

            // remove from sidebar-tree
            var album_list = $('#album-list'),
                li = album_list.find('li[rel='+album_id+']'),
                subtree = li.find('ul:first'),
                ul_wrapper = li.parents('ul:first'),
                children;

            // make children to jump one level up
            li.hide();
            if (subtree.length) {
                li.prev('.drag-newposition:first').remove();
                li.next('.drag-newposition:first').remove();

                children = subtree.children('li');
                children.hide().insertAfter(li);
                subtree.remove();
                li.remove();
                children.show();
            } else {
                li.next('.drag-newposition:first').remove().end().remove();
            }

            // if parent now has not children than delete collcapse-handler icon and ul wrapper
            if (ul_wrapper.length) {
                var items = ul_wrapper.find('li:not(.drag-newposition)');
                // parent has not children
                if (!items.length) {
                    var parent = ul_wrapper.parent('li');
                    if (parent.length) {
                        parent.find('i.collapse-handler').remove();
                    }
                    ul_wrapper.remove();
                }
            }

            if (!album_list.find('ul:first').length) {
                album_list.find('.p-empty-album-list').show();
            }

            // remove from album-list in upload-form
            var upload_form_select = $('#p-upload-step2 select[name=album_id]');
            upload_form_select.find('option[value='+album_id+']').remove();
        },

        // make right toolbar fixed for available even in scrolling
        fixRightToolbar: function() {
            $.photos.fixRightToolbar._handler = function handler() {
                var toolbar = $('#p-toolbar');
                if (!toolbar.length) {
                    return;
                }
                if (toolbar.hasClass('rendered')) {
                    toolbar.removeClass('p-fixed');
                    return;
                }
                if (!handler.top) {
                    handler.top = toolbar.children(':first').position()['top'];
                }
                if ($(this).scrollTop() > handler.top) {
                    toolbar.addClass('p-fixed');
                } else {
                    toolbar.removeClass('p-fixed');
                }
            };
            // check right now (maybe document is scrolled)
            $.photos.fixRightToolbar._handler.call(document);
            // bind handler
            $(document).bind('scroll' , $.photos.fixRightToolbar._handler);
        },

        photo_stack_cache: new PhotoStream(),

        isSelectedAnyPhoto: function() {
            return !!$('#photo-list li.selected:first').length;
        },

        getRatingHtml: function(rating, size, show_when_zero) {
            size = size || 10;
            rating = Math.round(rating * 2) / 2;
            if (!rating && !show_when_zero) {
                return '';
            }
            var html = '';
            for (var i = 1; i <= 5; i += 1) {
                html += '<i class="icon' + size + ' star';
                if (i > rating) {
                    if (i - rating == 0.5) {
                        html += '-half';
                    } else {
                        html += '-empty';
                    }
                }
                html += '"></i>';
            }
            return html;
        },

        uploadDialog: function() {
            $("#p-uploader").waDialog({
                'onLoad':$.photos.onUploadDialog,
                'onClose': $.photos.dialogClearSteps,
                'onSubmit': function () {
                    $('#p-start-upload-button').click();
                    return false;
                }
            });
        },

        dialogClearSteps: function() {
            $('#p-upload-step2').hide();
            $('#p-upload-step2-buttons').hide();
            $('#p-upload-step3').hide();
            $('#p-upload-step3-buttons').hide();
            $('#p-upload-step1').show();
            $('#p-upload-step1-buttons').show();
        },

        onUploadDialog: function () {
            var d = $(this);
            $(this).find('.files').empty();
            var hash = $.storage.get('photos/hash'),
                select = $('#p-upload-step2 select[name=album_id]');
            if (!hash || !~hash.indexOf('album')) {
                select.find('option:first').attr('selected', true);
            } else {
                var album_id = parseInt(hash.replace(/\/?album\//, ''));
                var option = select.find('optgroup option[value='+album_id+']');
                if(option.length) {
                    option.attr('selected', true);
                } else {
                    select.find('option:first').attr('selected', true);
                }
            }
        },

        massPost: function(params) {
            var chunk_count = params.chunk_count || 25,
                chunk_photo_ids,
                data = [];

            // serializeArray if needed
            if ($.isArray(params.data)) {
                data = data.concat(params.data);
            } else if (typeof params.data == 'object') {
                for (var k in params.data) {
                    data.push({
                        name: k,
                        value: params.data[k]
                    });
                }
            }
            params.type = 'post';

            var count = parseInt(params.count) || 0,
                photo_id = params.photo_id;
            if (params.photo_id) {
                photo_id = params.photo_id;
                if (!$.isArray(photo_id)) {
                    data.push({
                        name: 'photo_id',
                        value: photo_id
                    });
                    params.data = data;
                    params.success = params.fullSuccess;
                    $.ajax(params);
                    return;
                } else {
                    // make copy
                    photo_id = [].concat(photo_id);
                }
                count = photo_id.length;
            }
            if (typeof params.success == 'function') {
                var fn = params.success;
                params.success = function(r) {
                    fn(r, data);
                    process(r);
                };
            } else {
                params.success = process;
            }

            function process(r) {
                if (count) {
                    if (photo_id) {
                        chunk_photo_ids = photo_id.splice(0, chunk_count);
                        params.data = data.concat(chunk_photo_ids);
                    } else {
                        params.data = data;
                    }
                    count -= chunk_count;
                    count = count > 0 ? count : 0;
                    $.ajax(params);
                } else {
                    if (typeof params.fullSuccess == 'function') {
                        params.fullSuccess(r);
                    }
                }
            }
            process();
        },

        confirmDialog: function(options) {
            var d = $('#confirm-dialog');
            if (!d.length) {
                d = $('<div id="confirm-dialog"></div>');
                $("body").append(d);
            }
            if (options.url) {
                d.load(options.url, function() {
                    var opt = $.extend({}, options);
                    delete opt.url;
                    var self = $(this),
                        onLoad = opt.onLoad;

                    opt.onLoad = function() {
                        d.find('input[type=submit]').focus();
                        if (typeof onLoad === 'function') {
                            onLoad();
                        }
                    };
                    self.find('div:first').waDialog(opt);
                });
            }
        },
        showServerError: function(text) {
            if (text) {
                if (console) {
                    console.log('Server error occurred' + ":\n" + text); // show message in console
                }
                alert(text);
            } else if (console) {
                console.log('Server error occurred'); // show message in console
            }
        },

        // Drag-and-drop to sort sub-albums above photo list in a single album,
        // or root albums in Albums page
        initAlbumThumbsDragAndDrop: function($ul, parent_id) {
            $ul.sortable({
                handle: 'img',
                distance: 5,
                tolerance: 'pointer',
                stop: function(event, ui) {
                    $.post("?module=album&action=move", {
                        id: ui.item.data('album-id'),
                        before_id: ui.item.next().data('album-id') || 0,
                        parent_id: parent_id
                    });
                }
            });
        },

        hooks_manager: {
            handlers: {},
            /**
             * bind handler to hook (or handlers to hooks by hash-table). Function is polymorphous.
             *
             * @param string hook_name. Name of hook (search in files for tag: '@hook'
             * @param function handler
             * @param string name. Need for available to unbind. If omitted generate random name
             * @returns {*} name
             *
             * ...or in case of hash-table hooks to handlers correspongins
             * @param object map
             *
             */
            bind: function(hook_name, handler, name) {
                if (arguments.length == 1 && arguments[0] && typeof arguments[0] === 'object') {
                    var bind_map = arguments[0];
                    for (var hook_name in bind_map) {
                        if (bind_map.hasOwnProperty(hook_name)) {
                            this.bind(hook_name, bind_map[hook_name]);
                        }
                    }
                    return;
                }
                name = name || ('' + Math.random()).slice(2);
                this.handlers[hook_name] = this.handlers[hook_name] || {};
                this.handlers[hook_name][name] = handler;
                handler.handler_name = name;
                return name;
            },
            /**
             * Unbind handler from hook_name by name (or by handler itself in case of hanlder is not anonymous function)
             * @param string hook_name
             * @param string|function item. Name of handler
             */
            unbind: function(hook_name, item) {
                var name = item;
                if (typeof item === 'undefined') {
                    this.handlers[hook_name] = {};
                    return;
                }
                if (typeof item === 'function') {
                    name = item.handler_name;
                }
                if (typeof this.handlers[hook_name][name] === 'function') {
                    delete this.handlers[hook_name][name];
                }
            },
            /**
             * Trigger hook
             * @param hook_name
             *
             * @param argument
             * @param argument
             * ... (unlimited list of params)
             * This arguments will be available in correspond hook's handlers
             */
            trigger: function(hook_name/*argument, argument...*/) {
                var hook_handlers = this.handlers[hook_name];
                if (hook_handlers && typeof hook_handlers === 'object') {
                    var args = Array.prototype.slice.call(arguments, 1);
                    for (var name in hook_handlers) {
                        if (hook_handlers.hasOwnProperty(name) && typeof hook_handlers[name] === 'function') {
                            hook_handlers[name].apply(null, args);
                        }
                    }
                }
            }
        }
    };
})(jQuery);
$(function () {

    $('.p-one-photo .next').live('click', function () {
        $.photos.shift_next = true;
    });

    $('.dialog').die().live('change_loading_status', function(e, status) {
        var status = status || false,
            self = $(this),
            submit_input = self.find('input[type=submit]');

        if (status) {
            submit_input.attr('disabled', true).after('<i style="vertical-align: middle" class="icon16 loading"></i>');
        } else {
            submit_input.attr('disabled', false).next('i').remove();
        }
    });

    /**
     * Selection photos in photo-list section
     */

    // Prevent text selection in photo list while 'shift' key is held.
    (function() {
        var prevent_selection = false;
        $(document).on('selectstart', '#photo-list', function() {
            return !prevent_selection;
        });
        $(document).keydown(function(e) {
            if (e.keyCode == 16) {
                prevent_selection = true;
            }
        }).keyup(function(e) {
            if (e.keyCode == 16) {
                prevent_selection = false;
            }
        });
    })();

    // handler of triggerable 'select' event
    $("#photo-list li").live('select', function(e, selected, need_count) {
        selected = selected !== undefined ? selected : true;
        need_count = need_count !== undefined ? need_count : true;
        if (selected) {
            $(this).addClass('selected').find('input:first').attr('checked', true);
        } else {
            var select_all_photos = $('#selector-menu').find('[data-action="select-photos"]');
            if (select_all_photos.data('checked')) {
                select_all_photos.data('checked', false).
                        find('.unchecked').show().end().
                        find('.checked').hide();
            }
            $(this).removeClass('selected').find('input:first').attr('checked', false);
        }
        if (need_count) {
            $('#share-menu-block, #organize-menu-block').trigger('recount');
        }
    });


    // Shift+click on an image selects all between this one and previous one clicked
    (function() {
        var $last_li_checked = null;
        var $last_li_unchecked = null;
        $('#content').on('click', '#photo-list li .p-details input:checkbox, #photo-list li .p-details label', function(e) {
            var $li = $(this).closest('li');
            var $checkbox = $li.find('.p-details input:checkbox');
            var new_status;
            if ($checkbox.is(e.target)) {
                new_status = $checkbox.prop('checked');
            } else {
                new_status = !$checkbox.prop('checked');
                $checkbox.prop('checked', new_status).change();
            }

            if (new_status) {
                if (e.shiftKey && $last_li_checked) {
                    setCheckedBetween($last_li_checked, $li, true);
                }
                $last_li_checked = $li;
                $last_li_unchecked = null;
            } else {
                if (e.shiftKey && $last_li_unchecked) {
                    setCheckedBetween($last_li_unchecked, $li, false);
                }
                $last_li_checked = null;
                $last_li_unchecked = $li;
            }
        });
        function setCheckedBetween($from, $to, status) {
            if (!$from || !$to || !$from[0] || !$to[0] || $from.is($to[0])) {
                return;
            }

            var is_between = false;
            $to.parent().children().each(function(i, el) {
                if (!is_between) {
                    if ($from.is(el) || $to.is(el)) {
                        is_between = true;
                    }
                } else {
                    if ($from.is(el) || $to.is(el)) {
                        return false;
                    }
                    var $checkbox = $(el).find('.p-details input:checkbox');
                    if ($checkbox.prop('checked') != status) {
                        $checkbox.prop('checked', status).change();
                    }
                }
            });
        }
    })();

    // Highlight photos when selected
    $('#content')
        .off($.photos.namespace + '-photo-list-select-checkbox')
        .on('change' + $.photos.namespace + '-photo-list-select-checkbox',
            ':checkbox[name="photo_id[]"]',
            function () {
                if (this.checked) {
                    $(this).closest('li').addClass('selected');
                } else {
                    $(this).closest('li').removeClass('selected');
                }
                $('#share-menu-block, #organize-menu-block').trigger('recount');
            }
        );

    // Hide arrows over the photo if there are nowhere to go in its direction
    $.photos.hooks_manager.bind('afterLoadPhoto', function() {
        if ($.photos.photo_stream_cache.getPrev()) {
            $('#p-block .p-one-photo > .p-image-nav.p-rewind').show();
        } else {
            $('#p-block .p-one-photo > .p-image-nav.p-rewind').hide();
        }
        if ($.photos.photo_stream_cache.getNext()) {
            $('#p-block .p-one-photo > .p-image-nav.p-ff').show();
        } else {
            $('#p-block .p-one-photo > .p-image-nav.p-ff').hide();
        }
    });

    $.photos_dragndrop.init();
});

/**
 * Toolbar menu constructor. Interface for convenient manipulations
 *
 * @param string selector
 * @param object options for active menu plugin-widget
 * @returns object interface for manipulations
 */
function ToolbarMenu(selector, options)
{
    var ul = null;
    return {
        init: function() {
            ul = $(selector);
            if (ul.length) {
                ul.activeMenu(options);
            }
            return this;
        },
        enable: function(items) {
            if (!items) {
                ul.parents('div:first').show();
                ul.activeMenu('fire');
            } else {
                ul.activeMenu('enable', items);
            }
            return this;
        },
        disable: function(items) {
            if (!items) {
                ul.parents('div:first').hide();
            } else {
                ul.activeMenu('disable', items);
            }
            return this;
        },
        setAction: function(name, action) {
            options[name] = action;
            if (ul) {
                ul.activeMenu('setOption', name, action);
            }
            return this;
        },
        getAction: function(name) {
            return options[name];
        },
        is: function(expr) {
            return ul? ul.is(expr) : $(selector).is(expr);
        }
    };
}
;
/**
 *
 */
(function($) {
    $.photos.menu.register('list','#organize-menu', {
        addToAlbumAction: function() {
            var d = $("#choose-albums");
            var showDialog = function() {
                $('#choose-albums').waDialog({
                    onLoad: function() {
                        $(this).find('h1:first span:first').text('(' + $('#photo-list li.selected').length + ')');
                    },
                    onSubmit: function (d) {
                        var photo_id = $('input[name^=photo_id]').serializeArray(),
                            album_id = $(this).serializeArray();
                        if (!album_id.length) {
                            alert($_('Please select at least one album'));
                            return false;
                        }
                        if (!photo_id.length) {
                            d.trigger('close');
                            return false;
                        }
                        d.trigger('change_loading_status', true);
                        $.photos.addToAlbums({
                            photo_id: photo_id,
                            album_id: album_id,
                            copy: 1,
                            fn: function() {
                                $('#photo-list li.selected').trigger('select', false);
                                d.trigger('change_loading_status', false).trigger('close');
                            }
                        });
                        return false;
                    }
                });
            };

            // no cache dialog
            if (d.length) {
                d.parent().remove();
            }

            var p = $('<div></div>').appendTo('body');
            p.load('?module=dialog&action=albums', showDialog);
        },
        assignTagsAction: function() {
            var default_text = $_('add a tag');
            $('#photo-list-tags-dialog').waDialog({
                onLoad: function() {
                    var tags_control = $('#photo-list-tags-dialog #photos-list-tags');
                    if(!$('#photo-list-tags-dialog .tagsinput').length) {
                        tags_control.tagsInput({
                            autocomplete_url: '?module=tag&action=list',
                            height: 200,
                            width: '100%',
                            defaultText: default_text
                        });
                    }
                    tags_control.importTags('');
                    $('#photo-list-tags-dialog .js-selected-counter').text('(' + $('input[name^=photo_id]:checked').length + ')');
                    var photo_ids = [];
                    $('input[name^=photo_id]:checked').each(function () {
                        photo_ids.push($(this).val());
                    });
                    var tags = {},
                        photo_stream = $.photos.photo_stream_cache.getAll();
                    // union tags
                    for (var i = 0, n = $.photos.photo_stream_cache.length(); i < n; i++) {
                        var p = photo_stream[i];
                        if ($.inArray(p.id, photo_ids) != -1) {
                            var p_tags = p.tags;
                            if ($.isEmptyObject(p_tags)) {
                                continue;
                            }
                            if ($.isEmptyObject(tags)) {
                                tags = p_tags;
                            } else {
                                for (var tag_id in p_tags) {
                                    if (p_tags.hasOwnProperty(tag_id)) {
                                        tags[tag_id] = p_tags[tag_id];
                                    }
                                }
                            }
                        }
                    }
                    $("#photos-tags-remove-list").empty();
                    if (!jQuery.isEmptyObject(tags)) {
                        $("#photo-tags-remove").show();
                        for (var tag_id in tags) {
                            $("#photos-tags-remove-list").append($('<label></label>').text(tags[tag_id]).prepend('<input name="delete_tags[]" value="' + tag_id + '" type="checkbox"> ')).append('<br>');
                        }
                    } else {
                        $("#photo-tags-remove").hide();
                    }
                    $("#photo-list-tags-dialog .dialog-window").height($("#photo-list-tags-dialog .dialog-content-indent").outerHeight());

                    $('#photos-popular-tags').off('click.photos', 'a').
                            on('click.photos', 'a', function() {
                                var name = $(this).text();
                                tags_control.removeTag(name);
                                tags_control.addTag(name);
                            });
                },
                onSubmit: function (d) {
                    var input = $('#photos-list-tags_tag');
                    if (input.length && (input.val() != default_text)) {
                        var e = jQuery.Event("keypress",{
                            which:13
                        });
                        input.trigger(e);
                    }
                    var photo_id = $('input[name^=photo_id]:checked').serializeArray(),
                        tags = $('#photo-list-tags-dialog #photos-list-tags').val(),
                        delete_tags = $('#photos-tags-remove-list input[name^=delete_tags]:checked').serializeArray();

                    if (!tags.length && !delete_tags.length) {
                        alert($_('Please select at least one tag'));
                        return false;
                    }
                    if (!photo_id.length) {
                        d.trigger('close');
                        return false;
                    }
                    d.trigger('change_loading_status', true);
                    $.photos.assignTags({
                        photo_id: photo_id,
                        tags: tags,
                        delete_tags: delete_tags,
                        fn: function(r) {
                            if (r.status == 'ok') {
                                var photo_tags = r.data.tags,
                                    photo_list = $('#photo-list li.selected'),
                                    html;
                                for (var id in photo_tags) {
                                    if (photo_tags.hasOwnProperty(id)) {
                                        html = tmpl('template-photo-list-photo-tags', {
                                            tags: photo_tags[id]
                                        });
                                        photo_list.filter('[data-photo-id='+id+']:first').find('.tags>span').html(html);
                                    }
                                }
                                photo_list.trigger('select', false);
                                d.trigger('change_loading_status', false).trigger('close');
                            }
                        }
                    });

                    return false;
                }
            });
        },
        deleteFromAlbumAction: function() {
            var photo_id = $('input[name^=photo_id]').serializeArray();
            if (photo_id.length) {
                var album_id = $.photos.getAlbum().id;
                $.post('?module=photo&action=deleteFromAlbum&id=' + album_id, photo_id, function() {
                    $.photos.dispatch();
                }, 'json');
            }
        },
        deletePhotosAction: function() {
            var photo_id = $('input[name^=photo_id]').serializeArray();
            if (photo_id.length) {
                $.photos.confirmDialog({
                    url: '?module=dialog&action=confirmDeletePhotos&cnt=' + photo_id.length,
                    onSubmit: function(d) {
                        d.trigger('change_loading_status', true);
                        $.photos.deletePhotos(photo_id, function() {
                            $.photos.unsetCover();
                            d.trigger('change_loading_status', false).trigger('close');
                            $('#photo-list li.selected').trigger('select', false);
                        });
                        return false;
                    }
                });
            }
        },
        setRateAction: function() {
            var dialog = $('<div id="set-rate"></div>').waDialog({
                url: '?module=dialog&action=rates',
                className: 'width300px height200px',
                onLoad: function(d) {
                    dialog.find('.p-rate-photo-counter').text('('+$('input[name^=photo_id]:checked').length+')');
                    $('#photos-rate', d).rateWidget({
                        withClearAction: false,
                        onUpdate: function (rate) {
                            var d = dialog;
                            var rate = $('#photos-rate', d).rateWidget('getOption', 'rate');
                            var photo_id = $('input[name^=photo_id]').map(function() {
                                return this.checked ? { name: 'id[]', value: this.value } : null;
                            }).toArray();
                            if (!photo_id.length) {
                                d.trigger('close');
                                return false;
                            }
                            $.photos.saveField({
                                id: photo_id,
                                name: 'rate',
                                value: rate,
                                fn: function(r) {
                                    if (r.status == 'ok') {
                                        var allowed_photo_id = r.data.allowed_photo_id && !$.isArray(r.data.allowed_photo_id) ?
                                                r.data.allowed_photo_id :
                                                {};
                                        $('#photo-list li.selected').each(function() {
                                            var self = $(this);
                                            if (allowed_photo_id[self.attr('data-photo-id')]) {
                                                $.photos.updateThumbRate(self, rate);
                                            }
                                        }).find('input:first').trigger('select', false);
                                        if (r.data.count) {
                                            $('#rated-count').text(r.data.count > 0 ? r.data.count : '');
                                        }
                                        if (r.data.alert_msg) {
                                            alert(r.data.alert_msg);
                                        }
                                        d.trigger('close');
                                    }
                                }
                            });
                            return false;
                        }
                });
             }
            });
        },
        makeStackAction: function() {
            var photo_id = $('input[name^=photo_id]').serializeArray();
            if (photo_id.length < 2) {
                alert($_('Please select at least two photos'));
                return false;

            }
            $.photos.makeStack(photo_id);
            return false;
        },
        manageAccessAction: function() {
            var photo_id = $('input[name^=photo_id]').serializeArray();
            $.photos.showManageAccessDialog(
                photo_id,
                function(d) {
                    var f = $(this),
                        data = f.serializeArray(),
                        status = f.find('input[name=status]:checked').val();

                    if (!photo_id.length) {
                        d.trigger('close');
                        return false;
                    }
                    d.trigger('change_loading_status', true);
                    $.photos.saveAccess({
                        photo_id: photo_id,
                        data: data,
                        fn: function(r, allowed_photo_id) {
                            var photo_list = $('#photo-list li.selected');
                            for (var i = 0, n = allowed_photo_id.length; i < n; ++i) {
                                var photo_id = allowed_photo_id[i],
                                    corner_top = photo_list.filter('[data-photo-id='+photo_id+']:first').find('.p-image-corner.top.left');
                                // update icon in top-left corner
                                corner_top.find('.lock-bw').remove();
                                if (status <= 0) {
                                    corner_top.append('<i class="icon16 lock-bw p-private-photo" title="' + $_('Private photo') + '"></i>');
                                }
                            }
                            $.photos._updateStreamCache(allowed_photo_id, {
                                status: status
                            });
                            $('#photo-list li.selected').trigger('select', false);
                            d.trigger('change_loading_status', false).trigger('close');
                        }
                    });
                    return false;
                }
            );
            return false;
        },
        beforeAnyAction: function(name) {
            if (name != 'make-stack') {
                if (!$.photos.isSelectedAnyPhoto()) {
                    alert($_('Please select at least one photo'));
                    return false;
                }
            }
        },
        onFire: function() {
            $('#organize-menu').trigger('recount');
        }

    });
    $.photos.menu.register('list','#selector-menu', {

        selectPhotosAction: function(item) {
            var counter = $('#share-menu-block, #organize-menu-block').find('.count');
            if (!item.data('checked')) {
                item.data('checked', true);
                item.find('.checked').show().end().
                        find('.unchecked').hide();
                counter.text($.photos.total_count).show();
            } else {
                item.data('checked', false);
                item.find('.unchecked').show().end().
                        find('.checked').hide();
                counter.text('').hide();
            }
            $('#photo-list li').trigger('select', [!!item.data('checked'), false]);
        }
    });

    $.photos.menu.register('list','#share-menu', {
        embedAction: function() {
            var d = $('#embed-photo-list-dialog'),
                size = $.storage.get('photos/embed_size'),
                photo_list = $('#photo-list li.selected'),

                // accumulate photo ids to comma-separated string
                photo_ids = photo_list.map(function() {
                    var photo_id = $(this).attr('data-photo-id'),
                        photo = $.photos.photo_stream_cache.getById(photo_id),
                        hash = photo_id;
                    if (photo.status <= 0) {
                        hash += ':' + photo.hash;
                    }
                    return hash;
                }).toArray().join(','),

                album = $.photos.getAlbum(),
                hash = $.photos.hash,
                context_parameters = {
                    photo_ids: photo_ids,
                    hash: hash,
                    size: size
                },
                dialog_url;

            if (album && album.status <= 0) {
                hash = hash.replace(/\/*$/, '')+':'+album.hash + '/';
                context_parameters.hash = hash;
            }
            var dialog_url = '?module=dialog&action=embedPhotoList&photo_ids='+photo_ids+'&hash='+hash;
            if (size) {
                dialog_url += '&size='+size;
            }
            if (!d.length) {
                d = $('<div id="embed-photo-list-dialog"></div>');
                $("body").append(d);
            }
            d.load(dialog_url, function() {
                d.find('div:first').waDialog({
                    onLoad: function() {
                        var select = d.find('select[name=size]');
                        size && select.val(size);
                        select.change(function() {
                            var size = $(this).val();
                            context_parameters.size = size;
                            loadEmbedListContext(context_parameters);
                            $.storage.set('photos/embed_size', size);
                        });

                        d.find('input[name=description]').click(function() {
                            if (this.checked) {
                                $('#embed-photo-list-html-with-descriptions').show().attr('disabled', false);
                                $('#embed-photo-list-html').hide().attr('disabled', true);
                            } else {
                                $('#embed-photo-list-html').show().attr('disabled', false);
                                $('#embed-photo-list-html-with-descriptions').hide().attr('disabled', true);
                            }
                        });

                        d.find('input[name=link], textarea[name=urls], textarea[name=html], textarea[name=smarty_code]').click(function() {
                            var selection = $(this).getSelection();
                            if (!selection.length) {
                                $(this).select();
                            }
                        });
                        d.find('input[name=link]').focus().select();

                        d.find('.switcher').activeMenu({
                            selectedPhotosAction: function(action) {
                                context_parameters.size = d.find('select[name=size]').val();
                                context_parameters.photo_ids = photo_ids;
                                loadEmbedListContext(context_parameters);
                            },
                            allListPhotosAction: function(action) {
                                context_parameters.size = d.find('select[name=size]').val();
                                context_parameters.photo_ids = '';
                                loadEmbedListContext(context_parameters);
                            }
                        }).find('li').click(function() {
                            $(this).parent().find('.selected').removeClass('selected').end().end().addClass('selected');
                        });
                        function loadEmbedListContext(data) {
                            var cached_data = loadEmbedListContext.data,
                                send_post = false;
                            for (var name in cached_data) {
                                if (cached_data.hasOwnProperty(name)) {
                                    if (cached_data[name] !== data[name]) {
                                        send_post = true;
                                        break;
                                    }
                                }
                            }
                            loadEmbedListContext.data = $.extend({}, data);
                            if (!send_post) {
                                return;
                            }
                            d.find('h1').find('.loading').parent().show();
                            $.post("?module=photo&action=embedList",
                                data,
                                function (r) {
                                    if (r.status == 'ok') {
                                        var context = r.data.context;
                                        d.find('input[name=link]').val(context.link);
                                        d.find('a.link').attr('href', context.link);
                                        d.find('textarea[name=urls]').val(context.urls);
                                        d.find('#embed-photo-list-html').val(context.html);
                                        d.find('#embed-photo-list-html-with-descriptions').val(context.html_with_descriptions);
                                        d.find('textarea[name=smarty_code]').val(context.smarty_code);
                                        d.find('h1 span:first').text('('+context.count+')');
                                        if (context.all_public) {
                                            d.find('.exclamation-message').hide();
                                        } else {
                                            d.find('.exclamation-message').show();
                                        }

                                        // Domains for domain selector
                                        context.domains = context.domains || {};
                                        $domain_selector.children().each(function() {
                                            var $option = $(this);
                                            var domain = $option.attr('value');
                                            $option.data('frontend-url', (context.domains[domain] || {}).frontend_url || '');
                                        });

                                        saveContextData();
                                        updateDomainInFields();
                                    }
                                    d.find('h1').find('.loading').parent().hide();
                                },
                            "json");
                        }
                        loadEmbedListContext.data = loadEmbedListContext.data || $.extend({}, context_parameters);

                        var $domain_selector = d.find('select[name=domain]');
                        if ($domain_selector.length) {
                            saveContextData();
                            updateDomainInFields();
                            $domain_selector.change(updateDomainInFields);
                        }
                        function saveContextData() {
                            $.each(['textarea[name=urls]', '#embed-photo-list-html', '#embed-photo-list-html-with-descriptions'], function(i, selector) {
                                var $el = $(selector);
                                $el.data('context_data', $el.val());
                            });
                        }
                        function updateDomainInFields() {
                            if (!$domain_selector.length) {
                                return false;
                            }

                            $.each(['textarea[name=urls]', '#embed-photo-list-html', '#embed-photo-list-html-with-descriptions'], function(i, selector) {
                                var $el = $(selector);
                                $el.val($el.data('context_data').split($domain_selector.data('original-domain')).join($domain_selector.val()));
                            });

                            var $selectted_option = $domain_selector.children(':selected');
                            if ($selectted_option.data('frontend-url')) {
                                d.find('input[name=link]').val($selectted_option.data('frontend-url')).closest('.field').slideDown();
                                d.find('a.link').attr('href', $selectted_option.data('frontend-url'));
                           } else {
                                d.find('input[name=link]').closest('.field').slideUp();
                           }
                        }
                    },
                    onSubmit: function() {
                        return false;
                    }
                });
            });

            return false;
        },
        beforeAnyAction: function(action) {
            if (!$.photos.isSelectedAnyPhoto() && action != 'blog-post' && action != 'embed') {
                alert($_('Please select at least one photo'));
                return false;
            }
        },
        blogPostAction: function() {
          var form = $('#blog-post-form');
          var photo_ids = $('#photo-list li.selected').map(function() {
              return $(this).attr('data-photo-id');
          }).toArray();
          var counter =[0,0];
          for(var i=0;i<photo_ids.length;i++) {
              var photo = $.photos.photo_stream_cache.getById(photo_ids[i]);
              if (!photo) {
                  photo = $.photos.photo_stack_cache.getById(photo_ids[i]);
              }
              if(photo) {
                  if(photo.hash) {
                      photo_ids[i] += ':'+photo.hash;
                  }
                  ++counter[photo.status];
              }
          }

          var content = '';
          if(true) {
              var album = $.photos.getAlbum(),
              hash = $.photos.hash,
              context_parameters = {
                      photo_ids: photo_ids.join(','),
                      hash: hash,
                      size:obligatory_size//XXX
                  };

              if (album && album.status <= 0) {
                  hash = hash.replace(/\/*$/, '')+':'+album.hash + '/';
                  context_parameters.hash = hash;
              }
              context_parameters.hash = null;
              $('#photo-blog-dialog :submit').attr('disabled',true);

              $.post("?module=photo&action=embedList",
                  context_parameters,
                  function (r) {
                      if (r.status == 'ok') {
                          var context = r.data.context;
                          form.find('[name="title"]:input').val($('#photo-list-name').text());
                          form.find('[name="text"]:input').val(blog_smarty_enabled?context.smarty_code:context.html_with_descriptions);
                          if(counter[0]) {
                              $('#photo-blog-dialog :submit').attr('disabled',false);
                          } else {
                              form.submit();
                          }
                      }
                  },
              "json");
          } else {
              form.find('[name="title"]:input').val($('#photo-list-name').text());
              var id;
              if(blog_smarty_enabled) {
                  var photos_hash = ''+(photo_ids.length?("/id/"+photo_ids.join(',')):window.location.hash.replace(/.*#/,'').replace(/\/$/,''));
                  content = "\n"+
                  "{if $wa->photos}\n"+
                  "{$photos_size='big'}\n"+
                  "\t{$photos = $wa->photos->photos('"+photos_hash+"', $photos_size)}\n"+
                  "\t{foreach $photos as $photo}\n"+
                  "\t\t<p>{if $photo.description}{$photo.description}<br>{/if}\n"+
                  "\t\t<img src='{$photo[\"thumb_`$photos_size`\"]['url']}' alt='{$photo.name}.{$photo.ext}'></p>\n"+
                  "\t{/foreach}\n" +
                  "{/if}\n";

              } else {
                  if(!photo_ids.length) {
                      photo_ids = $('#photo-list li').map(function() {
                          return $(this).attr('data-photo-id');
                      }).toArray();
                  }
                  while(id = photo_ids.shift()) {
                      var photo = $.photos.photo_stream_cache.getById(id);
                      if (!photo) {
                          photo = $.photos.photo_stack_cache.getById(id);
                      }
                      if(photo) {
                          content += '<p>'+(photo.description ? photo.description + '<br>\n': '\n') +
                          '    <img src="'+photo.thumb_big.url+'" alt="'+photo.name+'.'+photo.ext+'" width="'+photo.thumb_big.size.width+'" height="'+photo.thumb_big.size.height+'">\n</p>\n';
                      }
                  }
              }
          }
          if(counter[0]) {
              $('#photo-blog-dialog').waDialog({
              'onLoad':function(){
                  $('#photo-blog-dialog :submit').attr('disabled',true);
                  var notice = $('#photo-blog-dialog p');
                  var count = [counter[0],photo_ids.length];
                  notice.html(notice.html().replace(/(%d)/g,function(){return count.shift();}));
                  //count photos
              },
              'onSubmit':function(){
                  form.submit();
                  return false;
              }
          });
          } else {
              //form.submit();
          }

          return false;
        },
        onFire: function() {
            $('#share-menu').trigger('recount');
        }
    });


    $('#p-sidebar a, #wa-header a, a.album-view, #photo-list div.p-image a').live('click', function (e) {
        if ($('#save-menu-block').is(':visible') && $('#save-menu-block input.button').hasClass('yellow')) {
            if (!confirm($_("Unsaved changes will be lost if you leave this page now. Are you sure?"))) {
                e.preventDefault();
                return false;
            }
        }
    });

    $.photos.menu.register('list','#save-menu', {

        saveDescriptionAction: function() {

            var data = {},matches,id,field;
            $('#photo-list.p-descriptions :text,#photo-list.p-descriptions textarea').each(function(){
                if ( (this.defaultValue != this.value) && (matches = $(this).attr('name').match(/^photo\[(\d+)\]\[(\w+)\]$/)) ){
                    id = matches[1];
                    field = matches[2];
                    var cached = $.photos.photo_stream_cache.getById(id);
                    if(!cached || (this.value != cached[field])) {
                        if(!data[id]) {
                            data[id] = {'id':id};
                        }
                        data[id][field] = this.value;
                    }
                }
            });
            $.photos.saveFields(data);

            //TODO check response and update default values for inputs
            $('#photo-list.p-descriptions :text.highlighted,#photo-list.p-descriptions textarea.highlighted').each(function(){
                $(this).removeClass('highlighted');
            });
            var counter = $('#save-menu-block .count.indicator');
            if(counter.length) {
                var count = 0;
                counter.text(count);
                if(!count) {
                    $('#save-menu-block input.button').removeClass('yellow').addClass('green');
                    counter.hide();
                }
            }
            return false;
        },
        hideNameAction: function(item, e) {
            var checkbox = item.find(':checkbox');
            var checked = checkbox.prop('checked');
            if(e.target.tagName != 'INPUT') {
                checked = !checked;
            }
            if (checked) {
                $('#photo-list li :text[name$="\[name\]"]').hide();
                $('#photo-list li textarea[name$="\[description\]"].js-small').css('height','+=27').removeClass('js-small').addClass('js-big');
            } else {
                $('#photo-list li :text[name$="\[name\]"]').show();
                $('#photo-list li textarea[name$="\[description\]"].js-big').css('height','-=27').removeClass('js-big').addClass('js-small');
            }
            setTimeout(function(){checkbox.attr('checked',checked);},50);
            $.storage.set('photos/list/hide_name',checked);
        },
        onFire: function() {
            var counter = $('#save-menu-block .count.indicator');
            if(counter.length) {
                counter.text('0');
                $('#save-menu-block input.button').removeClass('yellow').addClass('green');
                counter.hide();
            }
        },
        onInit: function(container) {
            container.find('[data-action="hide-name"] :checkbox').prop('checked', $.storage.get('photos/list/hide_name',false));
            var handler = function(){
                var changed = [],matches;
                $('#photo-list.p-descriptions :text,#photo-list.p-descriptions textarea').each(function(){
                    if ( (this.defaultValue != this.value) && (matches = $(this).attr('name').match(/^photo\[(\d+)\]\[(\w+)\]$/)) ){
                        var id = matches[1];
                        if(changed.indexOf(id) < 0) {
                            var cached = $.photos.photo_stream_cache.getById(id);
                            if(!cached || (this.value != cached[matches[2]])) {
                                $(this).addClass('highlighted');
                                changed.push(id);
                            } else if ($(this).hasClass('highlighted')) {
                                $(this).removeClass('highlighted');
                            }
                        }

                    } else if ($(this).hasClass('highlighted')) {
                        $(this).removeClass('highlighted');
                    }
                });
                var counter = $('#save-menu-block .count.indicator');
                var count = changed.length;
                if(counter.length) {
                    counter.text(count);
                }
                if(!count) {
                    $('#save-menu-block input.button').removeClass('yellow').addClass('green');
                    counter.hide();
                } else {
                    $('#save-menu-block input.button').removeClass('green').addClass('yellow');
                    counter.show();
                }
            };
            $('#p-content').on('change.photos-save-menu', '#photo-list.p-descriptions :text, #photo-list.p-descriptions textarea', handler);
            $('#p-content').on('keyup.photos-save-menu', '#photo-list.p-descriptions :text, #photo-list.p-descriptions textarea', handler);
            //change data handler
        }
    });
})(jQuery);;
/**
 *
 */
(function($) {
    $.photos.menu.register('photo', '#photo-organize-menu', {
        addToAlbumAction: function() {
            $('<div id="choose-albums-photo"></div>').waDialog({
                url: '?module=dialog&action=albums&id=' + $.photos.getPhotoId(),
                className: 'width600px height400px',
                onSubmit: function (d) {
                    var photo_id = $.photos.photo_stream_cache.getCurrent().id;
                    $.photos.addToAlbums({
                        photo_id: photo_id,
                        album_id: $(this).serializeArray(),
                        copy: 0,
                        fn: function(r) {
                            if (r.status == 'ok') {
                                var old_albums = r.data.old_albums || [],
                                    album = $.photos.getAlbum(),
                                    albums = r.data.albums;
                                if (album) {
                                    for (var i = 0, n = old_albums.length; i < n; ++i) {
                                        // if now we are inside the one of old albums
                                        if (album.id == old_albums[i].id) {
                                            if (!albums.length) {
                                                $.photos.goToHash('/photo/'+photo_id);
                                            } else {
                                                $.photos.goToHash('/album/'+albums[0].id+'/photo/'+photo_id);
                                            }
                                            d.trigger('close');
                                            return;
                                        }
                                    }
                                }
                                $('#photo-albums').html(tmpl('template-photo-albums', {
                                    albums: albums
                                }));
                                d.trigger('close');
                            }
                        }
                    });
                    return false;
                }
            });
        },
        deletePhotoAction: function() {
            $.photos.confirmDialog({
                url: '?module=dialog&action=confirmDeletePhoto&id=' + $.photos.getPhotoId(),
                onSubmit: function(d) {
                    d.trigger('close');
                    $.photos.setCover();
                    $.photos.deletePhotos($.photos.getPhotoId(), function() {
                        $.photos.unsetCover();
                    });
                    return false;
                }
            });
        },
        unstackAction: function() {
            $.photos.confirmDialog({
                url: '?module=dialog&action=confirmUnstack&cnt=' + $.photos.photo_stack_cache.length(),
                onSubmit: function(d) {
                    d.trigger('close');
                    var id = $.photos.photo_stream_cache.getCurrent().id;
                    $.post('?module=stack&action=unmake&id=' + id, {}, function(response) {
                        $.photos.goToHash($.photos.hash);
                    }, 'json');
                    return false;
                }
            });
        },
        manageAccessAction: function() {
            var photo_id = $.photos.photo_stream_cache.getCurrent().id;
            $.photos.showManageAccessDialog(
                'photo_id='+photo_id,
                function(d) {
                    var f = $(this),
                        data = f.serializeArray();

                    data.push({
                        name: 'one_photo',
                        value: 1
                    });
                    $.photos.saveAccess({
                        photo_id: $.photos.photo_stream_cache.getCurrent().id,
                        data: data,
                        fn: function(r) {
                            var photo = r.data.photo,
                                stack = r.data.stack;

                            if (photo) {
                                photo = $.photos.photo_stream_cache.updateById(photo.id, photo);
                                // update content control panel
                                $.photos.initPhotoContentControlWidget({
                                    frontend_link_template: r.data.frontend_link_template,
                                    photo: photo
                                });
                                $.photos.updatePhotoImgs(photo);
                            } else if (stack && $.isArray(stack) && stack.length) {
                                var stack_cache = $.photos.photo_stack_cache,
                                    current = stack_cache.getCurrent();
                                for (var i = 0, n = stack.length; i < n; ++i) {
                                    stack_cache.updateById(stack[i].id, stack[i]);
                                }
                                $.photos.initPhotoContentControlWidget({
                                    frontend_link_template: r.data.frontend_link_template,
                                    photo: current
                                });
                                $.photos.updatePhotoImgs(current);
                            }
                            d.trigger('close');
                        },
                        onDeniedExist: function() {
                            alert($_("You don't have sufficient access rights"));
                            }
                        });
                        return false;
                    }
                );
                return false;
            }
        }
    );

    $.photos.menu.register('photo', '#edit-menu', {
        beforeAnyAction: function() {
            $.photos.setCover();
        },
        rotateLeftAction: function() {
            $.photos.rotate($.photos.getPhotoId(), 'left', function() {
                $.photos.unsetCover();
            });
        },
        rotateRightAction: function() {
            $.photos.rotate($.photos.getPhotoId(), 'right', function() {
                $.photos.unsetCover();
            });
        },

        onInit: function() {
            $(window).resize($.photos.centralizeLoadingIcon);
        }
    });

    $.photos.menu.register('photo', '#share-menu', {
        embedAction: function() {
            var d = $('#embed-photo-dialog'),
                photo_id = $.photos.getPhotoId(),
                hash = $.photos.hash,
                size = $.storage.get('photos/embed_size'),
                dialog_url = '?module=dialog&action=embedPhoto&photo_id='+photo_id+'&hash='+hash;

            if (size) {
                dialog_url += '&size='+size;
            }
            if (!d.length) {
                d = $('<div id="embed-photo-dialog"></div>');
                $("body").append(d);
            }
            d.load(dialog_url, function() {
                d.find('div:first').waDialog({
                    onLoad: function() {
                        var select = d.find('select[name=size]');

                        select.val(size);
                        select.change(function() {
                            var size = $(this).val(),
                                contexts = d.data('contexts'),
                                context = contexts[size];

                            d.find('textarea[name=html]').val(context.html);
                            d.find('input[name=url]').val(context.url);
                            $.storage.set('photos/embed_size', size);
                            saveContextData();
                            updateDomainInFields();
                        });

                        var $domain_selector = d.find('select[name=domain]');
                        if ($domain_selector.length) {
                            saveContextData();
                            updateDomainInFields();
                            $domain_selector.change(updateDomainInFields);
                        }
                        function saveContextData() {
                            if ($domain_selector.length) {
                                $.each(['textarea[name=html]', 'input[name=url]'], function(i, selector) {
                                    var $el = $(selector);
                                    $el.data('context_data', $el.val());
                                });
                            }
                        }
                        function updateDomainInFields() {
                            if (!$domain_selector.length) {
                                return false;
                            }

                            $.each(['textarea[name=html]', 'input[name=url]'], function(i, selector) {
                                var $el = $(selector);
                                $el.val($el.data('context_data').split($domain_selector.data('original-domain')).join($domain_selector.val()));
                            });

                            var $selectted_option = $domain_selector.children(':selected');
                            if ($selectted_option.data('frontend-url')) {
                                d.find('input[name=link]').val($selectted_option.data('frontend-url')).closest('.field').slideDown();
                                d.find('a.link').attr('href', $selectted_option.data('frontend-url'));
                           } else {
                                d.find('input[name=link]').closest('.field').slideUp();
                           }
                        }

                        d.find('input[name=url], textarea[name=html], input[name=link]').click(function() {
                            var selection = $(this).getSelection();
                            if (!selection.length) {
                                $(this).select();
                            }
                        });
                        d.find('input[name=link]').focus().select();
                    },
                    onSubmit: function() {
                        return false;
                    }
                });
            });
            return false;
        },
        blogPostAction: function() {
          var form = $('#blog-post-form');
          var photo_id = $.photos.getPhotoId();
          var photo = $.photos.photo_stream_cache.getById(photo_id);
          if (!photo) {
              photo = $.photos.photo_stack_cache.getById(photo_id);
          }
          if(photo) {
              if(true) {
                  var id = photo.id;
                  if(photo.hash){
                      id += ':'+photo.hash;
                  }
                  var context_parameters = {
                          photo_ids: id,
                          hash: null,
                          size:obligatory_size//XXX
                      };


                  $('#photo-blog-dialog :submit').attr('disabled',true);

                  $.post("?module=photo&action=embedList",
                      context_parameters,
                      function (r) {
                          if (r.status == 'ok') {
                              var context = r.data.context;
                              form.find('[name="title"]:input').val(photo.name);
                              var content = (blog_smarty_enabled && false)?context.smarty_code:context.html_with_descriptions;
                              form.find('[name="text"]:input').val(content.replace(/^<p>(.*)<\/p>$/mi,'$1'));
                              if(!parseInt(photo.status)) {
                                  $('#photo-blog-dialog :submit').attr('disabled',false);
                              } else {
                                  form.submit();
                              }
                          }
                      },
                  "json");
              } else {

                  form.find('[name="title"]:input').val(photo.name);
                  var content = '<p>'+(photo.description ? photo.description + '<br>': '') + '<img src="'+photo.thumb_big.url+'" alt="'+photo.name+'.'+photo.ext+'"></p>';
                  form.find('[name="text"]:input').val(content);
              }

              if(!parseInt(photo.status)) {
                  $('#photo-blog-dialog').waDialog({
                      'onLoad':function(){
                          $('#photo-blog-dialog :submit').attr('disabled',true);
                          var notice = $('#photo-blog-dialog p');
                          var count = [1,1];
                          notice.html(notice.html().replace(/(%d)/g,function(){return count.shift();}));
                          //count photos
                      },
                      'onSubmit':function(){
                          form.submit();
                          return false;
                      }
                  });
              } else {
                  //form.submit();
              }
          }
          return false;
        }

    });

    $('#restore-original').live('click', function() {
        if (confirm($_('This will reset all changes you applied to the image after upload, and will restore the image to its original. Are you sure?'))) {
            $.photos.setCover();
            $.photos.restoreOriginal($.photos.getPhotoId(), function() {
                $.photos.unsetCover();
            });
        }
    });

})(jQuery);;
/**
 * @version draft
 */

$.photos = $.photos || {};
$.photos.widget = $.photos.widget || {};
$.photos.widget.loupe = {
    options : {
        'animate' : true,
        'debug' : false
    },
    css : {
        'init' : {
            'width' : null,
            'max-width' : null,
            'margin-left' : 0,
            'margin-top' : 0,
            'height' : null
        }
    },
    drag : false,
    loaded : false,
    photo_data : null,
    thumb_data : null,
    container : null,
    helper : null,
    link : null,
    offset : {},
    status : 'thumb',

    init : function(options) {
        this.options = $.extend(this.options, options || {});
        var self = this;
        self.trace('init');
        $.photos.hooks_manager.bind('afterRenderImg', function(img, photo, proper_thumb) {
            self.trace('afterRenderImg');
            self.prepare(img, photo, proper_thumb);
        });
        $.photos.hooks_manager.bind('beforeLoadPhoto', function() {
            self.trace('beforeLoadPhoto');
            self.stop();
        });
        $.photos.hooks_manager.bind('onAbortPrevLoading', function() {
            self.trace('onAbortPrevLoading');
            self.stop();
        });
    },

    trace : function(message) {
        if (console && this.options.debug) {
            console.log(message);
        }
    },

    prepare : function(img, photo, proper_thumb) {

        var self = this;
        $('.p-one-photo a.next').die('click.loupe').live('click.loupe', function(e) {
            return self.clickNextHandler.apply(self, [this, e]);
        });
        this.trace('prepare, status='+this.status);
        this.photo_data = photo;
        this.container = img;
        this.thumb_data = {
                height : proper_thumb.size.height,
                width : proper_thumb.size.width,
                src : proper_thumb.url
        };

        if (this.status != 'thumb') {
            this.stop();
        }

        this.loaded = false;
        this.reset();
    },

    reset : function() {
        this.trace('reset, status='+this.status);
        this.link = $('#photo-loupe-link');
        if ($('div.photo-loupe-wrapper').length) {
            this.container.css({
                'width' : this.thumb_data.width + 'px',
                'max-width' : '',
                'height' : this.thumb_data.height + 'px',
                'margin-left' : '',
                'margin-top' : ''
            });
            this.container.unwrap();
        };

        this.status = 'thumb';
        this.link.find('.minimize').hide();
        if ((this.thumb_data.width && this.thumb_data.width < this.photo_data.width) || (this.thumb_data.height && this.thumb_data.height < this.photo_data.height) ) {
            this.link.find('.maximize').show();
            this.options.animate = (this.thumb_data.height && this.thumb_data.width) ? true : false;
        } else {
            this.link.find('.maximize').hide();
        }

        var self = this;
        this.link.unbind('.loupe').bind('click.loupe', function(e) {
            return self.clickHandler.apply(self, [this, e]);
        }).show();
    },

    clickHandler : function() {
        this.trace('clickHandler, status='+this.status);
        switch (this.status) {
            case 'loading': {
                this.container.stop();
            }
            case 'maximized' : {
                this.status = 'unloading';
                this.link.find('.minimize').hide();
                this.link.find('.maximize').show();
                this.decrease();
                break;
            }
            case 'thumb' : {
                this.status = 'loading';
                this.link.find('.minimize').hide();
                this.link.find('.maximize').hide();
                this.enlarge();
                break;
            }
        }
        return false;
    },

    clickNextHandler: function(element, e) {
        var res = (this.status == 'thumb') ? true: false;
        if(!res) {
            e.preventDefault();
        }
        this.trace('clickNextHandler '+res);
        return res;
    },

    interaction : function(element, e, node) {
        node = node.parents('body');
        switch (e.type) {
            case 'mouseup' : {
                if (this.drag) {
                    e.preventDefault();
                    this.drag = false;
                    $('div.photo-loupe-wrapper').css('cursor', 'auto');
                    $('body').css('cursor', '');
                    node.unbind(".loupe-move");
                }
                break;
            }
            case 'mousedown' :
            case 'click' : {
                this.clickNextHandler(element, e);
                if (!this.drag) {
                    $('div.photo-loupe-wrapper').css('cursor', 'move');
                    this.drag = true;
                    this.offset.mouseX = e.pageX;
                    this.offset.mouseY = e.pageY;
                    var self = this;

                    node.bind("mouseover.loupe-move mousemove.loupe-move", function(e) {
                        return self.watch.apply(self, [this, e]);
                    });
                }
                break;
            }
            case 'mouseleave' : {
                if (this.drag) {
                    e.preventDefault();
                    $('div.photo-loupe-wrapper').css('cursor', 'auto');
                    this.drag = false;
                    node.unbind(".loupe-move");
                }
                break;
            }
        }
    },

    enlarge : function() {
        this.drag = false;
        var self = this;
        this.trace('enlarge, status='+this.status);
        $('#photo').removeClass("ui-draggable").closest('.p-image').addClass('p-image-maximized');
        this.offset = this.container.offset();
        this.offset.x = Math
                .round((this.thumb_data.width - this.photo_data.width) / 2);
        this.offset.y = Math
                .round((this.thumb_data.height - this.photo_data.height) / 2);
        this.container.wrap('<div class="photo-loupe-wrapper" style="height:'
                + this.thumb_data.height + 'px;width:' + this.thumb_data.width
                + 'px;position: relative;"/>');
        this.container.removeAttr('width').removeAttr('height').css({
            'width' : this.thumb_data.width + 'px',
            'height' : this.thumb_data.height + 'px',
            'margin-left' : 0,
            'margin-top' : 0,
            'max-width' : this.photo_data.width + 'px',
            'display' : 'inline-block'

        });
        if (this.options.animate) {
            this.container.animate({
                'width' : this.photo_data.width + 'px',
                'height' : this.photo_data.height + 'px',
                'margin-left' : this.offset.x + 'px',
                'margin-top' : this.offset.y + 'px',
                'max-width' : this.photo_data.width + 'px'
            }, function() {
                return self.enlargeComplete.apply(self, [this]);
            });
        } else {
            this.container.css({
                'width' : this.photo_data.width + 'px',
                'height' : this.photo_data.height + 'px',
                'margin-left' : this.offset.x + 'px',
                'margin-top' : this.offset.y + 'px',
                'max-width' : this.photo_data.width + 'px'
            });
            this.enlargeComplete();
        }
        this.link.find('.minimize').show();

        this.bind(this.container);

        if (!this.helper) {
            var search = $('#photo-loupe');
            if (search.length) {
                this.helper = search.first();
            } else {
                this.helper = $('<img id="photo-loupe"/>');
            }
            this.helper.load(function(e) {
                self.loaded = true;
            });
        }
        var src = '?module=photo&action=download&photo_id='
                + this.photo_data.id + '&attach='+(this.photo_data.edit_datetime||this.photo_data.upload_datetime);
        this.helper.attr('src', src);
    },
    enlargeComplete : function() {
        if (this.loaded) {
            this.trace('enlargeComplete, status='+this.status);
            this.helper.css({
                'width' : this.photo_data.width + 'px',
                'height' : this.photo_data.height + 'px',
                'margin-left' : this.offset.x + 'px',
                'margin-top' : this.offset.y + 'px',
                'max-width' : this.photo_data.width + 'px'
            }).show();
            this.container.before(this.helper).hide();
            this.container.unbind(".loupe .loupe-move");
            this.bind(this.helper);
            this.container.css({
                'width' : this.thumb_data.width + 'px',
                'max-width' : '',
                'height' : this.thumb_data.height + 'px',
                'margin-left' : '',
                'margin-top' : ''
            });

            this.link.find('.minimize').show();
            this.status = 'maximized';
        } else {
            var self = this;
            setTimeout(function() {
                return self.enlargeComplete.apply(self, [this]);
            }, 50);
        }
    },

    bind : function(node) {
        this.trace('bind, status='+this.status);
        var self = this;
        node.bind("mousedown.loupe", function(e) {
            return self.interaction.apply(self, [this, e, node]);
        });
        $(document).bind("mouseup.loupe", function(e) {
            return self.interaction.apply(self, [this, e, node]);
        });
    },

    stop: function() {
        this.trace('stop at status='+this.status);
        var status = this.status;
        this.status = 'stop';
        switch(status) {
            case 'loading':{
                this.container.stop();
                this.decrease(true);
                break;
            }
            case 'maximized':{
                this.decrease(true);
                break;
            }
            case 'unloading':{
                if(this.helper) {
                    this.helper.stop();
                }
                this.decreaseComplete(true);
                break;
            }
            case 'thumb':{
                break;
            }
        }
        if(this.container) {
            this.container.find('*').unbind('.loupe .loupe-move');
        }
        $(document).unbind('.loupe .loupe-move');
        var wrapper = $('div.photo-loupe-wrapper');
        $('#photo-loupe-link img:visible').hide();
        $('body').css('cursor', '');
        if (wrapper.length) {
            this.container.unwrap();
        };
        if(this.helper) {
            this.helper.remove();
            this.helper = null;
        }
        this.status = 'thumb';
        //stop animation
        //remove wrapper
        //hide img helper
        //restore size
    },

    decrease : function(fast) {
        this.trace('decrease, status='+this.status);
        this.loaded = false;
        var self = this;
        var size = {
            'width' : this.thumb_data.width + 'px',
            'height' : this.thumb_data.height + 'px',
            'margin-left' : 0,
            'margin-top' : 0
        };
        if (fast || !this.options.animate) {
            this.helper.css(size);
            self.decreaseComplete();
        } else {
            this.helper.animate(size, function() {
                self.decreaseComplete();
            });
        }
        return false;
    },

    decreaseComplete : function(skip) {
        this.trace('decreaseComplete, status='+this.status);
        $('#photo').addClass("ui-draggable").closest('.p-image').removeClass('p-image-maximized');
        this.container.css(this.css.init).show();
        this.helper.hide();
        if(!skip) {
            this.reset();
        }
    },

    watch : function(element, e) {
        if (this.drag) {
            e.preventDefault();

            this.offset.x = Math.min(0, Math.max(this.thumb_data.width
                    - this.photo_data.width, Math.round(this.offset.x
                    - this.offset.mouseX + e.pageX)));
            this.offset.y = Math.min(0, Math.max(this.thumb_data.height
                    - this.photo_data.height, Math.round(this.offset.y
                    - this.offset.mouseY + e.pageY)));
            this.offset.mouseX = e.pageX;
            this.offset.mouseY = e.pageY;
            var item = (this.status == 'loading')
                    ? this.container
                    : this.helper;
            item.css({
                'margin-left' : this.offset.x + 'px',
                'margin-top' : this.offset.y + 'px'
            });
        }
    }
};
;
/*
 * jQuery plugin: fieldSelection - v0.1.1 - last change: 2006-12-16
 * (c) 2006 Alex Brem <alex@0xab.cd> - http://blog.0xab.cd
 */
(function(){var fieldSelection={getSelection:function(){var e=(this.jquery)?this[0]:this;return(('selectionStart'in e&&function(){var l=e.selectionEnd-e.selectionStart;return{start:e.selectionStart,end:e.selectionEnd,length:l,text:e.value.substr(e.selectionStart,l)}})||(document.selection&&function(){e.focus();var r=document.selection.createRange();if(r===null){return{start:0,end:e.value.length,length:0}}var re=e.createTextRange();var rc=re.duplicate();re.moveToBookmark(r.getBookmark());rc.setEndPoint('EndToStart',re);return{start:rc.text.length,end:rc.text.length+r.text.length,length:r.text.length,text:r.text}})||function(){return null})()},replaceSelection:function(){var e=(typeof this.id=='function')?this.get(0):this;var text=arguments[0]||'';return(('selectionStart'in e&&function(){e.value=e.value.substr(0,e.selectionStart)+text+e.value.substr(e.selectionEnd,e.value.length);return this})||(document.selection&&function(){e.focus();document.selection.createRange().text=text;return this})||function(){e.value+=text;return jQuery(e)})()}};jQuery.each(fieldSelection,function(i){jQuery.fn[i]=this})})();;
